import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/chart.js/src/helpers/helpers.core.js
var require_helpers_core = __commonJS({
  "node_modules/chart.js/src/helpers/helpers.core.js"(exports, module2) {
    "use strict";
    var helpers = {
      /**
       * An empty function that can be used, for example, for optional callback.
       */
      noop: function() {
      },
      /**
       * Returns a unique id, sequentially generated from a global variable.
       * @returns {Number}
       * @function
       */
      uid: function() {
        var id = 0;
        return function() {
          return id++;
        };
      }(),
      /**
       * Returns true if `value` is neither null nor undefined, else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @since 2.7.0
       */
      isNullOrUndef: function(value) {
        return value === null || typeof value === "undefined";
      },
      /**
       * Returns true if `value` is an array, else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @function
       */
      isArray: Array.isArray ? Array.isArray : function(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      },
      /**
       * Returns true if `value` is an object (excluding null), else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @since 2.7.0
       */
      isObject: function(value) {
        return value !== null && Object.prototype.toString.call(value) === "[object Object]";
      },
      /**
       * Returns `value` if defined, else returns `defaultValue`.
       * @param {*} value - The value to return if defined.
       * @param {*} defaultValue - The value to return if `value` is undefined.
       * @returns {*}
       */
      valueOrDefault: function(value, defaultValue) {
        return typeof value === "undefined" ? defaultValue : value;
      },
      /**
       * Returns value at the given `index` in array if defined, else returns `defaultValue`.
       * @param {Array} value - The array to lookup for value at `index`.
       * @param {Number} index - The index in `value` to lookup for value.
       * @param {*} defaultValue - The value to return if `value[index]` is undefined.
       * @returns {*}
       */
      valueAtIndexOrDefault: function(value, index, defaultValue) {
        return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
      },
      /**
       * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
       * value returned by `fn`. If `fn` is not a function, this method returns undefined.
       * @param {Function} fn - The function to call.
       * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
       * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
       * @returns {*}
       */
      callback: function(fn, args, thisArg) {
        if (fn && typeof fn.call === "function") {
          return fn.apply(thisArg, args);
        }
      },
      /**
       * Note(SB) for performance sake, this method should only be used when loopable type
       * is unknown or in none intensive code (not called often and small loopable). Else
       * it's preferable to use a regular for() loop and save extra function calls.
       * @param {Object|Array} loopable - The object or array to be iterated.
       * @param {Function} fn - The function to call for each item.
       * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
       * @param {Boolean} [reverse] - If true, iterates backward on the loopable.
       */
      each: function(loopable, fn, thisArg, reverse) {
        var i, len, keys2;
        if (helpers.isArray(loopable)) {
          len = loopable.length;
          if (reverse) {
            for (i = len - 1; i >= 0; i--) {
              fn.call(thisArg, loopable[i], i);
            }
          } else {
            for (i = 0; i < len; i++) {
              fn.call(thisArg, loopable[i], i);
            }
          }
        } else if (helpers.isObject(loopable)) {
          keys2 = Object.keys(loopable);
          len = keys2.length;
          for (i = 0; i < len; i++) {
            fn.call(thisArg, loopable[keys2[i]], keys2[i]);
          }
        }
      },
      /**
       * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
       * @see http://stackoverflow.com/a/14853974
       * @param {Array} a0 - The array to compare
       * @param {Array} a1 - The array to compare
       * @returns {Boolean}
       */
      arrayEquals: function(a0, a1) {
        var i, ilen, v0, v1;
        if (!a0 || !a1 || a0.length !== a1.length) {
          return false;
        }
        for (i = 0, ilen = a0.length; i < ilen; ++i) {
          v0 = a0[i];
          v1 = a1[i];
          if (v0 instanceof Array && v1 instanceof Array) {
            if (!helpers.arrayEquals(v0, v1)) {
              return false;
            }
          } else if (v0 !== v1) {
            return false;
          }
        }
        return true;
      },
      /**
       * Returns a deep copy of `source` without keeping references on objects and arrays.
       * @param {*} source - The value to clone.
       * @returns {*}
       */
      clone: function(source) {
        if (helpers.isArray(source)) {
          return source.map(helpers.clone);
        }
        if (helpers.isObject(source)) {
          var target = {};
          var keys2 = Object.keys(source);
          var klen = keys2.length;
          var k = 0;
          for (; k < klen; ++k) {
            target[keys2[k]] = helpers.clone(source[keys2[k]]);
          }
          return target;
        }
        return source;
      },
      /**
       * The default merger when Chart.helpers.merge is called without merger option.
       * Note(SB): this method is also used by configMerge and scaleMerge as fallback.
       * @private
       */
      _merger: function(key, target, source, options) {
        var tval = target[key];
        var sval = source[key];
        if (helpers.isObject(tval) && helpers.isObject(sval)) {
          helpers.merge(tval, sval, options);
        } else {
          target[key] = helpers.clone(sval);
        }
      },
      /**
       * Merges source[key] in target[key] only if target[key] is undefined.
       * @private
       */
      _mergerIf: function(key, target, source) {
        var tval = target[key];
        var sval = source[key];
        if (helpers.isObject(tval) && helpers.isObject(sval)) {
          helpers.mergeIf(tval, sval);
        } else if (!target.hasOwnProperty(key)) {
          target[key] = helpers.clone(sval);
        }
      },
      /**
       * Recursively deep copies `source` properties into `target` with the given `options`.
       * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
       * @param {Object} target - The target object in which all sources are merged into.
       * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
       * @param {Object} [options] - Merging options:
       * @param {Function} [options.merger] - The merge method (key, target, source, options)
       * @returns {Object} The `target` object.
       */
      merge: function(target, source, options) {
        var sources = helpers.isArray(source) ? source : [source];
        var ilen = sources.length;
        var merge, i, keys2, klen, k;
        if (!helpers.isObject(target)) {
          return target;
        }
        options = options || {};
        merge = options.merger || helpers._merger;
        for (i = 0; i < ilen; ++i) {
          source = sources[i];
          if (!helpers.isObject(source)) {
            continue;
          }
          keys2 = Object.keys(source);
          for (k = 0, klen = keys2.length; k < klen; ++k) {
            merge(keys2[k], target, source, options);
          }
        }
        return target;
      },
      /**
       * Recursively deep copies `source` properties into `target` *only* if not defined in target.
       * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
       * @param {Object} target - The target object in which all sources are merged into.
       * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
       * @returns {Object} The `target` object.
       */
      mergeIf: function(target, source) {
        return helpers.merge(target, source, { merger: helpers._mergerIf });
      },
      /**
       * Applies the contents of two or more objects together into the first object.
       * @param {Object} target - The target object in which all objects are merged into.
       * @param {Object} arg1 - Object containing additional properties to merge in target.
       * @param {Object} argN - Additional objects containing properties to merge in target.
       * @returns {Object} The `target` object.
       */
      extend: function(target) {
        var setFn = function(value, key) {
          target[key] = value;
        };
        for (var i = 1, ilen = arguments.length; i < ilen; ++i) {
          helpers.each(arguments[i], setFn);
        }
        return target;
      },
      /**
       * Basic javascript inheritance based on the model created in Backbone.js
       */
      inherits: function(extensions) {
        var me = this;
        var ChartElement = extensions && extensions.hasOwnProperty("constructor") ? extensions.constructor : function() {
          return me.apply(this, arguments);
        };
        var Surrogate = function() {
          this.constructor = ChartElement;
        };
        Surrogate.prototype = me.prototype;
        ChartElement.prototype = new Surrogate();
        ChartElement.extend = helpers.inherits;
        if (extensions) {
          helpers.extend(ChartElement.prototype, extensions);
        }
        ChartElement.__super__ = me.prototype;
        return ChartElement;
      }
    };
    module2.exports = helpers;
    helpers.callCallback = helpers.callback;
    helpers.indexOf = function(array, item, fromIndex) {
      return Array.prototype.indexOf.call(array, item, fromIndex);
    };
    helpers.getValueOrDefault = helpers.valueOrDefault;
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
  }
});

// node_modules/chart.js/src/helpers/helpers.easing.js
var require_helpers_easing = __commonJS({
  "node_modules/chart.js/src/helpers/helpers.easing.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers_core();
    var effects = {
      linear: function(t) {
        return t;
      },
      easeInQuad: function(t) {
        return t * t;
      },
      easeOutQuad: function(t) {
        return -t * (t - 2);
      },
      easeInOutQuad: function(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t;
        }
        return -0.5 * (--t * (t - 2) - 1);
      },
      easeInCubic: function(t) {
        return t * t * t;
      },
      easeOutCubic: function(t) {
        return (t = t - 1) * t * t + 1;
      },
      easeInOutCubic: function(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t;
        }
        return 0.5 * ((t -= 2) * t * t + 2);
      },
      easeInQuart: function(t) {
        return t * t * t * t;
      },
      easeOutQuart: function(t) {
        return -((t = t - 1) * t * t * t - 1);
      },
      easeInOutQuart: function(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t * t;
        }
        return -0.5 * ((t -= 2) * t * t * t - 2);
      },
      easeInQuint: function(t) {
        return t * t * t * t * t;
      },
      easeOutQuint: function(t) {
        return (t = t - 1) * t * t * t * t + 1;
      },
      easeInOutQuint: function(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t * t * t;
        }
        return 0.5 * ((t -= 2) * t * t * t * t + 2);
      },
      easeInSine: function(t) {
        return -Math.cos(t * (Math.PI / 2)) + 1;
      },
      easeOutSine: function(t) {
        return Math.sin(t * (Math.PI / 2));
      },
      easeInOutSine: function(t) {
        return -0.5 * (Math.cos(Math.PI * t) - 1);
      },
      easeInExpo: function(t) {
        return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
      },
      easeOutExpo: function(t) {
        return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
      },
      easeInOutExpo: function(t) {
        if (t === 0) {
          return 0;
        }
        if (t === 1) {
          return 1;
        }
        if ((t /= 0.5) < 1) {
          return 0.5 * Math.pow(2, 10 * (t - 1));
        }
        return 0.5 * (-Math.pow(2, -10 * --t) + 2);
      },
      easeInCirc: function(t) {
        if (t >= 1) {
          return t;
        }
        return -(Math.sqrt(1 - t * t) - 1);
      },
      easeOutCirc: function(t) {
        return Math.sqrt(1 - (t = t - 1) * t);
      },
      easeInOutCirc: function(t) {
        if ((t /= 0.5) < 1) {
          return -0.5 * (Math.sqrt(1 - t * t) - 1);
        }
        return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
      },
      easeInElastic: function(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
          return 0;
        }
        if (t === 1) {
          return 1;
        }
        if (!p) {
          p = 0.3;
        }
        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
      },
      easeOutElastic: function(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
          return 0;
        }
        if (t === 1) {
          return 1;
        }
        if (!p) {
          p = 0.3;
        }
        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
      },
      easeInOutElastic: function(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
          return 0;
        }
        if ((t /= 0.5) === 2) {
          return 1;
        }
        if (!p) {
          p = 0.45;
        }
        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        if (t < 1) {
          return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
        }
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
      },
      easeInBack: function(t) {
        var s = 1.70158;
        return t * t * ((s + 1) * t - s);
      },
      easeOutBack: function(t) {
        var s = 1.70158;
        return (t = t - 1) * t * ((s + 1) * t + s) + 1;
      },
      easeInOutBack: function(t) {
        var s = 1.70158;
        if ((t /= 0.5) < 1) {
          return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        }
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
      },
      easeInBounce: function(t) {
        return 1 - effects.easeOutBounce(1 - t);
      },
      easeOutBounce: function(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }
        if (t < 2 / 2.75) {
          return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
        }
        if (t < 2.5 / 2.75) {
          return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
      },
      easeInOutBounce: function(t) {
        if (t < 0.5) {
          return effects.easeInBounce(t * 2) * 0.5;
        }
        return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
      }
    };
    module2.exports = {
      effects
    };
    helpers.easingEffects = effects;
  }
});

// node_modules/chart.js/src/helpers/helpers.canvas.js
var require_helpers_canvas = __commonJS({
  "node_modules/chart.js/src/helpers/helpers.canvas.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers_core();
    var exports = module2.exports = {
      /**
       * Clears the entire canvas associated to the given `chart`.
       * @param {Chart} chart - The chart for which to clear the canvas.
       */
      clear: function(chart) {
        chart.ctx.clearRect(0, 0, chart.width, chart.height);
      },
      /**
       * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
       * given size (width, height) and the same `radius` for all corners.
       * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
       * @param {Number} x - The x axis of the coordinate for the rectangle starting point.
       * @param {Number} y - The y axis of the coordinate for the rectangle starting point.
       * @param {Number} width - The rectangle's width.
       * @param {Number} height - The rectangle's height.
       * @param {Number} radius - The rounded amount (in pixels) for the four corners.
       * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
       */
      roundedRect: function(ctx, x, y, width, height, radius) {
        if (radius) {
          var epsilon = 1e-7;
          var r = Math.min(radius, height / 2 - epsilon, width / 2 - epsilon);
          ctx.moveTo(x + r, y);
          ctx.lineTo(x + width - r, y);
          ctx.arcTo(x + width, y, x + width, y + r, r);
          ctx.lineTo(x + width, y + height - r);
          ctx.arcTo(x + width, y + height, x + width - r, y + height, r);
          ctx.lineTo(x + r, y + height);
          ctx.arcTo(x, y + height, x, y + height - r, r);
          ctx.lineTo(x, y + r);
          ctx.arcTo(x, y, x + r, y, r);
          ctx.closePath();
          ctx.moveTo(x, y);
        } else {
          ctx.rect(x, y, width, height);
        }
      },
      drawPoint: function(ctx, style, radius, x, y, rotation) {
        var type, edgeLength, xOffset, yOffset, height, size;
        rotation = rotation || 0;
        if (style && typeof style === "object") {
          type = style.toString();
          if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
            ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);
            return;
          }
        }
        if (isNaN(radius) || radius <= 0) {
          return;
        }
        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(rotation * Math.PI / 180);
        ctx.beginPath();
        switch (style) {
          default:
            ctx.arc(0, 0, radius, 0, Math.PI * 2);
            ctx.closePath();
            break;
          case "triangle":
            edgeLength = 3 * radius / Math.sqrt(3);
            height = edgeLength * Math.sqrt(3) / 2;
            ctx.moveTo(-edgeLength / 2, height / 3);
            ctx.lineTo(edgeLength / 2, height / 3);
            ctx.lineTo(0, -2 * height / 3);
            ctx.closePath();
            break;
          case "rect":
            size = 1 / Math.SQRT2 * radius;
            ctx.rect(-size, -size, 2 * size, 2 * size);
            break;
          case "rectRounded":
            var offset2 = radius / Math.SQRT2;
            var leftX = -offset2;
            var topY = -offset2;
            var sideSize = Math.SQRT2 * radius;
            this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius * 0.425);
            break;
          case "rectRot":
            size = 1 / Math.SQRT2 * radius;
            ctx.moveTo(-size, 0);
            ctx.lineTo(0, size);
            ctx.lineTo(size, 0);
            ctx.lineTo(0, -size);
            ctx.closePath();
            break;
          case "cross":
            ctx.moveTo(0, radius);
            ctx.lineTo(0, -radius);
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            break;
          case "crossRot":
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(-xOffset, -yOffset);
            ctx.lineTo(xOffset, yOffset);
            ctx.moveTo(-xOffset, yOffset);
            ctx.lineTo(xOffset, -yOffset);
            break;
          case "star":
            ctx.moveTo(0, radius);
            ctx.lineTo(0, -radius);
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(-xOffset, -yOffset);
            ctx.lineTo(xOffset, yOffset);
            ctx.moveTo(-xOffset, yOffset);
            ctx.lineTo(xOffset, -yOffset);
            break;
          case "line":
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            break;
          case "dash":
            ctx.moveTo(0, 0);
            ctx.lineTo(radius, 0);
            break;
        }
        ctx.fill();
        ctx.stroke();
        ctx.restore();
      },
      clipArea: function(ctx, area) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
        ctx.clip();
      },
      unclipArea: function(ctx) {
        ctx.restore();
      },
      lineTo: function(ctx, previous, target, flip) {
        if (target.steppedLine) {
          if (target.steppedLine === "after" && !flip || target.steppedLine !== "after" && flip) {
            ctx.lineTo(previous.x, target.y);
          } else {
            ctx.lineTo(target.x, previous.y);
          }
          ctx.lineTo(target.x, target.y);
          return;
        }
        if (!target.tension) {
          ctx.lineTo(target.x, target.y);
          return;
        }
        ctx.bezierCurveTo(
          flip ? previous.controlPointPreviousX : previous.controlPointNextX,
          flip ? previous.controlPointPreviousY : previous.controlPointNextY,
          flip ? target.controlPointNextX : target.controlPointPreviousX,
          flip ? target.controlPointNextY : target.controlPointPreviousY,
          target.x,
          target.y
        );
      }
    };
    helpers.clear = exports.clear;
    helpers.drawRoundedRectangle = function(ctx) {
      ctx.beginPath();
      exports.roundedRect.apply(exports, arguments);
    };
  }
});

// node_modules/chart.js/src/helpers/helpers.options.js
var require_helpers_options = __commonJS({
  "node_modules/chart.js/src/helpers/helpers.options.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers_core();
    module2.exports = {
      /**
       * Converts the given line height `value` in pixels for a specific font `size`.
       * @param {Number|String} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
       * @param {Number} size - The font size (in pixels) used to resolve relative `value`.
       * @returns {Number} The effective line height in pixels (size * 1.2 if value is invalid).
       * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
       * @since 2.7.0
       */
      toLineHeight: function(value, size) {
        var matches = ("" + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
        if (!matches || matches[1] === "normal") {
          return size * 1.2;
        }
        value = +matches[2];
        switch (matches[3]) {
          case "px":
            return value;
          case "%":
            value /= 100;
            break;
          default:
            break;
        }
        return size * value;
      },
      /**
       * Converts the given value into a padding object with pre-computed width/height.
       * @param {Number|Object} value - If a number, set the value to all TRBL component,
       *  else, if and object, use defined properties and sets undefined ones to 0.
       * @returns {Object} The padding values (top, right, bottom, left, width, height)
       * @since 2.7.0
       */
      toPadding: function(value) {
        var t, r, b, l;
        if (helpers.isObject(value)) {
          t = +value.top || 0;
          r = +value.right || 0;
          b = +value.bottom || 0;
          l = +value.left || 0;
        } else {
          t = r = b = l = +value || 0;
        }
        return {
          top: t,
          right: r,
          bottom: b,
          left: l,
          height: t + b,
          width: l + r
        };
      },
      /**
       * Evaluates the given `inputs` sequentially and returns the first defined value.
       * @param {Array[]} inputs - An array of values, falling back to the last value.
       * @param {Object} [context] - If defined and the current value is a function, the value
       * is called with `context` as first argument and the result becomes the new input.
       * @param {Number} [index] - If defined and the current value is an array, the value
       * at `index` become the new input.
       * @since 2.7.0
       */
      resolve: function(inputs, context, index) {
        var i, ilen, value;
        for (i = 0, ilen = inputs.length; i < ilen; ++i) {
          value = inputs[i];
          if (value === void 0) {
            continue;
          }
          if (context !== void 0 && typeof value === "function") {
            value = value(context);
          }
          if (index !== void 0 && helpers.isArray(value)) {
            value = value[index];
          }
          if (value !== void 0) {
            return value;
          }
        }
      }
    };
  }
});

// node_modules/chart.js/src/helpers/index.js
var require_helpers = __commonJS({
  "node_modules/chart.js/src/helpers/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_helpers_core();
    module2.exports.easing = require_helpers_easing();
    module2.exports.canvas = require_helpers_canvas();
    module2.exports.options = require_helpers_options();
  }
});

// node_modules/chart.js/src/core/core.defaults.js
var require_core_defaults = __commonJS({
  "node_modules/chart.js/src/core/core.defaults.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    module2.exports = {
      /**
       * @private
       */
      _set: function(scope, values) {
        return helpers.merge(this[scope] || (this[scope] = {}), values);
      }
    };
  }
});

// node_modules/chart.js/src/core/core.js
var require_core = __commonJS({
  "node_modules/chart.js/src/core/core.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    defaults2._set("global", {
      responsive: true,
      responsiveAnimationDuration: 0,
      maintainAspectRatio: true,
      events: ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
      hover: {
        onHover: null,
        mode: "nearest",
        intersect: true,
        animationDuration: 400
      },
      onClick: null,
      defaultColor: "rgba(0,0,0,0.1)",
      defaultFontColor: "#666",
      defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      defaultFontSize: 12,
      defaultFontStyle: "normal",
      showLines: true,
      // Element defaults defined in element extensions
      elements: {},
      // Layout options such as padding
      layout: {
        padding: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }
      }
    });
    module2.exports = function() {
      var Chart = function(item, config) {
        this.construct(item, config);
        return this;
      };
      Chart.Chart = Chart;
      return Chart;
    };
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min2 = Math.min(r, g, b);
      var max2 = Math.max(r, g, b);
      var delta = max2 - min2;
      var h;
      var s;
      var l;
      if (max2 === min2) {
        h = 0;
      } else if (r === max2) {
        h = (g - b) / delta;
      } else if (g === max2) {
        h = 2 + (b - r) / delta;
      } else if (b === max2) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min2 + max2) / 2;
      if (max2 === min2) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max2 + min2);
      } else {
        s = delta / (2 - max2 - min2);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff2 = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff2 + 1 / 2;
      };
      if (diff2 === 0) {
        h = s = 0;
      } else {
        s = diff2 / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max2 = Math.max(Math.max(r, g), b);
      var min2 = Math.min(Math.min(r, g), b);
      var chroma = max2 - min2;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min2 / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max2 === r) {
        hue = (g - b) / chroma % 6;
      } else if (max2 === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from2, to2) {
      return function(args) {
        return to2(from2(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/chartjs-color-string/color-string.js
var require_color_string = __commonJS({
  "node_modules/chartjs-color-string/color-string.js"(exports, module2) {
    var colorNames = require_color_name();
    module2.exports = {
      getRgba,
      getHsla,
      getRgb,
      getHsl,
      getHwb,
      getAlpha,
      hexString,
      rgbString,
      rgbaString,
      percentString,
      percentaString,
      hslString,
      hslaString,
      hwbString,
      keyword
    };
    function getRgba(string) {
      if (!string) {
        return;
      }
      var abbr = /^#([a-fA-F0-9]{3,4})$/i, hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, keyword2 = /(\w+)/;
      var rgb = [0, 0, 0], a = 1, match = string.match(abbr), hexAlpha = "";
      if (match) {
        match = match[1];
        hexAlpha = match[3];
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }
        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i + 1]);
        }
        a = parseFloat(match[4]);
      } else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        a = parseFloat(match[4]);
      } else if (match = string.match(keyword2)) {
        if (match[1] == "transparent") {
          return [0, 0, 0, 0];
        }
        rgb = colorNames[match[1]];
        if (!rgb) {
          return;
        }
      }
      for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
      }
      if (!a && a != 0) {
        a = 1;
      } else {
        a = scale(a, 0, 1);
      }
      rgb[3] = a;
      return rgb;
    }
    function getHsla(string) {
      if (!string) {
        return;
      }
      var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360), s = scale(parseFloat(match[2]), 0, 100), l = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
    }
    function getHwb(string) {
      if (!string) {
        return;
      }
      var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360), w = scale(parseFloat(match[2]), 0, 100), b = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
    }
    function getRgb(string) {
      var rgba = getRgba(string);
      return rgba && rgba.slice(0, 3);
    }
    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }
    function getAlpha(string) {
      var vals = getRgba(string);
      if (vals) {
        return vals[3];
      } else if (vals = getHsla(string)) {
        return vals[3];
      } else if (vals = getHwb(string)) {
        return vals[3];
      }
    }
    function hexString(rgba, a) {
      var a = a !== void 0 && rgba.length === 3 ? a : rgba[3];
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : "");
    }
    function rgbString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return rgbaString(rgba, alpha);
      }
      return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }
    function rgbaString(rgba, alpha) {
      if (alpha === void 0) {
        alpha = rgba[3] !== void 0 ? rgba[3] : 1;
      }
      return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
    }
    function percentString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return percentaString(rgba, alpha);
      }
      var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
      return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }
    function percentaString(rgba, alpha) {
      var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
      return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }
    function hslString(hsla, alpha) {
      if (alpha < 1 || hsla[3] && hsla[3] < 1) {
        return hslaString(hsla, alpha);
      }
      return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }
    function hslaString(hsla, alpha) {
      if (alpha === void 0) {
        alpha = hsla[3] !== void 0 ? hsla[3] : 1;
      }
      return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
    }
    function hwbString(hwb, alpha) {
      if (alpha === void 0) {
        alpha = hwb[3] !== void 0 ? hwb[3] : 1;
      }
      return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== void 0 && alpha !== 1 ? ", " + alpha : "") + ")";
    }
    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }
    function scale(num, min2, max2) {
      return Math.min(Math.max(min2, num), max2);
    }
    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
    var reverseNames = {};
    for (name in colorNames) {
      reverseNames[colorNames[name]] = name;
    }
    var name;
  }
});

// node_modules/chartjs-color/index.js
var require_chartjs_color = __commonJS({
  "node_modules/chartjs-color/index.js"(exports, module2) {
    var convert = require_color_convert();
    var string = require_color_string();
    var Color = function(obj) {
      if (obj instanceof Color) {
        return obj;
      }
      if (!(this instanceof Color)) {
        return new Color(obj);
      }
      this.valid = false;
      this.values = {
        rgb: [0, 0, 0],
        hsl: [0, 0, 0],
        hsv: [0, 0, 0],
        hwb: [0, 0, 0],
        cmyk: [0, 0, 0, 0],
        alpha: 1
      };
      var vals;
      if (typeof obj === "string") {
        vals = string.getRgba(obj);
        if (vals) {
          this.setValues("rgb", vals);
        } else if (vals = string.getHsla(obj)) {
          this.setValues("hsl", vals);
        } else if (vals = string.getHwb(obj)) {
          this.setValues("hwb", vals);
        }
      } else if (typeof obj === "object") {
        vals = obj;
        if (vals.r !== void 0 || vals.red !== void 0) {
          this.setValues("rgb", vals);
        } else if (vals.l !== void 0 || vals.lightness !== void 0) {
          this.setValues("hsl", vals);
        } else if (vals.v !== void 0 || vals.value !== void 0) {
          this.setValues("hsv", vals);
        } else if (vals.w !== void 0 || vals.whiteness !== void 0) {
          this.setValues("hwb", vals);
        } else if (vals.c !== void 0 || vals.cyan !== void 0) {
          this.setValues("cmyk", vals);
        }
      }
    };
    Color.prototype = {
      isValid: function() {
        return this.valid;
      },
      rgb: function() {
        return this.setSpace("rgb", arguments);
      },
      hsl: function() {
        return this.setSpace("hsl", arguments);
      },
      hsv: function() {
        return this.setSpace("hsv", arguments);
      },
      hwb: function() {
        return this.setSpace("hwb", arguments);
      },
      cmyk: function() {
        return this.setSpace("cmyk", arguments);
      },
      rgbArray: function() {
        return this.values.rgb;
      },
      hslArray: function() {
        return this.values.hsl;
      },
      hsvArray: function() {
        return this.values.hsv;
      },
      hwbArray: function() {
        var values = this.values;
        if (values.alpha !== 1) {
          return values.hwb.concat([values.alpha]);
        }
        return values.hwb;
      },
      cmykArray: function() {
        return this.values.cmyk;
      },
      rgbaArray: function() {
        var values = this.values;
        return values.rgb.concat([values.alpha]);
      },
      hslaArray: function() {
        var values = this.values;
        return values.hsl.concat([values.alpha]);
      },
      alpha: function(val) {
        if (val === void 0) {
          return this.values.alpha;
        }
        this.setValues("alpha", val);
        return this;
      },
      red: function(val) {
        return this.setChannel("rgb", 0, val);
      },
      green: function(val) {
        return this.setChannel("rgb", 1, val);
      },
      blue: function(val) {
        return this.setChannel("rgb", 2, val);
      },
      hue: function(val) {
        if (val) {
          val %= 360;
          val = val < 0 ? 360 + val : val;
        }
        return this.setChannel("hsl", 0, val);
      },
      saturation: function(val) {
        return this.setChannel("hsl", 1, val);
      },
      lightness: function(val) {
        return this.setChannel("hsl", 2, val);
      },
      saturationv: function(val) {
        return this.setChannel("hsv", 1, val);
      },
      whiteness: function(val) {
        return this.setChannel("hwb", 1, val);
      },
      blackness: function(val) {
        return this.setChannel("hwb", 2, val);
      },
      value: function(val) {
        return this.setChannel("hsv", 2, val);
      },
      cyan: function(val) {
        return this.setChannel("cmyk", 0, val);
      },
      magenta: function(val) {
        return this.setChannel("cmyk", 1, val);
      },
      yellow: function(val) {
        return this.setChannel("cmyk", 2, val);
      },
      black: function(val) {
        return this.setChannel("cmyk", 3, val);
      },
      hexString: function() {
        return string.hexString(this.values.rgb);
      },
      rgbString: function() {
        return string.rgbString(this.values.rgb, this.values.alpha);
      },
      rgbaString: function() {
        return string.rgbaString(this.values.rgb, this.values.alpha);
      },
      percentString: function() {
        return string.percentString(this.values.rgb, this.values.alpha);
      },
      hslString: function() {
        return string.hslString(this.values.hsl, this.values.alpha);
      },
      hslaString: function() {
        return string.hslaString(this.values.hsl, this.values.alpha);
      },
      hwbString: function() {
        return string.hwbString(this.values.hwb, this.values.alpha);
      },
      keyword: function() {
        return string.keyword(this.values.rgb, this.values.alpha);
      },
      rgbNumber: function() {
        var rgb = this.values.rgb;
        return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
      },
      luminosity: function() {
        var rgb = this.values.rgb;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function(color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      dark: function() {
        var rgb = this.values.rgb;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
        return yiq < 128;
      },
      light: function() {
        return !this.dark();
      },
      negate: function() {
        var rgb = [];
        for (var i = 0; i < 3; i++) {
          rgb[i] = 255 - this.values.rgb[i];
        }
        this.setValues("rgb", rgb);
        return this;
      },
      lighten: function(ratio) {
        var hsl = this.values.hsl;
        hsl[2] += hsl[2] * ratio;
        this.setValues("hsl", hsl);
        return this;
      },
      darken: function(ratio) {
        var hsl = this.values.hsl;
        hsl[2] -= hsl[2] * ratio;
        this.setValues("hsl", hsl);
        return this;
      },
      saturate: function(ratio) {
        var hsl = this.values.hsl;
        hsl[1] += hsl[1] * ratio;
        this.setValues("hsl", hsl);
        return this;
      },
      desaturate: function(ratio) {
        var hsl = this.values.hsl;
        hsl[1] -= hsl[1] * ratio;
        this.setValues("hsl", hsl);
        return this;
      },
      whiten: function(ratio) {
        var hwb = this.values.hwb;
        hwb[1] += hwb[1] * ratio;
        this.setValues("hwb", hwb);
        return this;
      },
      blacken: function(ratio) {
        var hwb = this.values.hwb;
        hwb[2] += hwb[2] * ratio;
        this.setValues("hwb", hwb);
        return this;
      },
      greyscale: function() {
        var rgb = this.values.rgb;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        this.setValues("rgb", [val, val, val]);
        return this;
      },
      clearer: function(ratio) {
        var alpha = this.values.alpha;
        this.setValues("alpha", alpha - alpha * ratio);
        return this;
      },
      opaquer: function(ratio) {
        var alpha = this.values.alpha;
        this.setValues("alpha", alpha + alpha * ratio);
        return this;
      },
      rotate: function(degrees) {
        var hsl = this.values.hsl;
        var hue = (hsl[0] + degrees) % 360;
        hsl[0] = hue < 0 ? 360 + hue : hue;
        this.setValues("hsl", hsl);
        return this;
      },
      /**
       * Ported from sass implementation in C
       * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
       */
      mix: function(mixinColor, weight) {
        var color1 = this;
        var color2 = mixinColor;
        var p = weight === void 0 ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
        var w2 = 1 - w1;
        return this.rgb(
          w1 * color1.red() + w2 * color2.red(),
          w1 * color1.green() + w2 * color2.green(),
          w1 * color1.blue() + w2 * color2.blue()
        ).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
      },
      toJSON: function() {
        return this.rgb();
      },
      clone: function() {
        var result = new Color();
        var source = this.values;
        var target = result.values;
        var value, type;
        for (var prop in source) {
          if (source.hasOwnProperty(prop)) {
            value = source[prop];
            type = {}.toString.call(value);
            if (type === "[object Array]") {
              target[prop] = value.slice(0);
            } else if (type === "[object Number]") {
              target[prop] = value;
            } else {
              console.error("unexpected color value:", value);
            }
          }
        }
        return result;
      }
    };
    Color.prototype.spaces = {
      rgb: ["red", "green", "blue"],
      hsl: ["hue", "saturation", "lightness"],
      hsv: ["hue", "saturation", "value"],
      hwb: ["hue", "whiteness", "blackness"],
      cmyk: ["cyan", "magenta", "yellow", "black"]
    };
    Color.prototype.maxes = {
      rgb: [255, 255, 255],
      hsl: [360, 100, 100],
      hsv: [360, 100, 100],
      hwb: [360, 100, 100],
      cmyk: [100, 100, 100, 100]
    };
    Color.prototype.getValues = function(space) {
      var values = this.values;
      var vals = {};
      for (var i = 0; i < space.length; i++) {
        vals[space.charAt(i)] = values[space][i];
      }
      if (values.alpha !== 1) {
        vals.a = values.alpha;
      }
      return vals;
    };
    Color.prototype.setValues = function(space, vals) {
      var values = this.values;
      var spaces = this.spaces;
      var maxes = this.maxes;
      var alpha = 1;
      var i;
      this.valid = true;
      if (space === "alpha") {
        alpha = vals;
      } else if (vals.length) {
        values[space] = vals.slice(0, space.length);
        alpha = vals[space.length];
      } else if (vals[space.charAt(0)] !== void 0) {
        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[space.charAt(i)];
        }
        alpha = vals.a;
      } else if (vals[spaces[space][0]] !== void 0) {
        var chans = spaces[space];
        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[chans[i]];
        }
        alpha = vals.alpha;
      }
      values.alpha = Math.max(0, Math.min(1, alpha === void 0 ? values.alpha : alpha));
      if (space === "alpha") {
        return false;
      }
      var capped;
      for (i = 0; i < space.length; i++) {
        capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
        values[space][i] = Math.round(capped);
      }
      for (var sname in spaces) {
        if (sname !== space) {
          values[sname] = convert[space][sname](values[space]);
        }
      }
      return true;
    };
    Color.prototype.setSpace = function(space, args) {
      var vals = args[0];
      if (vals === void 0) {
        return this.getValues(space);
      }
      if (typeof vals === "number") {
        vals = Array.prototype.slice.call(args);
      }
      this.setValues(space, vals);
      return this;
    };
    Color.prototype.setChannel = function(space, index, val) {
      var svalues = this.values[space];
      if (val === void 0) {
        return svalues[index];
      } else if (val === svalues[index]) {
        return this;
      }
      svalues[index] = val;
      this.setValues(space, svalues);
      return this;
    };
    if (typeof window !== "undefined") {
      window.Color = Color;
    }
    module2.exports = Color;
  }
});

// node_modules/chart.js/src/core/core.layouts.js
var require_core_layouts = __commonJS({
  "node_modules/chart.js/src/core/core.layouts.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    function filterByPosition(array, position) {
      return helpers.where(array, function(v) {
        return v.position === position;
      });
    }
    function sortByWeight(array, reverse) {
      array.forEach(function(v, i) {
        v._tmpIndex_ = i;
        return v;
      });
      array.sort(function(a, b) {
        var v0 = reverse ? b : a;
        var v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;
      });
      array.forEach(function(v) {
        delete v._tmpIndex_;
      });
    }
    module2.exports = {
      defaults: {},
      /**
       * Register a box to a chart.
       * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
       * @param {Chart} chart - the chart to use
       * @param {ILayoutItem} item - the item to add to be layed out
       */
      addBox: function(chart, item) {
        if (!chart.boxes) {
          chart.boxes = [];
        }
        item.fullWidth = item.fullWidth || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        chart.boxes.push(item);
      },
      /**
       * Remove a layoutItem from a chart
       * @param {Chart} chart - the chart to remove the box from
       * @param {Object} layoutItem - the item to remove from the layout
       */
      removeBox: function(chart, layoutItem) {
        var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) {
          chart.boxes.splice(index, 1);
        }
      },
      /**
       * Sets (or updates) options on the given `item`.
       * @param {Chart} chart - the chart in which the item lives (or will be added to)
       * @param {Object} item - the item to configure with the given options
       * @param {Object} options - the new item options.
       */
      configure: function(chart, item, options) {
        var props = ["fullWidth", "position", "weight"];
        var ilen = props.length;
        var i = 0;
        var prop;
        for (; i < ilen; ++i) {
          prop = props[i];
          if (options.hasOwnProperty(prop)) {
            item[prop] = options[prop];
          }
        }
      },
      /**
       * Fits boxes of the given chart into the given size by having each box measure itself
       * then running a fitting algorithm
       * @param {Chart} chart - the chart
       * @param {Number} width - the width to fit into
       * @param {Number} height - the height to fit into
       */
      update: function(chart, width, height) {
        if (!chart) {
          return;
        }
        var layoutOptions = chart.options.layout || {};
        var padding = helpers.options.toPadding(layoutOptions.padding);
        var leftPadding = padding.left;
        var rightPadding = padding.right;
        var topPadding = padding.top;
        var bottomPadding = padding.bottom;
        var leftBoxes = filterByPosition(chart.boxes, "left");
        var rightBoxes = filterByPosition(chart.boxes, "right");
        var topBoxes = filterByPosition(chart.boxes, "top");
        var bottomBoxes = filterByPosition(chart.boxes, "bottom");
        var chartAreaBoxes = filterByPosition(chart.boxes, "chartArea");
        sortByWeight(leftBoxes, true);
        sortByWeight(rightBoxes, false);
        sortByWeight(topBoxes, true);
        sortByWeight(bottomBoxes, false);
        var chartWidth = width - leftPadding - rightPadding;
        var chartHeight = height - topPadding - bottomPadding;
        var chartAreaWidth = chartWidth / 2;
        var chartAreaHeight = chartHeight / 2;
        var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
        var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
        var maxChartAreaWidth = chartWidth;
        var maxChartAreaHeight = chartHeight;
        var minBoxSizes = [];
        function getMinimumBoxSize(box) {
          var minSize;
          var isHorizontal = box.isHorizontal();
          if (isHorizontal) {
            minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
            maxChartAreaHeight -= minSize.height;
          } else {
            minSize = box.update(verticalBoxWidth, maxChartAreaHeight);
            maxChartAreaWidth -= minSize.width;
          }
          minBoxSizes.push({
            horizontal: isHorizontal,
            minSize,
            box
          });
        }
        helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
        var maxHorizontalLeftPadding = 0;
        var maxHorizontalRightPadding = 0;
        var maxVerticalTopPadding = 0;
        var maxVerticalBottomPadding = 0;
        helpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {
          if (horizontalBox.getPadding) {
            var boxPadding = horizontalBox.getPadding();
            maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
            maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
          }
        });
        helpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {
          if (verticalBox.getPadding) {
            var boxPadding = verticalBox.getPadding();
            maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
            maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
          }
        });
        var totalLeftBoxesWidth = leftPadding;
        var totalRightBoxesWidth = rightPadding;
        var totalTopBoxesHeight = topPadding;
        var totalBottomBoxesHeight = bottomPadding;
        function fitBox(box) {
          var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {
            return minBox.box === box;
          });
          if (minBoxSize) {
            if (box.isHorizontal()) {
              var scaleMargin = {
                left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                top: 0,
                bottom: 0
              };
              box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
            } else {
              box.update(minBoxSize.minSize.width, maxChartAreaHeight);
            }
          }
        }
        helpers.each(leftBoxes.concat(rightBoxes), fitBox);
        helpers.each(leftBoxes, function(box) {
          totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function(box) {
          totalRightBoxesWidth += box.width;
        });
        helpers.each(topBoxes.concat(bottomBoxes), fitBox);
        helpers.each(topBoxes, function(box) {
          totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function(box) {
          totalBottomBoxesHeight += box.height;
        });
        function finalFitVerticalBox(box) {
          var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {
            return minSize.box === box;
          });
          var scaleMargin = {
            left: 0,
            right: 0,
            top: totalTopBoxesHeight,
            bottom: totalBottomBoxesHeight
          };
          if (minBoxSize) {
            box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
          }
        }
        helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
        totalLeftBoxesWidth = leftPadding;
        totalRightBoxesWidth = rightPadding;
        totalTopBoxesHeight = topPadding;
        totalBottomBoxesHeight = bottomPadding;
        helpers.each(leftBoxes, function(box) {
          totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function(box) {
          totalRightBoxesWidth += box.width;
        });
        helpers.each(topBoxes, function(box) {
          totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function(box) {
          totalBottomBoxesHeight += box.height;
        });
        var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
        totalLeftBoxesWidth += leftPaddingAddition;
        totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
        var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
        totalTopBoxesHeight += topPaddingAddition;
        totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
        var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
        var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
        if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
          helpers.each(leftBoxes, function(box) {
            box.height = newMaxChartAreaHeight;
          });
          helpers.each(rightBoxes, function(box) {
            box.height = newMaxChartAreaHeight;
          });
          helpers.each(topBoxes, function(box) {
            if (!box.fullWidth) {
              box.width = newMaxChartAreaWidth;
            }
          });
          helpers.each(bottomBoxes, function(box) {
            if (!box.fullWidth) {
              box.width = newMaxChartAreaWidth;
            }
          });
          maxChartAreaHeight = newMaxChartAreaHeight;
          maxChartAreaWidth = newMaxChartAreaWidth;
        }
        var left = leftPadding + leftPaddingAddition;
        var top = topPadding + topPaddingAddition;
        function placeBox(box) {
          if (box.isHorizontal()) {
            box.left = box.fullWidth ? leftPadding : totalLeftBoxesWidth;
            box.right = box.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
            box.top = top;
            box.bottom = top + box.height;
            top = box.bottom;
          } else {
            box.left = left;
            box.right = left + box.width;
            box.top = totalTopBoxesHeight;
            box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
            left = box.right;
          }
        }
        helpers.each(leftBoxes.concat(topBoxes), placeBox);
        left += maxChartAreaWidth;
        top += maxChartAreaHeight;
        helpers.each(rightBoxes, placeBox);
        helpers.each(bottomBoxes, placeBox);
        chart.chartArea = {
          left: totalLeftBoxesWidth,
          top: totalTopBoxesHeight,
          right: totalLeftBoxesWidth + maxChartAreaWidth,
          bottom: totalTopBoxesHeight + maxChartAreaHeight
        };
        helpers.each(chartAreaBoxes, function(box) {
          box.left = chart.chartArea.left;
          box.top = chart.chartArea.top;
          box.right = chart.chartArea.right;
          box.bottom = chart.chartArea.bottom;
          box.update(maxChartAreaWidth, maxChartAreaHeight);
        });
      }
    };
  }
});

// node_modules/chart.js/src/core/core.scaleService.js
var require_core_scaleService = __commonJS({
  "node_modules/chart.js/src/core/core.scaleService.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var layouts = require_core_layouts();
    module2.exports = {
      // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
      // use the new chart options to grab the correct scale
      constructors: {},
      // Use a registration function so that we can move to an ES6 map when we no longer need to support
      // old browsers
      // Scale config defaults
      defaults: {},
      registerScaleType: function(type, scaleConstructor, scaleDefaults) {
        this.constructors[type] = scaleConstructor;
        this.defaults[type] = helpers.clone(scaleDefaults);
      },
      getScaleConstructor: function(type) {
        return this.constructors.hasOwnProperty(type) ? this.constructors[type] : void 0;
      },
      getScaleDefaults: function(type) {
        return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults2.scale, this.defaults[type]]) : {};
      },
      updateScaleDefaults: function(type, additions) {
        var me = this;
        if (me.defaults.hasOwnProperty(type)) {
          me.defaults[type] = helpers.extend(me.defaults[type], additions);
        }
      },
      addScalesToLayout: function(chart) {
        helpers.each(chart.scales, function(scale) {
          scale.fullWidth = scale.options.fullWidth;
          scale.position = scale.options.position;
          scale.weight = scale.options.weight;
          layouts.addBox(chart, scale);
        });
      }
    };
  }
});

// node_modules/chart.js/src/core/core.helpers.js
var require_core_helpers = __commonJS({
  "node_modules/chart.js/src/core/core.helpers.js"(exports, module2) {
    "use strict";
    var color = require_chartjs_color();
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var scaleService = require_core_scaleService();
    module2.exports = function() {
      helpers.configMerge = function() {
        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
          merger: function(key, target, source, options) {
            var tval = target[key] || {};
            var sval = source[key];
            if (key === "scales") {
              target[key] = helpers.scaleMerge(tval, sval);
            } else if (key === "scale") {
              target[key] = helpers.merge(tval, [scaleService.getScaleDefaults(sval.type), sval]);
            } else {
              helpers._merger(key, target, source, options);
            }
          }
        });
      };
      helpers.scaleMerge = function() {
        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
          merger: function(key, target, source, options) {
            if (key === "xAxes" || key === "yAxes") {
              var slen = source[key].length;
              var i, type, scale;
              if (!target[key]) {
                target[key] = [];
              }
              for (i = 0; i < slen; ++i) {
                scale = source[key][i];
                type = helpers.valueOrDefault(scale.type, key === "xAxes" ? "category" : "linear");
                if (i >= target[key].length) {
                  target[key].push({});
                }
                if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {
                  helpers.merge(target[key][i], [scaleService.getScaleDefaults(type), scale]);
                } else {
                  helpers.merge(target[key][i], scale);
                }
              }
            } else {
              helpers._merger(key, target, source, options);
            }
          }
        });
      };
      helpers.where = function(collection, filterCallback) {
        if (helpers.isArray(collection) && Array.prototype.filter) {
          return collection.filter(filterCallback);
        }
        var filtered = [];
        helpers.each(collection, function(item) {
          if (filterCallback(item)) {
            filtered.push(item);
          }
        });
        return filtered;
      };
      helpers.findIndex = Array.prototype.findIndex ? function(array, callback, scope) {
        return array.findIndex(callback, scope);
      } : function(array, callback, scope) {
        scope = scope === void 0 ? array : scope;
        for (var i = 0, ilen = array.length; i < ilen; ++i) {
          if (callback.call(scope, array[i], i, array)) {
            return i;
          }
        }
        return -1;
      };
      helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
        if (helpers.isNullOrUndef(startIndex)) {
          startIndex = -1;
        }
        for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
          var currentItem = arrayToSearch[i];
          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      };
      helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
        if (helpers.isNullOrUndef(startIndex)) {
          startIndex = arrayToSearch.length;
        }
        for (var i = startIndex - 1; i >= 0; i--) {
          var currentItem = arrayToSearch[i];
          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      };
      helpers.isNumber = function(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };
      helpers.almostEquals = function(x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
      };
      helpers.almostWhole = function(x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon < x && rounded + epsilon > x;
      };
      helpers.max = function(array) {
        return array.reduce(function(max2, value) {
          if (!isNaN(value)) {
            return Math.max(max2, value);
          }
          return max2;
        }, Number.NEGATIVE_INFINITY);
      };
      helpers.min = function(array) {
        return array.reduce(function(min2, value) {
          if (!isNaN(value)) {
            return Math.min(min2, value);
          }
          return min2;
        }, Number.POSITIVE_INFINITY);
      };
      helpers.sign = Math.sign ? function(x) {
        return Math.sign(x);
      } : function(x) {
        x = +x;
        if (x === 0 || isNaN(x)) {
          return x;
        }
        return x > 0 ? 1 : -1;
      };
      helpers.log10 = Math.log10 ? function(x) {
        return Math.log10(x);
      } : function(x) {
        var exponent = Math.log(x) * Math.LOG10E;
        var powerOf10 = Math.round(exponent);
        var isPowerOf10 = x === Math.pow(10, powerOf10);
        return isPowerOf10 ? powerOf10 : exponent;
      };
      helpers.toRadians = function(degrees) {
        return degrees * (Math.PI / 180);
      };
      helpers.toDegrees = function(radians) {
        return radians * (180 / Math.PI);
      };
      helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x;
        var distanceFromYCenter = anglePoint.y - centrePoint.y;
        var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
        if (angle < -0.5 * Math.PI) {
          angle += 2 * Math.PI;
        }
        return {
          angle,
          distance: radialDistanceFromCenter
        };
      };
      helpers.distanceBetweenPoints = function(pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
      };
      helpers.aliasPixel = function(pixelWidth) {
        return pixelWidth % 2 === 0 ? 0 : 0.5;
      };
      helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
        var previous = firstPoint.skip ? middlePoint : firstPoint;
        var current = middlePoint;
        var next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
        var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12);
        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01;
        var fb = t * s12;
        return {
          previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
          },
          next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
          }
        };
      };
      helpers.EPSILON = Number.EPSILON || 1e-14;
      helpers.splineCurveMonotone = function(points) {
        var pointsWithTangents = (points || []).map(function(point) {
          return {
            model: point._model,
            deltaK: 0,
            mK: 0
          };
        });
        var pointsLen = pointsWithTangents.length;
        var i, pointBefore, pointCurrent, pointAfter;
        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];
          if (pointCurrent.model.skip) {
            continue;
          }
          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
          if (pointAfter && !pointAfter.model.skip) {
            var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
            pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
          }
          if (!pointBefore || pointBefore.model.skip) {
            pointCurrent.mK = pointCurrent.deltaK;
          } else if (!pointAfter || pointAfter.model.skip) {
            pointCurrent.mK = pointBefore.deltaK;
          } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
            pointCurrent.mK = 0;
          } else {
            pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
          }
        }
        var alphaK, betaK, tauK, squaredMagnitude;
        for (i = 0; i < pointsLen - 1; ++i) {
          pointCurrent = pointsWithTangents[i];
          pointAfter = pointsWithTangents[i + 1];
          if (pointCurrent.model.skip || pointAfter.model.skip) {
            continue;
          }
          if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
            pointCurrent.mK = pointAfter.mK = 0;
            continue;
          }
          alphaK = pointCurrent.mK / pointCurrent.deltaK;
          betaK = pointAfter.mK / pointCurrent.deltaK;
          squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
          if (squaredMagnitude <= 9) {
            continue;
          }
          tauK = 3 / Math.sqrt(squaredMagnitude);
          pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
          pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
        }
        var deltaX;
        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];
          if (pointCurrent.model.skip) {
            continue;
          }
          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
          if (pointBefore && !pointBefore.model.skip) {
            deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
            pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
            pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
          }
          if (pointAfter && !pointAfter.model.skip) {
            deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
            pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
            pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
          }
        }
      };
      helpers.nextItem = function(collection, index, loop) {
        if (loop) {
          return index >= collection.length - 1 ? collection[0] : collection[index + 1];
        }
        return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
      };
      helpers.previousItem = function(collection, index, loop) {
        if (loop) {
          return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
        }
        return index <= 0 ? collection[0] : collection[index - 1];
      };
      helpers.niceNum = function(range, round2) {
        var exponent = Math.floor(helpers.log10(range));
        var fraction = range / Math.pow(10, exponent);
        var niceFraction;
        if (round2) {
          if (fraction < 1.5) {
            niceFraction = 1;
          } else if (fraction < 3) {
            niceFraction = 2;
          } else if (fraction < 7) {
            niceFraction = 5;
          } else {
            niceFraction = 10;
          }
        } else if (fraction <= 1) {
          niceFraction = 1;
        } else if (fraction <= 2) {
          niceFraction = 2;
        } else if (fraction <= 5) {
          niceFraction = 5;
        } else {
          niceFraction = 10;
        }
        return niceFraction * Math.pow(10, exponent);
      };
      helpers.requestAnimFrame = function() {
        if (typeof window === "undefined") {
          return function(callback) {
            callback();
          };
        }
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
          return window.setTimeout(callback, 1e3 / 60);
        };
      }();
      helpers.getRelativePosition = function(evt, chart) {
        var mouseX, mouseY;
        var e = evt.originalEvent || evt;
        var canvas = evt.target || evt.srcElement;
        var boundingRect = canvas.getBoundingClientRect();
        var touches = e.touches;
        if (touches && touches.length > 0) {
          mouseX = touches[0].clientX;
          mouseY = touches[0].clientY;
        } else {
          mouseX = e.clientX;
          mouseY = e.clientY;
        }
        var paddingLeft = parseFloat(helpers.getStyle(canvas, "padding-left"));
        var paddingTop = parseFloat(helpers.getStyle(canvas, "padding-top"));
        var paddingRight = parseFloat(helpers.getStyle(canvas, "padding-right"));
        var paddingBottom = parseFloat(helpers.getStyle(canvas, "padding-bottom"));
        var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
        var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
        mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
        mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
        return {
          x: mouseX,
          y: mouseY
        };
      };
      function parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;
        if (typeof styleValue === "string") {
          valueInPixels = parseInt(styleValue, 10);
          if (styleValue.indexOf("%") !== -1) {
            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
          }
        } else {
          valueInPixels = styleValue;
        }
        return valueInPixels;
      }
      function isConstrainedValue(value) {
        return value !== void 0 && value !== null && value !== "none";
      }
      function getConstraintDimension(domNode, maxStyle, percentageProperty) {
        var view = document.defaultView;
        var parentNode = helpers._getParentNode(domNode);
        var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
        var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
        var hasCNode = isConstrainedValue(constrainedNode);
        var hasCContainer = isConstrainedValue(constrainedContainer);
        var infinity = Number.POSITIVE_INFINITY;
        if (hasCNode || hasCContainer) {
          return Math.min(
            hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
            hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity
          );
        }
        return "none";
      }
      helpers.getConstraintWidth = function(domNode) {
        return getConstraintDimension(domNode, "max-width", "clientWidth");
      };
      helpers.getConstraintHeight = function(domNode) {
        return getConstraintDimension(domNode, "max-height", "clientHeight");
      };
      helpers._calculatePadding = function(container, padding, parentDimension) {
        padding = helpers.getStyle(container, padding);
        return padding.indexOf("%") > -1 ? parentDimension / parseInt(padding, 10) : parseInt(padding, 10);
      };
      helpers._getParentNode = function(domNode) {
        var parent = domNode.parentNode;
        if (parent && parent.host) {
          parent = parent.host;
        }
        return parent;
      };
      helpers.getMaximumWidth = function(domNode) {
        var container = helpers._getParentNode(domNode);
        if (!container) {
          return domNode.clientWidth;
        }
        var clientWidth = container.clientWidth;
        var paddingLeft = helpers._calculatePadding(container, "padding-left", clientWidth);
        var paddingRight = helpers._calculatePadding(container, "padding-right", clientWidth);
        var w = clientWidth - paddingLeft - paddingRight;
        var cw = helpers.getConstraintWidth(domNode);
        return isNaN(cw) ? w : Math.min(w, cw);
      };
      helpers.getMaximumHeight = function(domNode) {
        var container = helpers._getParentNode(domNode);
        if (!container) {
          return domNode.clientHeight;
        }
        var clientHeight = container.clientHeight;
        var paddingTop = helpers._calculatePadding(container, "padding-top", clientHeight);
        var paddingBottom = helpers._calculatePadding(container, "padding-bottom", clientHeight);
        var h = clientHeight - paddingTop - paddingBottom;
        var ch = helpers.getConstraintHeight(domNode);
        return isNaN(ch) ? h : Math.min(h, ch);
      };
      helpers.getStyle = function(el, property) {
        return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
      };
      helpers.retinaScale = function(chart, forceRatio) {
        var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== "undefined" && window.devicePixelRatio || 1;
        if (pixelRatio === 1) {
          return;
        }
        var canvas = chart.canvas;
        var height = chart.height;
        var width = chart.width;
        canvas.height = height * pixelRatio;
        canvas.width = width * pixelRatio;
        chart.ctx.scale(pixelRatio, pixelRatio);
        if (!canvas.style.height && !canvas.style.width) {
          canvas.style.height = height + "px";
          canvas.style.width = width + "px";
        }
      };
      helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
        return fontStyle + " " + pixelSize + "px " + fontFamily;
      };
      helpers.longestText = function(ctx, font, arrayOfThings, cache) {
        cache = cache || {};
        var data = cache.data = cache.data || {};
        var gc = cache.garbageCollect = cache.garbageCollect || [];
        if (cache.font !== font) {
          data = cache.data = {};
          gc = cache.garbageCollect = [];
          cache.font = font;
        }
        ctx.font = font;
        var longest = 0;
        helpers.each(arrayOfThings, function(thing) {
          if (thing !== void 0 && thing !== null && helpers.isArray(thing) !== true) {
            longest = helpers.measureText(ctx, data, gc, longest, thing);
          } else if (helpers.isArray(thing)) {
            helpers.each(thing, function(nestedThing) {
              if (nestedThing !== void 0 && nestedThing !== null && !helpers.isArray(nestedThing)) {
                longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
              }
            });
          }
        });
        var gcLen = gc.length / 2;
        if (gcLen > arrayOfThings.length) {
          for (var i = 0; i < gcLen; i++) {
            delete data[gc[i]];
          }
          gc.splice(0, gcLen);
        }
        return longest;
      };
      helpers.measureText = function(ctx, data, gc, longest, string) {
        var textWidth = data[string];
        if (!textWidth) {
          textWidth = data[string] = ctx.measureText(string).width;
          gc.push(string);
        }
        if (textWidth > longest) {
          longest = textWidth;
        }
        return longest;
      };
      helpers.numberOfLabelLines = function(arrayOfThings) {
        var numberOfLines = 1;
        helpers.each(arrayOfThings, function(thing) {
          if (helpers.isArray(thing)) {
            if (thing.length > numberOfLines) {
              numberOfLines = thing.length;
            }
          }
        });
        return numberOfLines;
      };
      helpers.color = !color ? function(value) {
        console.error("Color.js not found!");
        return value;
      } : function(value) {
        if (value instanceof CanvasGradient) {
          value = defaults2.global.defaultColor;
        }
        return color(value);
      };
      helpers.getHoverColor = function(colorValue) {
        return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
      };
    };
  }
});

// node_modules/chart.js/src/core/core.element.js
var require_core_element = __commonJS({
  "node_modules/chart.js/src/core/core.element.js"(exports, module2) {
    "use strict";
    var color = require_chartjs_color();
    var helpers = require_helpers();
    function interpolate(start, view, model, ease) {
      var keys2 = Object.keys(model);
      var i, ilen, key, actual, origin, target, type, c0, c1;
      for (i = 0, ilen = keys2.length; i < ilen; ++i) {
        key = keys2[i];
        target = model[key];
        if (!view.hasOwnProperty(key)) {
          view[key] = target;
        }
        actual = view[key];
        if (actual === target || key[0] === "_") {
          continue;
        }
        if (!start.hasOwnProperty(key)) {
          start[key] = actual;
        }
        origin = start[key];
        type = typeof target;
        if (type === typeof origin) {
          if (type === "string") {
            c0 = color(origin);
            if (c0.valid) {
              c1 = color(target);
              if (c1.valid) {
                view[key] = c1.mix(c0, ease).rgbString();
                continue;
              }
            }
          } else if (type === "number" && isFinite(origin) && isFinite(target)) {
            view[key] = origin + (target - origin) * ease;
            continue;
          }
        }
        view[key] = target;
      }
    }
    var Element = function(configuration) {
      helpers.extend(this, configuration);
      this.initialize.apply(this, arguments);
    };
    helpers.extend(Element.prototype, {
      initialize: function() {
        this.hidden = false;
      },
      pivot: function() {
        var me = this;
        if (!me._view) {
          me._view = helpers.clone(me._model);
        }
        me._start = {};
        return me;
      },
      transition: function(ease) {
        var me = this;
        var model = me._model;
        var start = me._start;
        var view = me._view;
        if (!model || ease === 1) {
          me._view = model;
          me._start = null;
          return me;
        }
        if (!view) {
          view = me._view = {};
        }
        if (!start) {
          start = me._start = {};
        }
        interpolate(start, view, model, ease);
        return me;
      },
      tooltipPosition: function() {
        return {
          x: this._model.x,
          y: this._model.y
        };
      },
      hasValue: function() {
        return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
      }
    });
    Element.extend = helpers.inherits;
    module2.exports = Element;
  }
});

// node_modules/chart.js/src/core/core.animation.js
var require_core_animation = __commonJS({
  "node_modules/chart.js/src/core/core.animation.js"(exports, module2) {
    "use strict";
    var Element = require_core_element();
    var exports = module2.exports = Element.extend({
      chart: null,
      // the animation associated chart instance
      currentStep: 0,
      // the current animation step
      numSteps: 60,
      // default number of steps
      easing: "",
      // the easing to use for this animation
      render: null,
      // render function used by the animation service
      onAnimationProgress: null,
      // user specified callback to fire on each step of the animation
      onAnimationComplete: null
      // user specified callback to fire when the animation finishes
    });
    Object.defineProperty(exports.prototype, "animationObject", {
      get: function() {
        return this;
      }
    });
    Object.defineProperty(exports.prototype, "chartInstance", {
      get: function() {
        return this.chart;
      },
      set: function(value) {
        this.chart = value;
      }
    });
  }
});

// node_modules/chart.js/src/core/core.animations.js
var require_core_animations = __commonJS({
  "node_modules/chart.js/src/core/core.animations.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    defaults2._set("global", {
      animation: {
        duration: 1e3,
        easing: "easeOutQuart",
        onProgress: helpers.noop,
        onComplete: helpers.noop
      }
    });
    module2.exports = {
      frameDuration: 17,
      animations: [],
      dropFrames: 0,
      request: null,
      /**
       * @param {Chart} chart - The chart to animate.
       * @param {Chart.Animation} animation - The animation that we will animate.
       * @param {Number} duration - The animation duration in ms.
       * @param {Boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
       */
      addAnimation: function(chart, animation, duration, lazy) {
        var animations = this.animations;
        var i, ilen;
        animation.chart = chart;
        if (!lazy) {
          chart.animating = true;
        }
        for (i = 0, ilen = animations.length; i < ilen; ++i) {
          if (animations[i].chart === chart) {
            animations[i] = animation;
            return;
          }
        }
        animations.push(animation);
        if (animations.length === 1) {
          this.requestAnimationFrame();
        }
      },
      cancelAnimation: function(chart) {
        var index = helpers.findIndex(this.animations, function(animation) {
          return animation.chart === chart;
        });
        if (index !== -1) {
          this.animations.splice(index, 1);
          chart.animating = false;
        }
      },
      requestAnimationFrame: function() {
        var me = this;
        if (me.request === null) {
          me.request = helpers.requestAnimFrame.call(window, function() {
            me.request = null;
            me.startDigest();
          });
        }
      },
      /**
       * @private
       */
      startDigest: function() {
        var me = this;
        var startTime = Date.now();
        var framesToDrop = 0;
        if (me.dropFrames > 1) {
          framesToDrop = Math.floor(me.dropFrames);
          me.dropFrames = me.dropFrames % 1;
        }
        me.advance(1 + framesToDrop);
        var endTime = Date.now();
        me.dropFrames += (endTime - startTime) / me.frameDuration;
        if (me.animations.length > 0) {
          me.requestAnimationFrame();
        }
      },
      /**
       * @private
       */
      advance: function(count) {
        var animations = this.animations;
        var animation, chart;
        var i = 0;
        while (i < animations.length) {
          animation = animations[i];
          chart = animation.chart;
          animation.currentStep = (animation.currentStep || 0) + count;
          animation.currentStep = Math.min(animation.currentStep, animation.numSteps);
          helpers.callback(animation.render, [chart, animation], chart);
          helpers.callback(animation.onAnimationProgress, [animation], chart);
          if (animation.currentStep >= animation.numSteps) {
            helpers.callback(animation.onAnimationComplete, [animation], chart);
            chart.animating = false;
            animations.splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    };
  }
});

// node_modules/chart.js/src/elements/element.arc.js
var require_element_arc = __commonJS({
  "node_modules/chart.js/src/elements/element.arc.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    defaults2._set("global", {
      elements: {
        arc: {
          backgroundColor: defaults2.global.defaultColor,
          borderColor: "#fff",
          borderWidth: 2
        }
      }
    });
    module2.exports = Element.extend({
      inLabelRange: function(mouseX) {
        var vm = this._view;
        if (vm) {
          return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
        }
        return false;
      },
      inRange: function(chartX, chartY) {
        var vm = this._view;
        if (vm) {
          var pointRelativePosition = helpers.getAngleFromPoint(vm, { x: chartX, y: chartY });
          var angle = pointRelativePosition.angle;
          var distance = pointRelativePosition.distance;
          var startAngle = vm.startAngle;
          var endAngle = vm.endAngle;
          while (endAngle < startAngle) {
            endAngle += 2 * Math.PI;
          }
          while (angle > endAngle) {
            angle -= 2 * Math.PI;
          }
          while (angle < startAngle) {
            angle += 2 * Math.PI;
          }
          var betweenAngles = angle >= startAngle && angle <= endAngle;
          var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
          return betweenAngles && withinRadius;
        }
        return false;
      },
      getCenterPoint: function() {
        var vm = this._view;
        var halfAngle = (vm.startAngle + vm.endAngle) / 2;
        var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
        return {
          x: vm.x + Math.cos(halfAngle) * halfRadius,
          y: vm.y + Math.sin(halfAngle) * halfRadius
        };
      },
      getArea: function() {
        var vm = this._view;
        return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
      },
      tooltipPosition: function() {
        var vm = this._view;
        var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
        var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
        return {
          x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
          y: vm.y + Math.sin(centreAngle) * rangeFromCentre
        };
      },
      draw: function() {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var sA = vm.startAngle;
        var eA = vm.endAngle;
        ctx.beginPath();
        ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
        ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
        ctx.closePath();
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = vm.borderWidth;
        ctx.fillStyle = vm.backgroundColor;
        ctx.fill();
        ctx.lineJoin = "bevel";
        if (vm.borderWidth) {
          ctx.stroke();
        }
      }
    });
  }
});

// node_modules/chart.js/src/elements/element.line.js
var require_element_line = __commonJS({
  "node_modules/chart.js/src/elements/element.line.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    var globalDefaults = defaults2.global;
    defaults2._set("global", {
      elements: {
        line: {
          tension: 0.4,
          backgroundColor: globalDefaults.defaultColor,
          borderWidth: 3,
          borderColor: globalDefaults.defaultColor,
          borderCapStyle: "butt",
          borderDash: [],
          borderDashOffset: 0,
          borderJoinStyle: "miter",
          capBezierPoints: true,
          fill: true
          // do we fill in the area between the line and its base axis
        }
      }
    });
    module2.exports = Element.extend({
      draw: function() {
        var me = this;
        var vm = me._view;
        var ctx = me._chart.ctx;
        var spanGaps = vm.spanGaps;
        var points = me._children.slice();
        var globalOptionLineElements = globalDefaults.elements.line;
        var lastDrawnIndex = -1;
        var index, current, previous, currentVM;
        if (me._loop && points.length) {
          points.push(points[0]);
        }
        ctx.save();
        ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
        if (ctx.setLineDash) {
          ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
        }
        ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
        ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
        ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
        ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
        ctx.beginPath();
        lastDrawnIndex = -1;
        for (index = 0; index < points.length; ++index) {
          current = points[index];
          previous = helpers.previousItem(points, index);
          currentVM = current._view;
          if (index === 0) {
            if (!currentVM.skip) {
              ctx.moveTo(currentVM.x, currentVM.y);
              lastDrawnIndex = index;
            }
          } else {
            previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
            if (!currentVM.skip) {
              if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                ctx.moveTo(currentVM.x, currentVM.y);
              } else {
                helpers.canvas.lineTo(ctx, previous._view, current._view);
              }
              lastDrawnIndex = index;
            }
          }
        }
        ctx.stroke();
        ctx.restore();
      }
    });
  }
});

// node_modules/chart.js/src/elements/element.point.js
var require_element_point = __commonJS({
  "node_modules/chart.js/src/elements/element.point.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    var defaultColor = defaults2.global.defaultColor;
    defaults2._set("global", {
      elements: {
        point: {
          radius: 3,
          pointStyle: "circle",
          backgroundColor: defaultColor,
          borderColor: defaultColor,
          borderWidth: 1,
          // Hover
          hitRadius: 1,
          hoverRadius: 4,
          hoverBorderWidth: 1
        }
      }
    });
    function xRange(mouseX) {
      var vm = this._view;
      return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
    }
    function yRange(mouseY) {
      var vm = this._view;
      return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
    }
    module2.exports = Element.extend({
      inRange: function(mouseX, mouseY) {
        var vm = this._view;
        return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
      },
      inLabelRange: xRange,
      inXRange: xRange,
      inYRange: yRange,
      getCenterPoint: function() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y
        };
      },
      getArea: function() {
        return Math.PI * Math.pow(this._view.radius, 2);
      },
      tooltipPosition: function() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y,
          padding: vm.radius + vm.borderWidth
        };
      },
      draw: function(chartArea) {
        var vm = this._view;
        var model = this._model;
        var ctx = this._chart.ctx;
        var pointStyle = vm.pointStyle;
        var rotation = vm.rotation;
        var radius = vm.radius;
        var x = vm.x;
        var y = vm.y;
        var errMargin = 1.01;
        if (vm.skip) {
          return;
        }
        if (chartArea === void 0 || model.x >= chartArea.left && chartArea.right * errMargin >= model.x && model.y >= chartArea.top && chartArea.bottom * errMargin >= model.y) {
          ctx.strokeStyle = vm.borderColor || defaultColor;
          ctx.lineWidth = helpers.valueOrDefault(vm.borderWidth, defaults2.global.elements.point.borderWidth);
          ctx.fillStyle = vm.backgroundColor || defaultColor;
          helpers.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
        }
      }
    });
  }
});

// node_modules/chart.js/src/elements/element.rectangle.js
var require_element_rectangle = __commonJS({
  "node_modules/chart.js/src/elements/element.rectangle.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    defaults2._set("global", {
      elements: {
        rectangle: {
          backgroundColor: defaults2.global.defaultColor,
          borderColor: defaults2.global.defaultColor,
          borderSkipped: "bottom",
          borderWidth: 0
        }
      }
    });
    function isVertical(bar) {
      return bar._view.width !== void 0;
    }
    function getBarBounds(bar) {
      var vm = bar._view;
      var x1, x2, y1, y2;
      if (isVertical(bar)) {
        var halfWidth = vm.width / 2;
        x1 = vm.x - halfWidth;
        x2 = vm.x + halfWidth;
        y1 = Math.min(vm.y, vm.base);
        y2 = Math.max(vm.y, vm.base);
      } else {
        var halfHeight = vm.height / 2;
        x1 = Math.min(vm.x, vm.base);
        x2 = Math.max(vm.x, vm.base);
        y1 = vm.y - halfHeight;
        y2 = vm.y + halfHeight;
      }
      return {
        left: x1,
        top: y1,
        right: x2,
        bottom: y2
      };
    }
    module2.exports = Element.extend({
      draw: function() {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var left, right, top, bottom, signX, signY, borderSkipped;
        var borderWidth = vm.borderWidth;
        if (!vm.horizontal) {
          left = vm.x - vm.width / 2;
          right = vm.x + vm.width / 2;
          top = vm.y;
          bottom = vm.base;
          signX = 1;
          signY = bottom > top ? 1 : -1;
          borderSkipped = vm.borderSkipped || "bottom";
        } else {
          left = vm.base;
          right = vm.x;
          top = vm.y - vm.height / 2;
          bottom = vm.y + vm.height / 2;
          signX = right > left ? 1 : -1;
          signY = 1;
          borderSkipped = vm.borderSkipped || "left";
        }
        if (borderWidth) {
          var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
          borderWidth = borderWidth > barSize ? barSize : borderWidth;
          var halfStroke = borderWidth / 2;
          var borderLeft = left + (borderSkipped !== "left" ? halfStroke * signX : 0);
          var borderRight = right + (borderSkipped !== "right" ? -halfStroke * signX : 0);
          var borderTop = top + (borderSkipped !== "top" ? halfStroke * signY : 0);
          var borderBottom = bottom + (borderSkipped !== "bottom" ? -halfStroke * signY : 0);
          if (borderLeft !== borderRight) {
            top = borderTop;
            bottom = borderBottom;
          }
          if (borderTop !== borderBottom) {
            left = borderLeft;
            right = borderRight;
          }
        }
        ctx.beginPath();
        ctx.fillStyle = vm.backgroundColor;
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = borderWidth;
        var corners = [
          [left, bottom],
          [left, top],
          [right, top],
          [right, bottom]
        ];
        var borders = ["bottom", "left", "top", "right"];
        var startCorner = borders.indexOf(borderSkipped, 0);
        if (startCorner === -1) {
          startCorner = 0;
        }
        function cornerAt(index) {
          return corners[(startCorner + index) % 4];
        }
        var corner = cornerAt(0);
        ctx.moveTo(corner[0], corner[1]);
        for (var i = 1; i < 4; i++) {
          corner = cornerAt(i);
          ctx.lineTo(corner[0], corner[1]);
        }
        ctx.fill();
        if (borderWidth) {
          ctx.stroke();
        }
      },
      height: function() {
        var vm = this._view;
        return vm.base - vm.y;
      },
      inRange: function(mouseX, mouseY) {
        var inRange = false;
        if (this._view) {
          var bounds = getBarBounds(this);
          inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
        }
        return inRange;
      },
      inLabelRange: function(mouseX, mouseY) {
        var me = this;
        if (!me._view) {
          return false;
        }
        var inRange = false;
        var bounds = getBarBounds(me);
        if (isVertical(me)) {
          inRange = mouseX >= bounds.left && mouseX <= bounds.right;
        } else {
          inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
        }
        return inRange;
      },
      inXRange: function(mouseX) {
        var bounds = getBarBounds(this);
        return mouseX >= bounds.left && mouseX <= bounds.right;
      },
      inYRange: function(mouseY) {
        var bounds = getBarBounds(this);
        return mouseY >= bounds.top && mouseY <= bounds.bottom;
      },
      getCenterPoint: function() {
        var vm = this._view;
        var x, y;
        if (isVertical(this)) {
          x = vm.x;
          y = (vm.y + vm.base) / 2;
        } else {
          x = (vm.x + vm.base) / 2;
          y = vm.y;
        }
        return { x, y };
      },
      getArea: function() {
        var vm = this._view;
        return vm.width * Math.abs(vm.y - vm.base);
      },
      tooltipPosition: function() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y
        };
      }
    });
  }
});

// node_modules/chart.js/src/elements/index.js
var require_elements = __commonJS({
  "node_modules/chart.js/src/elements/index.js"(exports, module2) {
    "use strict";
    module2.exports = {};
    module2.exports.Arc = require_element_arc();
    module2.exports.Line = require_element_line();
    module2.exports.Point = require_element_point();
    module2.exports.Rectangle = require_element_rectangle();
  }
});

// node_modules/chart.js/src/core/core.interaction.js
var require_core_interaction = __commonJS({
  "node_modules/chart.js/src/core/core.interaction.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    function getRelativePosition(e, chart) {
      if (e.native) {
        return {
          x: e.x,
          y: e.y
        };
      }
      return helpers.getRelativePosition(e, chart);
    }
    function parseVisibleItems(chart, handler) {
      var datasets = chart.data.datasets;
      var meta, i, j, ilen, jlen;
      for (i = 0, ilen = datasets.length; i < ilen; ++i) {
        if (!chart.isDatasetVisible(i)) {
          continue;
        }
        meta = chart.getDatasetMeta(i);
        for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
          var element = meta.data[j];
          if (!element._view.skip) {
            handler(element);
          }
        }
      }
    }
    function getIntersectItems(chart, position) {
      var elements = [];
      parseVisibleItems(chart, function(element) {
        if (element.inRange(position.x, position.y)) {
          elements.push(element);
        }
      });
      return elements;
    }
    function getNearestItems(chart, position, intersect, distanceMetric) {
      var minDistance = Number.POSITIVE_INFINITY;
      var nearestItems = [];
      parseVisibleItems(chart, function(element) {
        if (intersect && !element.inRange(position.x, position.y)) {
          return;
        }
        var center = element.getCenterPoint();
        var distance = distanceMetric(position, center);
        if (distance < minDistance) {
          nearestItems = [element];
          minDistance = distance;
        } else if (distance === minDistance) {
          nearestItems.push(element);
        }
      });
      return nearestItems;
    }
    function getDistanceMetricForAxis(axis) {
      var useX = axis.indexOf("x") !== -1;
      var useY = axis.indexOf("y") !== -1;
      return function(pt1, pt2) {
        var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      };
    }
    function indexMode(chart, e, options) {
      var position = getRelativePosition(e, chart);
      options.axis = options.axis || "x";
      var distanceMetric = getDistanceMetricForAxis(options.axis);
      var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
      var elements = [];
      if (!items.length) {
        return [];
      }
      chart.data.datasets.forEach(function(dataset, datasetIndex) {
        if (chart.isDatasetVisible(datasetIndex)) {
          var meta = chart.getDatasetMeta(datasetIndex);
          var element = meta.data[items[0]._index];
          if (element && !element._view.skip) {
            elements.push(element);
          }
        }
      });
      return elements;
    }
    module2.exports = {
      // Helper function for different modes
      modes: {
        single: function(chart, e) {
          var position = getRelativePosition(e, chart);
          var elements = [];
          parseVisibleItems(chart, function(element) {
            if (element.inRange(position.x, position.y)) {
              elements.push(element);
              return elements;
            }
          });
          return elements.slice(0, 1);
        },
        /**
         * @function Chart.Interaction.modes.label
         * @deprecated since version 2.4.0
         * @todo remove at version 3
         * @private
         */
        label: indexMode,
        /**
         * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
         * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
         * @function Chart.Interaction.modes.index
         * @since v2.4.0
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use during interaction
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        index: indexMode,
        /**
         * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
         * If the options.intersect is false, we find the nearest item and return the items in that dataset
         * @function Chart.Interaction.modes.dataset
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use during interaction
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        dataset: function(chart, e, options) {
          var position = getRelativePosition(e, chart);
          options.axis = options.axis || "xy";
          var distanceMetric = getDistanceMetricForAxis(options.axis);
          var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
          if (items.length > 0) {
            items = chart.getDatasetMeta(items[0]._datasetIndex).data;
          }
          return items;
        },
        /**
         * @function Chart.Interaction.modes.x-axis
         * @deprecated since version 2.4.0. Use index mode and intersect == true
         * @todo remove at version 3
         * @private
         */
        "x-axis": function(chart, e) {
          return indexMode(chart, e, { intersect: false });
        },
        /**
         * Point mode returns all elements that hit test based on the event position
         * of the event
         * @function Chart.Interaction.modes.intersect
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        point: function(chart, e) {
          var position = getRelativePosition(e, chart);
          return getIntersectItems(chart, position);
        },
        /**
         * nearest mode returns the element closest to the point
         * @function Chart.Interaction.modes.intersect
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        nearest: function(chart, e, options) {
          var position = getRelativePosition(e, chart);
          options.axis = options.axis || "xy";
          var distanceMetric = getDistanceMetricForAxis(options.axis);
          var nearestItems = getNearestItems(chart, position, options.intersect, distanceMetric);
          if (nearestItems.length > 1) {
            nearestItems.sort(function(a, b) {
              var sizeA = a.getArea();
              var sizeB = b.getArea();
              var ret = sizeA - sizeB;
              if (ret === 0) {
                ret = a._datasetIndex - b._datasetIndex;
              }
              return ret;
            });
          }
          return nearestItems.slice(0, 1);
        },
        /**
         * x mode returns the elements that hit-test at the current x coordinate
         * @function Chart.Interaction.modes.x
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        x: function(chart, e, options) {
          var position = getRelativePosition(e, chart);
          var items = [];
          var intersectsItem = false;
          parseVisibleItems(chart, function(element) {
            if (element.inXRange(position.x)) {
              items.push(element);
            }
            if (element.inRange(position.x, position.y)) {
              intersectsItem = true;
            }
          });
          if (options.intersect && !intersectsItem) {
            items = [];
          }
          return items;
        },
        /**
         * y mode returns the elements that hit-test at the current y coordinate
         * @function Chart.Interaction.modes.y
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        y: function(chart, e, options) {
          var position = getRelativePosition(e, chart);
          var items = [];
          var intersectsItem = false;
          parseVisibleItems(chart, function(element) {
            if (element.inYRange(position.y)) {
              items.push(element);
            }
            if (element.inRange(position.x, position.y)) {
              intersectsItem = true;
            }
          });
          if (options.intersect && !intersectsItem) {
            items = [];
          }
          return items;
        }
      }
    };
  }
});

// node_modules/chart.js/src/platforms/platform.basic.js
var require_platform_basic = __commonJS({
  "node_modules/chart.js/src/platforms/platform.basic.js"(exports, module2) {
    module2.exports = {
      acquireContext: function(item) {
        if (item && item.canvas) {
          item = item.canvas;
        }
        return item && item.getContext("2d") || null;
      }
    };
  }
});

// node_modules/chart.js/src/platforms/platform.dom.js
var require_platform_dom = __commonJS({
  "node_modules/chart.js/src/platforms/platform.dom.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    var EXPANDO_KEY = "$chartjs";
    var CSS_PREFIX = "chartjs-";
    var CSS_RENDER_MONITOR = CSS_PREFIX + "render-monitor";
    var CSS_RENDER_ANIMATION = CSS_PREFIX + "render-animation";
    var ANIMATION_START_EVENTS = ["animationstart", "webkitAnimationStart"];
    var EVENT_TYPES = {
      touchstart: "mousedown",
      touchmove: "mousemove",
      touchend: "mouseup",
      pointerenter: "mouseenter",
      pointerdown: "mousedown",
      pointermove: "mousemove",
      pointerup: "mouseup",
      pointerleave: "mouseout",
      pointerout: "mouseout"
    };
    function readUsedSize(element, property) {
      var value = helpers.getStyle(element, property);
      var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
      return matches ? Number(matches[1]) : void 0;
    }
    function initCanvas(canvas, config) {
      var style = canvas.style;
      var renderHeight = canvas.getAttribute("height");
      var renderWidth = canvas.getAttribute("width");
      canvas[EXPANDO_KEY] = {
        initial: {
          height: renderHeight,
          width: renderWidth,
          style: {
            display: style.display,
            height: style.height,
            width: style.width
          }
        }
      };
      style.display = style.display || "block";
      if (renderWidth === null || renderWidth === "") {
        var displayWidth = readUsedSize(canvas, "width");
        if (displayWidth !== void 0) {
          canvas.width = displayWidth;
        }
      }
      if (renderHeight === null || renderHeight === "") {
        if (canvas.style.height === "") {
          canvas.height = canvas.width / (config.options.aspectRatio || 2);
        } else {
          var displayHeight = readUsedSize(canvas, "height");
          if (displayWidth !== void 0) {
            canvas.height = displayHeight;
          }
        }
      }
      return canvas;
    }
    var supportsEventListenerOptions = function() {
      var supports = false;
      try {
        var options = Object.defineProperty({}, "passive", {
          get: function() {
            supports = true;
          }
        });
        window.addEventListener("e", null, options);
      } catch (e) {
      }
      return supports;
    }();
    var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
    function addEventListener(node, type, listener) {
      node.addEventListener(type, listener, eventListenerOptions);
    }
    function removeEventListener(node, type, listener) {
      node.removeEventListener(type, listener, eventListenerOptions);
    }
    function createEvent(type, chart, x, y, nativeEvent) {
      return {
        type,
        chart,
        native: nativeEvent || null,
        x: x !== void 0 ? x : null,
        y: y !== void 0 ? y : null
      };
    }
    function fromNativeEvent(event, chart) {
      var type = EVENT_TYPES[event.type] || event.type;
      var pos = helpers.getRelativePosition(event, chart);
      return createEvent(type, chart, pos.x, pos.y, event);
    }
    function throttled(fn, thisArg) {
      var ticking = false;
      var args = [];
      return function() {
        args = Array.prototype.slice.call(arguments);
        thisArg = thisArg || this;
        if (!ticking) {
          ticking = true;
          helpers.requestAnimFrame.call(window, function() {
            ticking = false;
            fn.apply(thisArg, args);
          });
        }
      };
    }
    function createResizer(handler) {
      var resizer = document.createElement("div");
      var cls = CSS_PREFIX + "size-monitor";
      var maxSize = 1e6;
      var style = "position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";
      resizer.style.cssText = style;
      resizer.className = cls;
      resizer.innerHTML = '<div class="' + cls + '-expand" style="' + style + '"><div style="position:absolute;width:' + maxSize + "px;height:" + maxSize + 'px;left:0;top:0"></div></div><div class="' + cls + '-shrink" style="' + style + '"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';
      var expand = resizer.childNodes[0];
      var shrink = resizer.childNodes[1];
      resizer._reset = function() {
        expand.scrollLeft = maxSize;
        expand.scrollTop = maxSize;
        shrink.scrollLeft = maxSize;
        shrink.scrollTop = maxSize;
      };
      var onScroll = function() {
        resizer._reset();
        handler();
      };
      addEventListener(expand, "scroll", onScroll.bind(expand, "expand"));
      addEventListener(shrink, "scroll", onScroll.bind(shrink, "shrink"));
      return resizer;
    }
    function watchForRender(node, handler) {
      var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
      var proxy = expando.renderProxy = function(e) {
        if (e.animationName === CSS_RENDER_ANIMATION) {
          handler();
        }
      };
      helpers.each(ANIMATION_START_EVENTS, function(type) {
        addEventListener(node, type, proxy);
      });
      expando.reflow = !!node.offsetParent;
      node.classList.add(CSS_RENDER_MONITOR);
    }
    function unwatchForRender(node) {
      var expando = node[EXPANDO_KEY] || {};
      var proxy = expando.renderProxy;
      if (proxy) {
        helpers.each(ANIMATION_START_EVENTS, function(type) {
          removeEventListener(node, type, proxy);
        });
        delete expando.renderProxy;
      }
      node.classList.remove(CSS_RENDER_MONITOR);
    }
    function addResizeListener(node, listener, chart) {
      var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
      var resizer = expando.resizer = createResizer(throttled(function() {
        if (expando.resizer) {
          return listener(createEvent("resize", chart));
        }
      }));
      watchForRender(node, function() {
        if (expando.resizer) {
          var container = node.parentNode;
          if (container && container !== resizer.parentNode) {
            container.insertBefore(resizer, container.firstChild);
          }
          resizer._reset();
        }
      });
    }
    function removeResizeListener(node) {
      var expando = node[EXPANDO_KEY] || {};
      var resizer = expando.resizer;
      delete expando.resizer;
      unwatchForRender(node);
      if (resizer && resizer.parentNode) {
        resizer.parentNode.removeChild(resizer);
      }
    }
    function injectCSS(platform, css) {
      var style = platform._style || document.createElement("style");
      if (!platform._style) {
        platform._style = style;
        css = "/* Chart.js */\n" + css;
        style.setAttribute("type", "text/css");
        document.getElementsByTagName("head")[0].appendChild(style);
      }
      style.appendChild(document.createTextNode(css));
    }
    module2.exports = {
      /**
       * This property holds whether this platform is enabled for the current environment.
       * Currently used by platform.js to select the proper implementation.
       * @private
       */
      _enabled: typeof window !== "undefined" && typeof document !== "undefined",
      initialize: function() {
        var keyframes = "from{opacity:0.99}to{opacity:1}";
        injectCSS(
          this,
          // DOM rendering detection
          // https://davidwalsh.name/detect-node-insertion
          "@-webkit-keyframes " + CSS_RENDER_ANIMATION + "{" + keyframes + "}@keyframes " + CSS_RENDER_ANIMATION + "{" + keyframes + "}." + CSS_RENDER_MONITOR + "{-webkit-animation:" + CSS_RENDER_ANIMATION + " 0.001s;animation:" + CSS_RENDER_ANIMATION + " 0.001s;}"
        );
      },
      acquireContext: function(item, config) {
        if (typeof item === "string") {
          item = document.getElementById(item);
        } else if (item.length) {
          item = item[0];
        }
        if (item && item.canvas) {
          item = item.canvas;
        }
        var context = item && item.getContext && item.getContext("2d");
        if (context && context.canvas === item) {
          initCanvas(item, config);
          return context;
        }
        return null;
      },
      releaseContext: function(context) {
        var canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) {
          return;
        }
        var initial = canvas[EXPANDO_KEY].initial;
        ["height", "width"].forEach(function(prop) {
          var value = initial[prop];
          if (helpers.isNullOrUndef(value)) {
            canvas.removeAttribute(prop);
          } else {
            canvas.setAttribute(prop, value);
          }
        });
        helpers.each(initial.style || {}, function(value, key) {
          canvas.style[key] = value;
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
      },
      addEventListener: function(chart, type, listener) {
        var canvas = chart.canvas;
        if (type === "resize") {
          addResizeListener(canvas, listener, chart);
          return;
        }
        var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
        var proxies = expando.proxies || (expando.proxies = {});
        var proxy = proxies[chart.id + "_" + type] = function(event) {
          listener(fromNativeEvent(event, chart));
        };
        addEventListener(canvas, type, proxy);
      },
      removeEventListener: function(chart, type, listener) {
        var canvas = chart.canvas;
        if (type === "resize") {
          removeResizeListener(canvas, listener);
          return;
        }
        var expando = listener[EXPANDO_KEY] || {};
        var proxies = expando.proxies || {};
        var proxy = proxies[chart.id + "_" + type];
        if (!proxy) {
          return;
        }
        removeEventListener(canvas, type, proxy);
      }
    };
    helpers.addEvent = addEventListener;
    helpers.removeEvent = removeEventListener;
  }
});

// node_modules/chart.js/src/platforms/platform.js
var require_platform = __commonJS({
  "node_modules/chart.js/src/platforms/platform.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    var basic = require_platform_basic();
    var dom = require_platform_dom();
    var implementation = dom._enabled ? dom : basic;
    module2.exports = helpers.extend({
      /**
       * @since 2.7.0
       */
      initialize: function() {
      },
      /**
       * Called at chart construction time, returns a context2d instance implementing
       * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
       * @param {*} item - The native item from which to acquire context (platform specific)
       * @param {Object} options - The chart options
       * @returns {CanvasRenderingContext2D} context2d instance
       */
      acquireContext: function() {
      },
      /**
       * Called at chart destruction time, releases any resources associated to the context
       * previously returned by the acquireContext() method.
       * @param {CanvasRenderingContext2D} context - The context2d instance
       * @returns {Boolean} true if the method succeeded, else false
       */
      releaseContext: function() {
      },
      /**
       * Registers the specified listener on the given chart.
       * @param {Chart} chart - Chart from which to listen for event
       * @param {String} type - The ({@link IEvent}) type to listen for
       * @param {Function} listener - Receives a notification (an object that implements
       * the {@link IEvent} interface) when an event of the specified type occurs.
       */
      addEventListener: function() {
      },
      /**
       * Removes the specified listener previously registered with addEventListener.
       * @param {Chart} chart -Chart from which to remove the listener
       * @param {String} type - The ({@link IEvent}) type to remove
       * @param {Function} listener - The listener function to remove from the event target.
       */
      removeEventListener: function() {
      }
    }, implementation);
  }
});

// node_modules/chart.js/src/core/core.plugins.js
var require_core_plugins = __commonJS({
  "node_modules/chart.js/src/core/core.plugins.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    defaults2._set("global", {
      plugins: {}
    });
    module2.exports = {
      /**
       * Globally registered plugins.
       * @private
       */
      _plugins: [],
      /**
       * This identifier is used to invalidate the descriptors cache attached to each chart
       * when a global plugin is registered or unregistered. In this case, the cache ID is
       * incremented and descriptors are regenerated during following API calls.
       * @private
       */
      _cacheId: 0,
      /**
       * Registers the given plugin(s) if not already registered.
       * @param {Array|Object} plugins plugin instance(s).
       */
      register: function(plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function(plugin) {
          if (p.indexOf(plugin) === -1) {
            p.push(plugin);
          }
        });
        this._cacheId++;
      },
      /**
       * Unregisters the given plugin(s) only if registered.
       * @param {Array|Object} plugins plugin instance(s).
       */
      unregister: function(plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function(plugin) {
          var idx = p.indexOf(plugin);
          if (idx !== -1) {
            p.splice(idx, 1);
          }
        });
        this._cacheId++;
      },
      /**
       * Remove all registered plugins.
       * @since 2.1.5
       */
      clear: function() {
        this._plugins = [];
        this._cacheId++;
      },
      /**
       * Returns the number of registered plugins?
       * @returns {Number}
       * @since 2.1.5
       */
      count: function() {
        return this._plugins.length;
      },
      /**
       * Returns all registered plugin instances.
       * @returns {Array} array of plugin objects.
       * @since 2.1.5
       */
      getAll: function() {
        return this._plugins;
      },
      /**
       * Calls enabled plugins for `chart` on the specified hook and with the given args.
       * This method immediately returns as soon as a plugin explicitly returns false. The
       * returned value can be used, for instance, to interrupt the current action.
       * @param {Object} chart - The chart instance for which plugins should be called.
       * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
       * @param {Array} [args] - Extra arguments to apply to the hook call.
       * @returns {Boolean} false if any of the plugins return false, else returns true.
       */
      notify: function(chart, hook, args) {
        var descriptors = this.descriptors(chart);
        var ilen = descriptors.length;
        var i, descriptor, plugin, params, method;
        for (i = 0; i < ilen; ++i) {
          descriptor = descriptors[i];
          plugin = descriptor.plugin;
          method = plugin[hook];
          if (typeof method === "function") {
            params = [chart].concat(args || []);
            params.push(descriptor.options);
            if (method.apply(plugin, params) === false) {
              return false;
            }
          }
        }
        return true;
      },
      /**
       * Returns descriptors of enabled plugins for the given chart.
       * @returns {Array} [{ plugin, options }]
       * @private
       */
      descriptors: function(chart) {
        var cache = chart.$plugins || (chart.$plugins = {});
        if (cache.id === this._cacheId) {
          return cache.descriptors;
        }
        var plugins = [];
        var descriptors = [];
        var config = chart && chart.config || {};
        var options = config.options && config.options.plugins || {};
        this._plugins.concat(config.plugins || []).forEach(function(plugin) {
          var idx = plugins.indexOf(plugin);
          if (idx !== -1) {
            return;
          }
          var id = plugin.id;
          var opts = options[id];
          if (opts === false) {
            return;
          }
          if (opts === true) {
            opts = helpers.clone(defaults2.global.plugins[id]);
          }
          plugins.push(plugin);
          descriptors.push({
            plugin,
            options: opts || {}
          });
        });
        cache.descriptors = descriptors;
        cache.id = this._cacheId;
        return descriptors;
      },
      /**
       * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
       * but in some cases, this reference can be changed by the user when updating options.
       * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
       * @private
       */
      _invalidate: function(chart) {
        delete chart.$plugins;
      }
    };
  }
});

// node_modules/chart.js/src/core/core.ticks.js
var require_core_ticks = __commonJS({
  "node_modules/chart.js/src/core/core.ticks.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    module2.exports = {
      /**
       * Namespace to hold formatters for different types of ticks
       * @namespace Chart.Ticks.formatters
       */
      formatters: {
        /**
         * Formatter for value labels
         * @method Chart.Ticks.formatters.values
         * @param value the value to display
         * @return {String|Array} the label to display
         */
        values: function(value) {
          return helpers.isArray(value) ? value : "" + value;
        },
        /**
         * Formatter for linear numeric ticks
         * @method Chart.Ticks.formatters.linear
         * @param tickValue {Number} the value to be formatted
         * @param index {Number} the position of the tickValue parameter in the ticks array
         * @param ticks {Array<Number>} the list of ticks being converted
         * @return {String} string representation of the tickValue parameter
         */
        linear: function(tickValue, index, ticks) {
          var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
          if (Math.abs(delta) > 1) {
            if (tickValue !== Math.floor(tickValue)) {
              delta = tickValue - Math.floor(tickValue);
            }
          }
          var logDelta = helpers.log10(Math.abs(delta));
          var tickString = "";
          if (tickValue !== 0) {
            var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
            if (maxTick < 1e-4) {
              var logTick = helpers.log10(Math.abs(tickValue));
              tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));
            } else {
              var numDecimal = -1 * Math.floor(logDelta);
              numDecimal = Math.max(Math.min(numDecimal, 20), 0);
              tickString = tickValue.toFixed(numDecimal);
            }
          } else {
            tickString = "0";
          }
          return tickString;
        },
        logarithmic: function(tickValue, index, ticks) {
          var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));
          if (tickValue === 0) {
            return "0";
          } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
            return tickValue.toExponential();
          }
          return "";
        }
      }
    };
  }
});

// node_modules/chart.js/src/core/core.scale.js
var require_core_scale = __commonJS({
  "node_modules/chart.js/src/core/core.scale.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    var Ticks = require_core_ticks();
    defaults2._set("scale", {
      display: true,
      position: "left",
      offset: false,
      // grid line settings
      gridLines: {
        display: true,
        color: "rgba(0, 0, 0, 0.1)",
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickMarkLength: 10,
        zeroLineWidth: 1,
        zeroLineColor: "rgba(0,0,0,0.25)",
        zeroLineBorderDash: [],
        zeroLineBorderDashOffset: 0,
        offsetGridLines: false,
        borderDash: [],
        borderDashOffset: 0
      },
      // scale label
      scaleLabel: {
        // display property
        display: false,
        // actual label
        labelString: "",
        // line height
        lineHeight: 1.2,
        // top/bottom padding
        padding: {
          top: 4,
          bottom: 4
        }
      },
      // label settings
      ticks: {
        beginAtZero: false,
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        padding: 0,
        reverse: false,
        display: true,
        autoSkip: true,
        autoSkipPadding: 0,
        labelOffset: 0,
        // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
        callback: Ticks.formatters.values,
        minor: {},
        major: {}
      }
    });
    function labelsFromTicks(ticks) {
      var labels = [];
      var i, ilen;
      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        labels.push(ticks[i].label);
      }
      return labels;
    }
    function getLineValue(scale, index, offsetGridLines) {
      var lineValue = scale.getPixelForTick(index);
      if (offsetGridLines) {
        if (index === 0) {
          lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;
        } else {
          lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;
        }
      }
      return lineValue;
    }
    function computeTextSize(context, tick, font) {
      return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
    }
    function parseFontOptions(options) {
      var valueOrDefault = helpers.valueOrDefault;
      var globalDefaults = defaults2.global;
      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
      var style = valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
      var family = valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
      return {
        size,
        style,
        family,
        font: helpers.fontString(size, style, family)
      };
    }
    function parseLineHeight(options) {
      return helpers.options.toLineHeight(
        helpers.valueOrDefault(options.lineHeight, 1.2),
        helpers.valueOrDefault(options.fontSize, defaults2.global.defaultFontSize)
      );
    }
    module2.exports = Element.extend({
      /**
       * Get the padding needed for the scale
       * @method getPadding
       * @private
       * @returns {Padding} the necessary padding
       */
      getPadding: function() {
        var me = this;
        return {
          left: me.paddingLeft || 0,
          top: me.paddingTop || 0,
          right: me.paddingRight || 0,
          bottom: me.paddingBottom || 0
        };
      },
      /**
       * Returns the scale tick objects ({label, major})
       * @since 2.7
       */
      getTicks: function() {
        return this._ticks;
      },
      // These methods are ordered by lifecyle. Utilities then follow.
      // Any function defined here is inherited by all scale types.
      // Any function can be extended by the scale type
      mergeTicksOptions: function() {
        var ticks = this.options.ticks;
        if (ticks.minor === false) {
          ticks.minor = {
            display: false
          };
        }
        if (ticks.major === false) {
          ticks.major = {
            display: false
          };
        }
        for (var key in ticks) {
          if (key !== "major" && key !== "minor") {
            if (typeof ticks.minor[key] === "undefined") {
              ticks.minor[key] = ticks[key];
            }
            if (typeof ticks.major[key] === "undefined") {
              ticks.major[key] = ticks[key];
            }
          }
        }
      },
      beforeUpdate: function() {
        helpers.callback(this.options.beforeUpdate, [this]);
      },
      update: function(maxWidth, maxHeight, margins) {
        var me = this;
        var i, ilen, labels, label, ticks, tick;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = helpers.extend({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, margins);
        me.longestTextCache = me.longestTextCache || {};
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeDataLimits();
        me.determineDataLimits();
        me.afterDataLimits();
        me.beforeBuildTicks();
        ticks = me.buildTicks() || [];
        me.afterBuildTicks();
        me.beforeTickToLabelConversion();
        labels = me.convertTicksToLabels(ticks) || me.ticks;
        me.afterTickToLabelConversion();
        me.ticks = labels;
        for (i = 0, ilen = labels.length; i < ilen; ++i) {
          label = labels[i];
          tick = ticks[i];
          if (!tick) {
            ticks.push(tick = {
              label,
              major: false
            });
          } else {
            tick.label = label;
          }
        }
        me._ticks = ticks;
        me.beforeCalculateTickRotation();
        me.calculateTickRotation();
        me.afterCalculateTickRotation();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: function() {
        helpers.callback(this.options.afterUpdate, [this]);
      },
      //
      beforeSetDimensions: function() {
        helpers.callback(this.options.beforeSetDimensions, [this]);
      },
      setDimensions: function() {
        var me = this;
        if (me.isHorizontal()) {
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight;
          me.top = 0;
          me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
      },
      afterSetDimensions: function() {
        helpers.callback(this.options.afterSetDimensions, [this]);
      },
      // Data limits
      beforeDataLimits: function() {
        helpers.callback(this.options.beforeDataLimits, [this]);
      },
      determineDataLimits: helpers.noop,
      afterDataLimits: function() {
        helpers.callback(this.options.afterDataLimits, [this]);
      },
      //
      beforeBuildTicks: function() {
        helpers.callback(this.options.beforeBuildTicks, [this]);
      },
      buildTicks: helpers.noop,
      afterBuildTicks: function() {
        helpers.callback(this.options.afterBuildTicks, [this]);
      },
      beforeTickToLabelConversion: function() {
        helpers.callback(this.options.beforeTickToLabelConversion, [this]);
      },
      convertTicksToLabels: function() {
        var me = this;
        var tickOpts = me.options.ticks;
        me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
      },
      afterTickToLabelConversion: function() {
        helpers.callback(this.options.afterTickToLabelConversion, [this]);
      },
      //
      beforeCalculateTickRotation: function() {
        helpers.callback(this.options.beforeCalculateTickRotation, [this]);
      },
      calculateTickRotation: function() {
        var me = this;
        var context = me.ctx;
        var tickOpts = me.options.ticks;
        var labels = labelsFromTicks(me._ticks);
        var tickFont = parseFontOptions(tickOpts);
        context.font = tickFont.font;
        var labelRotation = tickOpts.minRotation || 0;
        if (labels.length && me.options.display && me.isHorizontal()) {
          var originalLabelWidth = helpers.longestText(context, tickFont.font, labels, me.longestTextCache);
          var labelWidth = originalLabelWidth;
          var cosRotation, sinRotation;
          var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
          while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
            var angleRadians = helpers.toRadians(labelRotation);
            cosRotation = Math.cos(angleRadians);
            sinRotation = Math.sin(angleRadians);
            if (sinRotation * originalLabelWidth > me.maxHeight) {
              labelRotation--;
              break;
            }
            labelRotation++;
            labelWidth = cosRotation * originalLabelWidth;
          }
        }
        me.labelRotation = labelRotation;
      },
      afterCalculateTickRotation: function() {
        helpers.callback(this.options.afterCalculateTickRotation, [this]);
      },
      //
      beforeFit: function() {
        helpers.callback(this.options.beforeFit, [this]);
      },
      fit: function() {
        var me = this;
        var minSize = me.minSize = {
          width: 0,
          height: 0
        };
        var labels = labelsFromTicks(me._ticks);
        var opts = me.options;
        var tickOpts = opts.ticks;
        var scaleLabelOpts = opts.scaleLabel;
        var gridLineOpts = opts.gridLines;
        var display = opts.display;
        var isHorizontal = me.isHorizontal();
        var tickFont = parseFontOptions(tickOpts);
        var tickMarkLength = opts.gridLines.tickMarkLength;
        if (isHorizontal) {
          minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
        } else {
          minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        }
        if (isHorizontal) {
          minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        } else {
          minSize.height = me.maxHeight;
        }
        if (scaleLabelOpts.display && display) {
          var scaleLabelLineHeight = parseLineHeight(scaleLabelOpts);
          var scaleLabelPadding = helpers.options.toPadding(scaleLabelOpts.padding);
          var deltaHeight = scaleLabelLineHeight + scaleLabelPadding.height;
          if (isHorizontal) {
            minSize.height += deltaHeight;
          } else {
            minSize.width += deltaHeight;
          }
        }
        if (tickOpts.display && display) {
          var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, labels, me.longestTextCache);
          var tallestLabelHeightInLines = helpers.numberOfLabelLines(labels);
          var lineSpace = tickFont.size * 0.5;
          var tickPadding = me.options.ticks.padding;
          if (isHorizontal) {
            me.longestLabelWidth = largestTextWidth;
            var angleRadians = helpers.toRadians(me.labelRotation);
            var cosRotation = Math.cos(angleRadians);
            var sinRotation = Math.sin(angleRadians);
            var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * (tallestLabelHeightInLines - 1) + lineSpace;
            minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
            me.ctx.font = tickFont.font;
            var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.font);
            var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.font);
            if (me.labelRotation !== 0) {
              me.paddingLeft = opts.position === "bottom" ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3;
              me.paddingRight = opts.position === "bottom" ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
            } else {
              me.paddingLeft = firstLabelWidth / 2 + 3;
              me.paddingRight = lastLabelWidth / 2 + 3;
            }
          } else {
            if (tickOpts.mirror) {
              largestTextWidth = 0;
            } else {
              largestTextWidth += tickPadding + lineSpace;
            }
            minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);
            me.paddingTop = tickFont.size / 2;
            me.paddingBottom = tickFont.size / 2;
          }
        }
        me.handleMargins();
        me.width = minSize.width;
        me.height = minSize.height;
      },
      /**
       * Handle margins and padding interactions
       * @private
       */
      handleMargins: function() {
        var me = this;
        if (me.margins) {
          me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
          me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
          me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
          me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
        }
      },
      afterFit: function() {
        helpers.callback(this.options.afterFit, [this]);
      },
      // Shared Methods
      isHorizontal: function() {
        return this.options.position === "top" || this.options.position === "bottom";
      },
      isFullWidth: function() {
        return this.options.fullWidth;
      },
      // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
      getRightValue: function(rawValue) {
        if (helpers.isNullOrUndef(rawValue)) {
          return NaN;
        }
        if (typeof rawValue === "number" && !isFinite(rawValue)) {
          return NaN;
        }
        if (rawValue) {
          if (this.isHorizontal()) {
            if (rawValue.x !== void 0) {
              return this.getRightValue(rawValue.x);
            }
          } else if (rawValue.y !== void 0) {
            return this.getRightValue(rawValue.y);
          }
        }
        return rawValue;
      },
      /**
       * Used to get the value to display in the tooltip for the data at the given index
       * @param index
       * @param datasetIndex
       */
      getLabelForIndex: helpers.noop,
      /**
       * Returns the location of the given data point. Value can either be an index or a numerical value
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       * @param value
       * @param index
       * @param datasetIndex
       */
      getPixelForValue: helpers.noop,
      /**
       * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       * @param pixel
       */
      getValueForPixel: helpers.noop,
      /**
       * Returns the location of the tick at the given index
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getPixelForTick: function(index) {
        var me = this;
        var offset2 = me.options.offset;
        if (me.isHorizontal()) {
          var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
          var tickWidth = innerWidth / Math.max(me._ticks.length - (offset2 ? 0 : 1), 1);
          var pixel = tickWidth * index + me.paddingLeft;
          if (offset2) {
            pixel += tickWidth / 2;
          }
          var finalVal = me.left + Math.round(pixel);
          finalVal += me.isFullWidth() ? me.margins.left : 0;
          return finalVal;
        }
        var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
        return me.top + index * (innerHeight / (me._ticks.length - 1));
      },
      /**
       * Utility for getting the pixel location of a percentage of scale
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getPixelForDecimal: function(decimal) {
        var me = this;
        if (me.isHorizontal()) {
          var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
          var valueOffset = innerWidth * decimal + me.paddingLeft;
          var finalVal = me.left + Math.round(valueOffset);
          finalVal += me.isFullWidth() ? me.margins.left : 0;
          return finalVal;
        }
        return me.top + decimal * me.height;
      },
      /**
       * Returns the pixel for the minimum chart value
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getBasePixel: function() {
        return this.getPixelForValue(this.getBaseValue());
      },
      getBaseValue: function() {
        var me = this;
        var min2 = me.min;
        var max2 = me.max;
        return me.beginAtZero ? 0 : min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0;
      },
      /**
       * Returns a subset of ticks to be plotted to avoid overlapping labels.
       * @private
       */
      _autoSkip: function(ticks) {
        var skipRatio;
        var me = this;
        var isHorizontal = me.isHorizontal();
        var optionTicks = me.options.ticks.minor;
        var tickCount = ticks.length;
        var labelRotationRadians = helpers.toRadians(me.labelRotation);
        var cosRotation = Math.cos(labelRotationRadians);
        var longestRotatedLabel = me.longestLabelWidth * cosRotation;
        var result = [];
        var i, tick, shouldSkip;
        var maxTicks;
        if (optionTicks.maxTicksLimit) {
          maxTicks = optionTicks.maxTicksLimit;
        }
        if (isHorizontal) {
          skipRatio = false;
          if ((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount > me.width - (me.paddingLeft + me.paddingRight)) {
            skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount / (me.width - (me.paddingLeft + me.paddingRight)));
          }
          if (maxTicks && tickCount > maxTicks) {
            skipRatio = Math.max(skipRatio, Math.floor(tickCount / maxTicks));
          }
        }
        for (i = 0; i < tickCount; i++) {
          tick = ticks[i];
          shouldSkip = skipRatio > 1 && i % skipRatio > 0 || i % skipRatio === 0 && i + skipRatio >= tickCount;
          if (shouldSkip && i !== tickCount - 1) {
            delete tick.label;
          }
          result.push(tick);
        }
        return result;
      },
      // Actually draw the scale on the canvas
      // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
      draw: function(chartArea) {
        var me = this;
        var options = me.options;
        if (!options.display) {
          return;
        }
        var context = me.ctx;
        var globalDefaults = defaults2.global;
        var optionTicks = options.ticks.minor;
        var optionMajorTicks = options.ticks.major || optionTicks;
        var gridLines = options.gridLines;
        var scaleLabel = options.scaleLabel;
        var isRotated = me.labelRotation !== 0;
        var isHorizontal = me.isHorizontal();
        var ticks = optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();
        var tickFontColor = helpers.valueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
        var tickFont = parseFontOptions(optionTicks);
        var majorTickFontColor = helpers.valueOrDefault(optionMajorTicks.fontColor, globalDefaults.defaultFontColor);
        var majorTickFont = parseFontOptions(optionMajorTicks);
        var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
        var scaleLabelFontColor = helpers.valueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
        var scaleLabelFont = parseFontOptions(scaleLabel);
        var scaleLabelPadding = helpers.options.toPadding(scaleLabel.padding);
        var labelRotationRadians = helpers.toRadians(me.labelRotation);
        var itemsToDraw = [];
        var axisWidth = me.options.gridLines.lineWidth;
        var xTickStart = options.position === "right" ? me.left : me.right - axisWidth - tl;
        var xTickEnd = options.position === "right" ? me.left + tl : me.right;
        var yTickStart = options.position === "bottom" ? me.top + axisWidth : me.bottom - tl - axisWidth;
        var yTickEnd = options.position === "bottom" ? me.top + axisWidth + tl : me.bottom + axisWidth;
        helpers.each(ticks, function(tick, index) {
          if (helpers.isNullOrUndef(tick.label)) {
            return;
          }
          var label = tick.label;
          var lineWidth, lineColor, borderDash, borderDashOffset;
          if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {
            lineWidth = gridLines.zeroLineWidth;
            lineColor = gridLines.zeroLineColor;
            borderDash = gridLines.zeroLineBorderDash;
            borderDashOffset = gridLines.zeroLineBorderDashOffset;
          } else {
            lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, index);
            lineColor = helpers.valueAtIndexOrDefault(gridLines.color, index);
            borderDash = helpers.valueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
            borderDashOffset = helpers.valueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
          }
          var tx1, ty1, tx2, ty2, x12, y12, x22, y22, labelX, labelY;
          var textAlign = "middle";
          var textBaseline = "middle";
          var tickPadding = optionTicks.padding;
          if (isHorizontal) {
            var labelYOffset = tl + tickPadding;
            if (options.position === "bottom") {
              textBaseline = !isRotated ? "top" : "middle";
              textAlign = !isRotated ? "center" : "right";
              labelY = me.top + labelYOffset;
            } else {
              textBaseline = !isRotated ? "bottom" : "middle";
              textAlign = !isRotated ? "center" : "left";
              labelY = me.bottom - labelYOffset;
            }
            var xLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
            if (xLineValue < me.left) {
              lineColor = "rgba(0,0,0,0)";
            }
            xLineValue += helpers.aliasPixel(lineWidth);
            labelX = me.getPixelForTick(index) + optionTicks.labelOffset;
            tx1 = tx2 = x12 = x22 = xLineValue;
            ty1 = yTickStart;
            ty2 = yTickEnd;
            y12 = chartArea.top;
            y22 = chartArea.bottom + axisWidth;
          } else {
            var isLeft2 = options.position === "left";
            var labelXOffset;
            if (optionTicks.mirror) {
              textAlign = isLeft2 ? "left" : "right";
              labelXOffset = tickPadding;
            } else {
              textAlign = isLeft2 ? "right" : "left";
              labelXOffset = tl + tickPadding;
            }
            labelX = isLeft2 ? me.right - labelXOffset : me.left + labelXOffset;
            var yLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
            if (yLineValue < me.top) {
              lineColor = "rgba(0,0,0,0)";
            }
            yLineValue += helpers.aliasPixel(lineWidth);
            labelY = me.getPixelForTick(index) + optionTicks.labelOffset;
            tx1 = xTickStart;
            tx2 = xTickEnd;
            x12 = chartArea.left;
            x22 = chartArea.right + axisWidth;
            ty1 = ty2 = y12 = y22 = yLineValue;
          }
          itemsToDraw.push({
            tx1,
            ty1,
            tx2,
            ty2,
            x1: x12,
            y1: y12,
            x2: x22,
            y2: y22,
            labelX,
            labelY,
            glWidth: lineWidth,
            glColor: lineColor,
            glBorderDash: borderDash,
            glBorderDashOffset: borderDashOffset,
            rotation: -1 * labelRotationRadians,
            label,
            major: tick.major,
            textBaseline,
            textAlign
          });
        });
        helpers.each(itemsToDraw, function(itemToDraw) {
          if (gridLines.display) {
            context.save();
            context.lineWidth = itemToDraw.glWidth;
            context.strokeStyle = itemToDraw.glColor;
            if (context.setLineDash) {
              context.setLineDash(itemToDraw.glBorderDash);
              context.lineDashOffset = itemToDraw.glBorderDashOffset;
            }
            context.beginPath();
            if (gridLines.drawTicks) {
              context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
              context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
            }
            if (gridLines.drawOnChartArea) {
              context.moveTo(itemToDraw.x1, itemToDraw.y1);
              context.lineTo(itemToDraw.x2, itemToDraw.y2);
            }
            context.stroke();
            context.restore();
          }
          if (optionTicks.display) {
            context.save();
            context.translate(itemToDraw.labelX, itemToDraw.labelY);
            context.rotate(itemToDraw.rotation);
            context.font = itemToDraw.major ? majorTickFont.font : tickFont.font;
            context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;
            context.textBaseline = itemToDraw.textBaseline;
            context.textAlign = itemToDraw.textAlign;
            var label = itemToDraw.label;
            if (helpers.isArray(label)) {
              var lineCount = label.length;
              var lineHeight = tickFont.size * 1.5;
              var y = me.isHorizontal() ? 0 : -lineHeight * (lineCount - 1) / 2;
              for (var i = 0; i < lineCount; ++i) {
                context.fillText("" + label[i], 0, y);
                y += lineHeight;
              }
            } else {
              context.fillText(label, 0, 0);
            }
            context.restore();
          }
        });
        if (scaleLabel.display) {
          var scaleLabelX;
          var scaleLabelY;
          var rotation = 0;
          var halfLineHeight = parseLineHeight(scaleLabel) / 2;
          if (isHorizontal) {
            scaleLabelX = me.left + (me.right - me.left) / 2;
            scaleLabelY = options.position === "bottom" ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
          } else {
            var isLeft = options.position === "left";
            scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
            scaleLabelY = me.top + (me.bottom - me.top) / 2;
            rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
          }
          context.save();
          context.translate(scaleLabelX, scaleLabelY);
          context.rotate(rotation);
          context.textAlign = "center";
          context.textBaseline = "middle";
          context.fillStyle = scaleLabelFontColor;
          context.font = scaleLabelFont.font;
          context.fillText(scaleLabel.labelString, 0, 0);
          context.restore();
        }
        if (gridLines.drawBorder) {
          context.lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, 0);
          context.strokeStyle = helpers.valueAtIndexOrDefault(gridLines.color, 0);
          var x1 = me.left;
          var x2 = me.right + axisWidth;
          var y1 = me.top;
          var y2 = me.bottom + axisWidth;
          var aliasPixel = helpers.aliasPixel(context.lineWidth);
          if (isHorizontal) {
            y1 = y2 = options.position === "top" ? me.bottom : me.top;
            y1 += aliasPixel;
            y2 += aliasPixel;
          } else {
            x1 = x2 = options.position === "left" ? me.right : me.left;
            x1 += aliasPixel;
            x2 += aliasPixel;
          }
          context.beginPath();
          context.moveTo(x1, y1);
          context.lineTo(x2, y2);
          context.stroke();
        }
      }
    });
  }
});

// node_modules/chart.js/src/core/core.tooltip.js
var require_core_tooltip = __commonJS({
  "node_modules/chart.js/src/core/core.tooltip.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    defaults2._set("global", {
      tooltips: {
        enabled: true,
        custom: null,
        mode: "nearest",
        position: "average",
        intersect: true,
        backgroundColor: "rgba(0,0,0,0.8)",
        titleFontStyle: "bold",
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleFontColor: "#fff",
        titleAlign: "left",
        bodySpacing: 2,
        bodyFontColor: "#fff",
        bodyAlign: "left",
        footerFontStyle: "bold",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFontColor: "#fff",
        footerAlign: "left",
        yPadding: 6,
        xPadding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        multiKeyBackground: "#fff",
        displayColors: true,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        callbacks: {
          // Args are: (tooltipItems, data)
          beforeTitle: helpers.noop,
          title: function(tooltipItems, data) {
            var title = "";
            var labels = data.labels;
            var labelCount = labels ? labels.length : 0;
            if (tooltipItems.length > 0) {
              var item = tooltipItems[0];
              if (item.xLabel) {
                title = item.xLabel;
              } else if (labelCount > 0 && item.index < labelCount) {
                title = labels[item.index];
              }
            }
            return title;
          },
          afterTitle: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeBody: helpers.noop,
          // Args are: (tooltipItem, data)
          beforeLabel: helpers.noop,
          label: function(tooltipItem, data) {
            var label = data.datasets[tooltipItem.datasetIndex].label || "";
            if (label) {
              label += ": ";
            }
            label += tooltipItem.yLabel;
            return label;
          },
          labelColor: function(tooltipItem, chart) {
            var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
            var activeElement = meta.data[tooltipItem.index];
            var view = activeElement._view;
            return {
              borderColor: view.borderColor,
              backgroundColor: view.backgroundColor
            };
          },
          labelTextColor: function() {
            return this._options.bodyFontColor;
          },
          afterLabel: helpers.noop,
          // Args are: (tooltipItems, data)
          afterBody: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeFooter: helpers.noop,
          footer: helpers.noop,
          afterFooter: helpers.noop
        }
      }
    });
    var positioners = {
      /**
       * Average mode places the tooltip at the average position of the elements shown
       * @function Chart.Tooltip.positioners.average
       * @param elements {ChartElement[]} the elements being displayed in the tooltip
       * @returns {Point} tooltip position
       */
      average: function(elements) {
        if (!elements.length) {
          return false;
        }
        var i, len;
        var x = 0;
        var y = 0;
        var count = 0;
        for (i = 0, len = elements.length; i < len; ++i) {
          var el = elements[i];
          if (el && el.hasValue()) {
            var pos = el.tooltipPosition();
            x += pos.x;
            y += pos.y;
            ++count;
          }
        }
        return {
          x: Math.round(x / count),
          y: Math.round(y / count)
        };
      },
      /**
       * Gets the tooltip position nearest of the item nearest to the event position
       * @function Chart.Tooltip.positioners.nearest
       * @param elements {Chart.Element[]} the tooltip elements
       * @param eventPosition {Point} the position of the event in canvas coordinates
       * @returns {Point} the tooltip position
       */
      nearest: function(elements, eventPosition) {
        var x = eventPosition.x;
        var y = eventPosition.y;
        var minDistance = Number.POSITIVE_INFINITY;
        var i, len, nearestElement;
        for (i = 0, len = elements.length; i < len; ++i) {
          var el = elements[i];
          if (el && el.hasValue()) {
            var center = el.getCenterPoint();
            var d = helpers.distanceBetweenPoints(eventPosition, center);
            if (d < minDistance) {
              minDistance = d;
              nearestElement = el;
            }
          }
        }
        if (nearestElement) {
          var tp = nearestElement.tooltipPosition();
          x = tp.x;
          y = tp.y;
        }
        return {
          x,
          y
        };
      }
    };
    function mergeOpacity(colorString, opacity) {
      var color = helpers.color(colorString);
      return color.alpha(opacity * color.alpha()).rgbaString();
    }
    function pushOrConcat(base, toPush) {
      if (toPush) {
        if (helpers.isArray(toPush)) {
          Array.prototype.push.apply(base, toPush);
        } else {
          base.push(toPush);
        }
      }
      return base;
    }
    function splitNewlines(str) {
      if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
        return str.split("\n");
      }
      return str;
    }
    function createTooltipItem(element) {
      var xScale = element._xScale;
      var yScale = element._yScale || element._scale;
      var index = element._index;
      var datasetIndex = element._datasetIndex;
      return {
        xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : "",
        yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : "",
        index,
        datasetIndex,
        x: element._model.x,
        y: element._model.y
      };
    }
    function getBaseModel(tooltipOpts) {
      var globalDefaults = defaults2.global;
      var valueOrDefault = helpers.valueOrDefault;
      return {
        // Positioning
        xPadding: tooltipOpts.xPadding,
        yPadding: tooltipOpts.yPadding,
        xAlign: tooltipOpts.xAlign,
        yAlign: tooltipOpts.yAlign,
        // Body
        bodyFontColor: tooltipOpts.bodyFontColor,
        _bodyFontFamily: valueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
        _bodyFontStyle: valueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
        _bodyAlign: tooltipOpts.bodyAlign,
        bodyFontSize: valueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
        bodySpacing: tooltipOpts.bodySpacing,
        // Title
        titleFontColor: tooltipOpts.titleFontColor,
        _titleFontFamily: valueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
        _titleFontStyle: valueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
        titleFontSize: valueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
        _titleAlign: tooltipOpts.titleAlign,
        titleSpacing: tooltipOpts.titleSpacing,
        titleMarginBottom: tooltipOpts.titleMarginBottom,
        // Footer
        footerFontColor: tooltipOpts.footerFontColor,
        _footerFontFamily: valueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
        _footerFontStyle: valueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
        footerFontSize: valueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
        _footerAlign: tooltipOpts.footerAlign,
        footerSpacing: tooltipOpts.footerSpacing,
        footerMarginTop: tooltipOpts.footerMarginTop,
        // Appearance
        caretSize: tooltipOpts.caretSize,
        cornerRadius: tooltipOpts.cornerRadius,
        backgroundColor: tooltipOpts.backgroundColor,
        opacity: 0,
        legendColorBackground: tooltipOpts.multiKeyBackground,
        displayColors: tooltipOpts.displayColors,
        borderColor: tooltipOpts.borderColor,
        borderWidth: tooltipOpts.borderWidth
      };
    }
    function getTooltipSize(tooltip, model) {
      var ctx = tooltip._chart.ctx;
      var height = model.yPadding * 2;
      var width = 0;
      var body = model.body;
      var combinedBodyLength = body.reduce(function(count, bodyItem) {
        return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
      }, 0);
      combinedBodyLength += model.beforeBody.length + model.afterBody.length;
      var titleLineCount = model.title.length;
      var footerLineCount = model.footer.length;
      var titleFontSize = model.titleFontSize;
      var bodyFontSize = model.bodyFontSize;
      var footerFontSize = model.footerFontSize;
      height += titleLineCount * titleFontSize;
      height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
      height += titleLineCount ? model.titleMarginBottom : 0;
      height += combinedBodyLength * bodyFontSize;
      height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
      height += footerLineCount ? model.footerMarginTop : 0;
      height += footerLineCount * footerFontSize;
      height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
      var widthPadding = 0;
      var maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
      };
      ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
      helpers.each(model.title, maxLineWidth);
      ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
      helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
      widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
      helpers.each(body, function(bodyItem) {
        helpers.each(bodyItem.before, maxLineWidth);
        helpers.each(bodyItem.lines, maxLineWidth);
        helpers.each(bodyItem.after, maxLineWidth);
      });
      widthPadding = 0;
      ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
      helpers.each(model.footer, maxLineWidth);
      width += 2 * model.xPadding;
      return {
        width,
        height
      };
    }
    function determineAlignment(tooltip, size) {
      var model = tooltip._model;
      var chart = tooltip._chart;
      var chartArea = tooltip._chart.chartArea;
      var xAlign = "center";
      var yAlign = "center";
      if (model.y < size.height) {
        yAlign = "top";
      } else if (model.y > chart.height - size.height) {
        yAlign = "bottom";
      }
      var lf, rf;
      var olf, orf;
      var yf;
      var midX = (chartArea.left + chartArea.right) / 2;
      var midY = (chartArea.top + chartArea.bottom) / 2;
      if (yAlign === "center") {
        lf = function(x) {
          return x <= midX;
        };
        rf = function(x) {
          return x > midX;
        };
      } else {
        lf = function(x) {
          return x <= size.width / 2;
        };
        rf = function(x) {
          return x >= chart.width - size.width / 2;
        };
      }
      olf = function(x) {
        return x + size.width + model.caretSize + model.caretPadding > chart.width;
      };
      orf = function(x) {
        return x - size.width - model.caretSize - model.caretPadding < 0;
      };
      yf = function(y) {
        return y <= midY ? "top" : "bottom";
      };
      if (lf(model.x)) {
        xAlign = "left";
        if (olf(model.x)) {
          xAlign = "center";
          yAlign = yf(model.y);
        }
      } else if (rf(model.x)) {
        xAlign = "right";
        if (orf(model.x)) {
          xAlign = "center";
          yAlign = yf(model.y);
        }
      }
      var opts = tooltip._options;
      return {
        xAlign: opts.xAlign ? opts.xAlign : xAlign,
        yAlign: opts.yAlign ? opts.yAlign : yAlign
      };
    }
    function getBackgroundPoint(vm, size, alignment, chart) {
      var x = vm.x;
      var y = vm.y;
      var caretSize = vm.caretSize;
      var caretPadding = vm.caretPadding;
      var cornerRadius = vm.cornerRadius;
      var xAlign = alignment.xAlign;
      var yAlign = alignment.yAlign;
      var paddingAndSize = caretSize + caretPadding;
      var radiusAndPadding = cornerRadius + caretPadding;
      if (xAlign === "right") {
        x -= size.width;
      } else if (xAlign === "center") {
        x -= size.width / 2;
        if (x + size.width > chart.width) {
          x = chart.width - size.width;
        }
        if (x < 0) {
          x = 0;
        }
      }
      if (yAlign === "top") {
        y += paddingAndSize;
      } else if (yAlign === "bottom") {
        y -= size.height + paddingAndSize;
      } else {
        y -= size.height / 2;
      }
      if (yAlign === "center") {
        if (xAlign === "left") {
          x += paddingAndSize;
        } else if (xAlign === "right") {
          x -= paddingAndSize;
        }
      } else if (xAlign === "left") {
        x -= radiusAndPadding;
      } else if (xAlign === "right") {
        x += radiusAndPadding;
      }
      return {
        x,
        y
      };
    }
    function getBeforeAfterBodyLines(callback) {
      return pushOrConcat([], splitNewlines(callback));
    }
    var exports = module2.exports = Element.extend({
      initialize: function() {
        this._model = getBaseModel(this._options);
        this._lastActive = [];
      },
      // Get the title
      // Args are: (tooltipItem, data)
      getTitle: function() {
        var me = this;
        var opts = me._options;
        var callbacks = opts.callbacks;
        var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
        var title = callbacks.title.apply(me, arguments);
        var afterTitle = callbacks.afterTitle.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
      },
      // Args are: (tooltipItem, data)
      getBeforeBody: function() {
        return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
      },
      // Args are: (tooltipItem, data)
      getBody: function(tooltipItems, data) {
        var me = this;
        var callbacks = me._options.callbacks;
        var bodyItems = [];
        helpers.each(tooltipItems, function(tooltipItem) {
          var bodyItem = {
            before: [],
            lines: [],
            after: []
          };
          pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
          pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
          pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
          bodyItems.push(bodyItem);
        });
        return bodyItems;
      },
      // Args are: (tooltipItem, data)
      getAfterBody: function() {
        return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
      },
      // Get the footer and beforeFooter and afterFooter lines
      // Args are: (tooltipItem, data)
      getFooter: function() {
        var me = this;
        var callbacks = me._options.callbacks;
        var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
        var footer = callbacks.footer.apply(me, arguments);
        var afterFooter = callbacks.afterFooter.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
      },
      update: function(changed) {
        var me = this;
        var opts = me._options;
        var existingModel = me._model;
        var model = me._model = getBaseModel(opts);
        var active = me._active;
        var data = me._data;
        var alignment = {
          xAlign: existingModel.xAlign,
          yAlign: existingModel.yAlign
        };
        var backgroundPoint = {
          x: existingModel.x,
          y: existingModel.y
        };
        var tooltipSize = {
          width: existingModel.width,
          height: existingModel.height
        };
        var tooltipPosition = {
          x: existingModel.caretX,
          y: existingModel.caretY
        };
        var i, len;
        if (active.length) {
          model.opacity = 1;
          var labelColors = [];
          var labelTextColors = [];
          tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
          var tooltipItems = [];
          for (i = 0, len = active.length; i < len; ++i) {
            tooltipItems.push(createTooltipItem(active[i]));
          }
          if (opts.filter) {
            tooltipItems = tooltipItems.filter(function(a) {
              return opts.filter(a, data);
            });
          }
          if (opts.itemSort) {
            tooltipItems = tooltipItems.sort(function(a, b) {
              return opts.itemSort(a, b, data);
            });
          }
          helpers.each(tooltipItems, function(tooltipItem) {
            labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
            labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
          });
          model.title = me.getTitle(tooltipItems, data);
          model.beforeBody = me.getBeforeBody(tooltipItems, data);
          model.body = me.getBody(tooltipItems, data);
          model.afterBody = me.getAfterBody(tooltipItems, data);
          model.footer = me.getFooter(tooltipItems, data);
          model.x = Math.round(tooltipPosition.x);
          model.y = Math.round(tooltipPosition.y);
          model.caretPadding = opts.caretPadding;
          model.labelColors = labelColors;
          model.labelTextColors = labelTextColors;
          model.dataPoints = tooltipItems;
          tooltipSize = getTooltipSize(this, model);
          alignment = determineAlignment(this, tooltipSize);
          backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
        } else {
          model.opacity = 0;
        }
        model.xAlign = alignment.xAlign;
        model.yAlign = alignment.yAlign;
        model.x = backgroundPoint.x;
        model.y = backgroundPoint.y;
        model.width = tooltipSize.width;
        model.height = tooltipSize.height;
        model.caretX = tooltipPosition.x;
        model.caretY = tooltipPosition.y;
        me._model = model;
        if (changed && opts.custom) {
          opts.custom.call(me, model);
        }
        return me;
      },
      drawCaret: function(tooltipPoint, size) {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
      },
      getCaretPosition: function(tooltipPoint, size, vm) {
        var x1, x2, x3, y1, y2, y3;
        var caretSize = vm.caretSize;
        var cornerRadius = vm.cornerRadius;
        var xAlign = vm.xAlign;
        var yAlign = vm.yAlign;
        var ptX = tooltipPoint.x;
        var ptY = tooltipPoint.y;
        var width = size.width;
        var height = size.height;
        if (yAlign === "center") {
          y2 = ptY + height / 2;
          if (xAlign === "left") {
            x1 = ptX;
            x2 = x1 - caretSize;
            x3 = x1;
            y1 = y2 + caretSize;
            y3 = y2 - caretSize;
          } else {
            x1 = ptX + width;
            x2 = x1 + caretSize;
            x3 = x1;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          }
        } else {
          if (xAlign === "left") {
            x2 = ptX + cornerRadius + caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else if (xAlign === "right") {
            x2 = ptX + width - cornerRadius - caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else {
            x2 = vm.caretX;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          }
          if (yAlign === "top") {
            y1 = ptY;
            y2 = y1 - caretSize;
            y3 = y1;
          } else {
            y1 = ptY + height;
            y2 = y1 + caretSize;
            y3 = y1;
            var tmp = x3;
            x3 = x1;
            x1 = tmp;
          }
        }
        return { x1, x2, x3, y1, y2, y3 };
      },
      drawTitle: function(pt, vm, ctx, opacity) {
        var title = vm.title;
        if (title.length) {
          ctx.textAlign = vm._titleAlign;
          ctx.textBaseline = "top";
          var titleFontSize = vm.titleFontSize;
          var titleSpacing = vm.titleSpacing;
          ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
          ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
          var i, len;
          for (i = 0, len = title.length; i < len; ++i) {
            ctx.fillText(title[i], pt.x, pt.y);
            pt.y += titleFontSize + titleSpacing;
            if (i + 1 === title.length) {
              pt.y += vm.titleMarginBottom - titleSpacing;
            }
          }
        }
      },
      drawBody: function(pt, vm, ctx, opacity) {
        var bodyFontSize = vm.bodyFontSize;
        var bodySpacing = vm.bodySpacing;
        var body = vm.body;
        ctx.textAlign = vm._bodyAlign;
        ctx.textBaseline = "top";
        ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
        var xLinePadding = 0;
        var fillLineOfText = function(line) {
          ctx.fillText(line, pt.x + xLinePadding, pt.y);
          pt.y += bodyFontSize + bodySpacing;
        };
        ctx.fillStyle = mergeOpacity(vm.bodyFontColor, opacity);
        helpers.each(vm.beforeBody, fillLineOfText);
        var drawColorBoxes = vm.displayColors;
        xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;
        helpers.each(body, function(bodyItem, i) {
          var textColor = mergeOpacity(vm.labelTextColors[i], opacity);
          ctx.fillStyle = textColor;
          helpers.each(bodyItem.before, fillLineOfText);
          helpers.each(bodyItem.lines, function(line) {
            if (drawColorBoxes) {
              ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
              ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
              ctx.lineWidth = 1;
              ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
              ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
              ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
              ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
              ctx.fillStyle = textColor;
            }
            fillLineOfText(line);
          });
          helpers.each(bodyItem.after, fillLineOfText);
        });
        xLinePadding = 0;
        helpers.each(vm.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
      },
      drawFooter: function(pt, vm, ctx, opacity) {
        var footer = vm.footer;
        if (footer.length) {
          pt.y += vm.footerMarginTop;
          ctx.textAlign = vm._footerAlign;
          ctx.textBaseline = "top";
          ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
          ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
          helpers.each(footer, function(line) {
            ctx.fillText(line, pt.x, pt.y);
            pt.y += vm.footerFontSize + vm.footerSpacing;
          });
        }
      },
      drawBackground: function(pt, vm, ctx, tooltipSize, opacity) {
        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
        ctx.strokeStyle = mergeOpacity(vm.borderColor, opacity);
        ctx.lineWidth = vm.borderWidth;
        var xAlign = vm.xAlign;
        var yAlign = vm.yAlign;
        var x = pt.x;
        var y = pt.y;
        var width = tooltipSize.width;
        var height = tooltipSize.height;
        var radius = vm.cornerRadius;
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        if (yAlign === "top") {
          this.drawCaret(pt, tooltipSize);
        }
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        if (yAlign === "center" && xAlign === "right") {
          this.drawCaret(pt, tooltipSize);
        }
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        if (yAlign === "bottom") {
          this.drawCaret(pt, tooltipSize);
        }
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        if (yAlign === "center" && xAlign === "left") {
          this.drawCaret(pt, tooltipSize);
        }
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        ctx.fill();
        if (vm.borderWidth > 0) {
          ctx.stroke();
        }
      },
      draw: function() {
        var ctx = this._chart.ctx;
        var vm = this._view;
        if (vm.opacity === 0) {
          return;
        }
        var tooltipSize = {
          width: vm.width,
          height: vm.height
        };
        var pt = {
          x: vm.x,
          y: vm.y
        };
        var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
        var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
        if (this._options.enabled && hasTooltipContent) {
          this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
          pt.x += vm.xPadding;
          pt.y += vm.yPadding;
          this.drawTitle(pt, vm, ctx, opacity);
          this.drawBody(pt, vm, ctx, opacity);
          this.drawFooter(pt, vm, ctx, opacity);
        }
      },
      /**
       * Handle an event
       * @private
       * @param {IEvent} event - The event to handle
       * @returns {Boolean} true if the tooltip changed
       */
      handleEvent: function(e) {
        var me = this;
        var options = me._options;
        var changed = false;
        me._lastActive = me._lastActive || [];
        if (e.type === "mouseout") {
          me._active = [];
        } else {
          me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
        }
        changed = !helpers.arrayEquals(me._active, me._lastActive);
        if (changed) {
          me._lastActive = me._active;
          if (options.enabled || options.custom) {
            me._eventPosition = {
              x: e.x,
              y: e.y
            };
            me.update(true);
            me.pivot();
          }
        }
        return changed;
      }
    });
    exports.positioners = positioners;
  }
});

// node_modules/chart.js/src/core/core.controller.js
var require_core_controller = __commonJS({
  "node_modules/chart.js/src/core/core.controller.js"(exports, module2) {
    "use strict";
    var Animation = require_core_animation();
    var animations = require_core_animations();
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var Interaction = require_core_interaction();
    var layouts = require_core_layouts();
    var platform = require_platform();
    var plugins = require_core_plugins();
    var scaleService = require_core_scaleService();
    var Tooltip = require_core_tooltip();
    module2.exports = function(Chart) {
      Chart.types = {};
      Chart.instances = {};
      Chart.controllers = {};
      function initConfig(config) {
        config = config || {};
        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = helpers.configMerge(
          defaults2.global,
          defaults2[config.type],
          config.options || {}
        );
        return config;
      }
      function updateConfig(chart) {
        var newOptions = chart.options;
        helpers.each(chart.scales, function(scale) {
          layouts.removeBox(chart, scale);
        });
        newOptions = helpers.configMerge(
          Chart.defaults.global,
          Chart.defaults[chart.config.type],
          newOptions
        );
        chart.options = chart.config.options = newOptions;
        chart.ensureScalesHaveIDs();
        chart.buildOrUpdateScales();
        chart.tooltip._options = newOptions.tooltips;
        chart.tooltip.initialize();
      }
      function positionIsHorizontal(position) {
        return position === "top" || position === "bottom";
      }
      helpers.extend(
        Chart.prototype,
        /** @lends Chart */
        {
          /**
           * @private
           */
          construct: function(item, config) {
            var me = this;
            config = initConfig(config);
            var context = platform.acquireContext(item, config);
            var canvas = context && context.canvas;
            var height = canvas && canvas.height;
            var width = canvas && canvas.width;
            me.id = helpers.uid();
            me.ctx = context;
            me.canvas = canvas;
            me.config = config;
            me.width = width;
            me.height = height;
            me.aspectRatio = height ? width / height : null;
            me.options = config.options;
            me._bufferedRender = false;
            me.chart = me;
            me.controller = me;
            Chart.instances[me.id] = me;
            Object.defineProperty(me, "data", {
              get: function() {
                return me.config.data;
              },
              set: function(value) {
                me.config.data = value;
              }
            });
            if (!context || !canvas) {
              console.error("Failed to create chart: can't acquire context from the given item");
              return;
            }
            me.initialize();
            me.update();
          },
          /**
           * @private
           */
          initialize: function() {
            var me = this;
            plugins.notify(me, "beforeInit");
            helpers.retinaScale(me, me.options.devicePixelRatio);
            me.bindEvents();
            if (me.options.responsive) {
              me.resize(true);
            }
            me.ensureScalesHaveIDs();
            me.buildOrUpdateScales();
            me.initToolTip();
            plugins.notify(me, "afterInit");
            return me;
          },
          clear: function() {
            helpers.canvas.clear(this);
            return this;
          },
          stop: function() {
            animations.cancelAnimation(this);
            return this;
          },
          resize: function(silent) {
            var me = this;
            var options = me.options;
            var canvas = me.canvas;
            var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null;
            var newWidth = Math.max(0, Math.floor(helpers.getMaximumWidth(canvas)));
            var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas)));
            if (me.width === newWidth && me.height === newHeight) {
              return;
            }
            canvas.width = me.width = newWidth;
            canvas.height = me.height = newHeight;
            canvas.style.width = newWidth + "px";
            canvas.style.height = newHeight + "px";
            helpers.retinaScale(me, options.devicePixelRatio);
            if (!silent) {
              var newSize = { width: newWidth, height: newHeight };
              plugins.notify(me, "resize", [newSize]);
              if (me.options.onResize) {
                me.options.onResize(me, newSize);
              }
              me.stop();
              me.update({
                duration: me.options.responsiveAnimationDuration
              });
            }
          },
          ensureScalesHaveIDs: function() {
            var options = this.options;
            var scalesOptions = options.scales || {};
            var scaleOptions = options.scale;
            helpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {
              xAxisOptions.id = xAxisOptions.id || "x-axis-" + index;
            });
            helpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {
              yAxisOptions.id = yAxisOptions.id || "y-axis-" + index;
            });
            if (scaleOptions) {
              scaleOptions.id = scaleOptions.id || "scale";
            }
          },
          /**
           * Builds a map of scale ID to scale object for future lookup.
           */
          buildOrUpdateScales: function() {
            var me = this;
            var options = me.options;
            var scales = me.scales || {};
            var items = [];
            var updated = Object.keys(scales).reduce(function(obj, id) {
              obj[id] = false;
              return obj;
            }, {});
            if (options.scales) {
              items = items.concat(
                (options.scales.xAxes || []).map(function(xAxisOptions) {
                  return { options: xAxisOptions, dtype: "category", dposition: "bottom" };
                }),
                (options.scales.yAxes || []).map(function(yAxisOptions) {
                  return { options: yAxisOptions, dtype: "linear", dposition: "left" };
                })
              );
            }
            if (options.scale) {
              items.push({
                options: options.scale,
                dtype: "radialLinear",
                isDefault: true,
                dposition: "chartArea"
              });
            }
            helpers.each(items, function(item) {
              var scaleOptions = item.options;
              var id = scaleOptions.id;
              var scaleType = helpers.valueOrDefault(scaleOptions.type, item.dtype);
              if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                scaleOptions.position = item.dposition;
              }
              updated[id] = true;
              var scale = null;
              if (id in scales && scales[id].type === scaleType) {
                scale = scales[id];
                scale.options = scaleOptions;
                scale.ctx = me.ctx;
                scale.chart = me;
              } else {
                var scaleClass = scaleService.getScaleConstructor(scaleType);
                if (!scaleClass) {
                  return;
                }
                scale = new scaleClass({
                  id,
                  type: scaleType,
                  options: scaleOptions,
                  ctx: me.ctx,
                  chart: me
                });
                scales[scale.id] = scale;
              }
              scale.mergeTicksOptions();
              if (item.isDefault) {
                me.scale = scale;
              }
            });
            helpers.each(updated, function(hasUpdated, id) {
              if (!hasUpdated) {
                delete scales[id];
              }
            });
            me.scales = scales;
            scaleService.addScalesToLayout(this);
          },
          buildOrUpdateControllers: function() {
            var me = this;
            var types = [];
            var newControllers = [];
            helpers.each(me.data.datasets, function(dataset, datasetIndex) {
              var meta = me.getDatasetMeta(datasetIndex);
              var type = dataset.type || me.config.type;
              if (meta.type && meta.type !== type) {
                me.destroyDatasetMeta(datasetIndex);
                meta = me.getDatasetMeta(datasetIndex);
              }
              meta.type = type;
              types.push(meta.type);
              if (meta.controller) {
                meta.controller.updateIndex(datasetIndex);
                meta.controller.linkScales();
              } else {
                var ControllerClass = Chart.controllers[meta.type];
                if (ControllerClass === void 0) {
                  throw new Error('"' + meta.type + '" is not a chart type.');
                }
                meta.controller = new ControllerClass(me, datasetIndex);
                newControllers.push(meta.controller);
              }
            }, me);
            return newControllers;
          },
          /**
           * Reset the elements of all datasets
           * @private
           */
          resetElements: function() {
            var me = this;
            helpers.each(me.data.datasets, function(dataset, datasetIndex) {
              me.getDatasetMeta(datasetIndex).controller.reset();
            }, me);
          },
          /**
          * Resets the chart back to it's state before the initial animation
          */
          reset: function() {
            this.resetElements();
            this.tooltip.initialize();
          },
          update: function(config) {
            var me = this;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            updateConfig(me);
            plugins._invalidate(me);
            if (plugins.notify(me, "beforeUpdate") === false) {
              return;
            }
            me.tooltip._data = me.data;
            var newControllers = me.buildOrUpdateControllers();
            helpers.each(me.data.datasets, function(dataset, datasetIndex) {
              me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
            }, me);
            me.updateLayout();
            if (me.options.animation && me.options.animation.duration) {
              helpers.each(newControllers, function(controller) {
                controller.reset();
              });
            }
            me.updateDatasets();
            me.tooltip.initialize();
            me.lastActive = [];
            plugins.notify(me, "afterUpdate");
            if (me._bufferedRender) {
              me._bufferedRequest = {
                duration: config.duration,
                easing: config.easing,
                lazy: config.lazy
              };
            } else {
              me.render(config);
            }
          },
          /**
           * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
           * hook, in which case, plugins will not be called on `afterLayout`.
           * @private
           */
          updateLayout: function() {
            var me = this;
            if (plugins.notify(me, "beforeLayout") === false) {
              return;
            }
            layouts.update(this, this.width, this.height);
            plugins.notify(me, "afterScaleUpdate");
            plugins.notify(me, "afterLayout");
          },
          /**
           * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
           * @private
           */
          updateDatasets: function() {
            var me = this;
            if (plugins.notify(me, "beforeDatasetsUpdate") === false) {
              return;
            }
            for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.updateDataset(i);
            }
            plugins.notify(me, "afterDatasetsUpdate");
          },
          /**
           * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
           * @private
           */
          updateDataset: function(index) {
            var me = this;
            var meta = me.getDatasetMeta(index);
            var args = {
              meta,
              index
            };
            if (plugins.notify(me, "beforeDatasetUpdate", [args]) === false) {
              return;
            }
            meta.controller.update();
            plugins.notify(me, "afterDatasetUpdate", [args]);
          },
          render: function(config) {
            var me = this;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            var duration = config.duration;
            var lazy = config.lazy;
            if (plugins.notify(me, "beforeRender") === false) {
              return;
            }
            var animationOptions = me.options.animation;
            var onComplete = function(animation2) {
              plugins.notify(me, "afterRender");
              helpers.callback(animationOptions && animationOptions.onComplete, [animation2], me);
            };
            if (animationOptions && (typeof duration !== "undefined" && duration !== 0 || typeof duration === "undefined" && animationOptions.duration !== 0)) {
              var animation = new Animation({
                numSteps: (duration || animationOptions.duration) / 16.66,
                // 60 fps
                easing: config.easing || animationOptions.easing,
                render: function(chart, animationObject) {
                  var easingFunction = helpers.easing.effects[animationObject.easing];
                  var currentStep = animationObject.currentStep;
                  var stepDecimal = currentStep / animationObject.numSteps;
                  chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                },
                onAnimationProgress: animationOptions.onProgress,
                onAnimationComplete: onComplete
              });
              animations.addAnimation(me, animation, duration, lazy);
            } else {
              me.draw();
              onComplete(new Animation({ numSteps: 0, chart: me }));
            }
            return me;
          },
          draw: function(easingValue) {
            var me = this;
            me.clear();
            if (helpers.isNullOrUndef(easingValue)) {
              easingValue = 1;
            }
            me.transition(easingValue);
            if (me.width <= 0 || me.height <= 0) {
              return;
            }
            if (plugins.notify(me, "beforeDraw", [easingValue]) === false) {
              return;
            }
            helpers.each(me.boxes, function(box) {
              box.draw(me.chartArea);
            }, me);
            if (me.scale) {
              me.scale.draw();
            }
            me.drawDatasets(easingValue);
            me._drawTooltip(easingValue);
            plugins.notify(me, "afterDraw", [easingValue]);
          },
          /**
           * @private
           */
          transition: function(easingValue) {
            var me = this;
            for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
              if (me.isDatasetVisible(i)) {
                me.getDatasetMeta(i).controller.transition(easingValue);
              }
            }
            me.tooltip.transition(easingValue);
          },
          /**
           * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
           * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
           * @private
           */
          drawDatasets: function(easingValue) {
            var me = this;
            if (plugins.notify(me, "beforeDatasetsDraw", [easingValue]) === false) {
              return;
            }
            for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {
              if (me.isDatasetVisible(i)) {
                me.drawDataset(i, easingValue);
              }
            }
            plugins.notify(me, "afterDatasetsDraw", [easingValue]);
          },
          /**
           * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
           * hook, in which case, plugins will not be called on `afterDatasetDraw`.
           * @private
           */
          drawDataset: function(index, easingValue) {
            var me = this;
            var meta = me.getDatasetMeta(index);
            var args = {
              meta,
              index,
              easingValue
            };
            if (plugins.notify(me, "beforeDatasetDraw", [args]) === false) {
              return;
            }
            meta.controller.draw(easingValue);
            plugins.notify(me, "afterDatasetDraw", [args]);
          },
          /**
           * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
           * hook, in which case, plugins will not be called on `afterTooltipDraw`.
           * @private
           */
          _drawTooltip: function(easingValue) {
            var me = this;
            var tooltip = me.tooltip;
            var args = {
              tooltip,
              easingValue
            };
            if (plugins.notify(me, "beforeTooltipDraw", [args]) === false) {
              return;
            }
            tooltip.draw();
            plugins.notify(me, "afterTooltipDraw", [args]);
          },
          // Get the single element that was clicked on
          // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
          getElementAtEvent: function(e) {
            return Interaction.modes.single(this, e);
          },
          getElementsAtEvent: function(e) {
            return Interaction.modes.label(this, e, { intersect: true });
          },
          getElementsAtXAxis: function(e) {
            return Interaction.modes["x-axis"](this, e, { intersect: true });
          },
          getElementsAtEventForMode: function(e, mode, options) {
            var method = Interaction.modes[mode];
            if (typeof method === "function") {
              return method(this, e, options);
            }
            return [];
          },
          getDatasetAtEvent: function(e) {
            return Interaction.modes.dataset(this, e, { intersect: true });
          },
          getDatasetMeta: function(datasetIndex) {
            var me = this;
            var dataset = me.data.datasets[datasetIndex];
            if (!dataset._meta) {
              dataset._meta = {};
            }
            var meta = dataset._meta[me.id];
            if (!meta) {
              meta = dataset._meta[me.id] = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                // See isDatasetVisible() comment
                xAxisID: null,
                yAxisID: null
              };
            }
            return meta;
          },
          getVisibleDatasetCount: function() {
            var count = 0;
            for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
              if (this.isDatasetVisible(i)) {
                count++;
              }
            }
            return count;
          },
          isDatasetVisible: function(datasetIndex) {
            var meta = this.getDatasetMeta(datasetIndex);
            return typeof meta.hidden === "boolean" ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
          },
          generateLegend: function() {
            return this.options.legendCallback(this);
          },
          /**
           * @private
           */
          destroyDatasetMeta: function(datasetIndex) {
            var id = this.id;
            var dataset = this.data.datasets[datasetIndex];
            var meta = dataset._meta && dataset._meta[id];
            if (meta) {
              meta.controller.destroy();
              delete dataset._meta[id];
            }
          },
          destroy: function() {
            var me = this;
            var canvas = me.canvas;
            var i, ilen;
            me.stop();
            for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.destroyDatasetMeta(i);
            }
            if (canvas) {
              me.unbindEvents();
              helpers.canvas.clear(me);
              platform.releaseContext(me.ctx);
              me.canvas = null;
              me.ctx = null;
            }
            plugins.notify(me, "destroy");
            delete Chart.instances[me.id];
          },
          toBase64Image: function() {
            return this.canvas.toDataURL.apply(this.canvas, arguments);
          },
          initToolTip: function() {
            var me = this;
            me.tooltip = new Tooltip({
              _chart: me,
              _chartInstance: me,
              // deprecated, backward compatibility
              _data: me.data,
              _options: me.options.tooltips
            }, me);
          },
          /**
           * @private
           */
          bindEvents: function() {
            var me = this;
            var listeners = me._listeners = {};
            var listener = function() {
              me.eventHandler.apply(me, arguments);
            };
            helpers.each(me.options.events, function(type) {
              platform.addEventListener(me, type, listener);
              listeners[type] = listener;
            });
            if (me.options.responsive) {
              listener = function() {
                me.resize();
              };
              platform.addEventListener(me, "resize", listener);
              listeners.resize = listener;
            }
          },
          /**
           * @private
           */
          unbindEvents: function() {
            var me = this;
            var listeners = me._listeners;
            if (!listeners) {
              return;
            }
            delete me._listeners;
            helpers.each(listeners, function(listener, type) {
              platform.removeEventListener(me, type, listener);
            });
          },
          updateHoverStyle: function(elements, mode, enabled) {
            var method = enabled ? "setHoverStyle" : "removeHoverStyle";
            var element, i, ilen;
            for (i = 0, ilen = elements.length; i < ilen; ++i) {
              element = elements[i];
              if (element) {
                this.getDatasetMeta(element._datasetIndex).controller[method](element);
              }
            }
          },
          /**
           * @private
           */
          eventHandler: function(e) {
            var me = this;
            var tooltip = me.tooltip;
            if (plugins.notify(me, "beforeEvent", [e]) === false) {
              return;
            }
            me._bufferedRender = true;
            me._bufferedRequest = null;
            var changed = me.handleEvent(e);
            if (tooltip) {
              changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);
            }
            plugins.notify(me, "afterEvent", [e]);
            var bufferedRequest = me._bufferedRequest;
            if (bufferedRequest) {
              me.render(bufferedRequest);
            } else if (changed && !me.animating) {
              me.stop();
              me.render({
                duration: me.options.hover.animationDuration,
                lazy: true
              });
            }
            me._bufferedRender = false;
            me._bufferedRequest = null;
            return me;
          },
          /**
           * Handle an event
           * @private
           * @param {IEvent} event the event to handle
           * @return {Boolean} true if the chart needs to re-render
           */
          handleEvent: function(e) {
            var me = this;
            var options = me.options || {};
            var hoverOptions = options.hover;
            var changed = false;
            me.lastActive = me.lastActive || [];
            if (e.type === "mouseout") {
              me.active = [];
            } else {
              me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
            }
            helpers.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);
            if (e.type === "mouseup" || e.type === "click") {
              if (options.onClick) {
                options.onClick.call(me, e.native, me.active);
              }
            }
            if (me.lastActive.length) {
              me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
            }
            if (me.active.length && hoverOptions.mode) {
              me.updateHoverStyle(me.active, hoverOptions.mode, true);
            }
            changed = !helpers.arrayEquals(me.active, me.lastActive);
            me.lastActive = me.active;
            return changed;
          }
        }
      );
      Chart.Controller = Chart;
    };
  }
});

// node_modules/chart.js/src/core/core.datasetController.js
var require_core_datasetController = __commonJS({
  "node_modules/chart.js/src/core/core.datasetController.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    module2.exports = function(Chart) {
      var arrayEvents = ["push", "pop", "shift", "splice", "unshift"];
      function listenArrayEvents(array, listener) {
        if (array._chartjs) {
          array._chartjs.listeners.push(listener);
          return;
        }
        Object.defineProperty(array, "_chartjs", {
          configurable: true,
          enumerable: false,
          value: {
            listeners: [listener]
          }
        });
        arrayEvents.forEach(function(key) {
          var method = "onData" + key.charAt(0).toUpperCase() + key.slice(1);
          var base = array[key];
          Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function() {
              var args = Array.prototype.slice.call(arguments);
              var res = base.apply(this, args);
              helpers.each(array._chartjs.listeners, function(object) {
                if (typeof object[method] === "function") {
                  object[method].apply(object, args);
                }
              });
              return res;
            }
          });
        });
      }
      function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;
        if (!stub) {
          return;
        }
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) {
          listeners.splice(index, 1);
        }
        if (listeners.length > 0) {
          return;
        }
        arrayEvents.forEach(function(key) {
          delete array[key];
        });
        delete array._chartjs;
      }
      Chart.DatasetController = function(chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
      };
      helpers.extend(Chart.DatasetController.prototype, {
        /**
         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
         * @type {Chart.core.element}
         */
        datasetElementType: null,
        /**
         * Element type used to generate a meta data (e.g. Chart.element.Point).
         * @type {Chart.core.element}
         */
        dataElementType: null,
        initialize: function(chart, datasetIndex) {
          var me = this;
          me.chart = chart;
          me.index = datasetIndex;
          me.linkScales();
          me.addElements();
        },
        updateIndex: function(datasetIndex) {
          this.index = datasetIndex;
        },
        linkScales: function() {
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {
            meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
          }
          if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {
            meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
          }
        },
        getDataset: function() {
          return this.chart.data.datasets[this.index];
        },
        getMeta: function() {
          return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function(scaleID) {
          return this.chart.scales[scaleID];
        },
        reset: function() {
          this.update(true);
        },
        /**
         * @private
         */
        destroy: function() {
          if (this._data) {
            unlistenArrayEvents(this._data, this);
          }
        },
        createMetaDataset: function() {
          var me = this;
          var type = me.datasetElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index
          });
        },
        createMetaData: function(index) {
          var me = this;
          var type = me.dataElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index,
            _index: index
          });
        },
        addElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data || [];
          var metaData = meta.data;
          var i, ilen;
          for (i = 0, ilen = data.length; i < ilen; ++i) {
            metaData[i] = metaData[i] || me.createMetaData(i);
          }
          meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function(index) {
          var element = this.createMetaData(index);
          this.getMeta().data.splice(index, 0, element);
          this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function() {
          var me = this;
          var dataset = me.getDataset();
          var data = dataset.data || (dataset.data = []);
          if (me._data !== data) {
            if (me._data) {
              unlistenArrayEvents(me._data, me);
            }
            listenArrayEvents(data, me);
            me._data = data;
          }
          me.resyncElements();
        },
        update: helpers.noop,
        transition: function(easingValue) {
          var meta = this.getMeta();
          var elements = meta.data || [];
          var ilen = elements.length;
          var i = 0;
          for (; i < ilen; ++i) {
            elements[i].transition(easingValue);
          }
          if (meta.dataset) {
            meta.dataset.transition(easingValue);
          }
        },
        draw: function() {
          var meta = this.getMeta();
          var elements = meta.data || [];
          var ilen = elements.length;
          var i = 0;
          if (meta.dataset) {
            meta.dataset.draw();
          }
          for (; i < ilen; ++i) {
            elements[i].draw();
          }
        },
        removeHoverStyle: function(element) {
          helpers.merge(element._model, element.$previousStyle || {});
          delete element.$previousStyle;
        },
        setHoverStyle: function(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var getHoverColor = helpers.getHoverColor;
          var model = element._model;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },
        /**
         * @private
         */
        resyncElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data;
          var numMeta = meta.data.length;
          var numData = data.length;
          if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
          } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
          }
        },
        /**
         * @private
         */
        insertElements: function(start, count) {
          for (var i = 0; i < count; ++i) {
            this.addElementAndReset(start + i);
          }
        },
        /**
         * @private
         */
        onDataPush: function() {
          this.insertElements(this.getDataset().data.length - 1, arguments.length);
        },
        /**
         * @private
         */
        onDataPop: function() {
          this.getMeta().data.pop();
        },
        /**
         * @private
         */
        onDataShift: function() {
          this.getMeta().data.shift();
        },
        /**
         * @private
         */
        onDataSplice: function(start, count) {
          this.getMeta().data.splice(start, count);
          this.insertElements(start, arguments.length - 2);
        },
        /**
         * @private
         */
        onDataUnshift: function() {
          this.insertElements(0, arguments.length);
        }
      });
      Chart.DatasetController.extend = helpers.inherits;
    };
  }
});

// node_modules/chart.js/src/scales/scale.linearbase.js
var require_scale_linearbase = __commonJS({
  "node_modules/chart.js/src/scales/scale.linearbase.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    var Scale = require_core_scale();
    function generateTicks(generationOptions, dataRange) {
      var ticks = [];
      var factor;
      var precision;
      var spacing;
      if (generationOptions.stepSize && generationOptions.stepSize > 0) {
        spacing = generationOptions.stepSize;
      } else {
        var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
        spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
        precision = generationOptions.precision;
        if (precision !== void 0) {
          factor = Math.pow(10, precision);
          spacing = Math.ceil(spacing * factor) / factor;
        }
      }
      var niceMin = Math.floor(dataRange.min / spacing) * spacing;
      var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
      if (!helpers.isNullOrUndef(generationOptions.min) && !helpers.isNullOrUndef(generationOptions.max) && generationOptions.stepSize) {
        if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1e3)) {
          niceMin = generationOptions.min;
          niceMax = generationOptions.max;
        }
      }
      var numSpaces = (niceMax - niceMin) / spacing;
      if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
        numSpaces = Math.round(numSpaces);
      } else {
        numSpaces = Math.ceil(numSpaces);
      }
      precision = 1;
      if (spacing < 1) {
        precision = Math.pow(10, 1 - Math.floor(helpers.log10(spacing)));
        niceMin = Math.round(niceMin * precision) / precision;
        niceMax = Math.round(niceMax * precision) / precision;
      }
      ticks.push(generationOptions.min !== void 0 ? generationOptions.min : niceMin);
      for (var j = 1; j < numSpaces; ++j) {
        ticks.push(Math.round((niceMin + j * spacing) * precision) / precision);
      }
      ticks.push(generationOptions.max !== void 0 ? generationOptions.max : niceMax);
      return ticks;
    }
    module2.exports = function(Chart) {
      var noop = helpers.noop;
      Chart.LinearScaleBase = Scale.extend({
        getRightValue: function(value) {
          if (typeof value === "string") {
            return +value;
          }
          return Scale.prototype.getRightValue.call(this, value);
        },
        handleTickRangeOptions: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          if (tickOpts.beginAtZero) {
            var minSign = helpers.sign(me.min);
            var maxSign = helpers.sign(me.max);
            if (minSign < 0 && maxSign < 0) {
              me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
              me.min = 0;
            }
          }
          var setMin = tickOpts.min !== void 0 || tickOpts.suggestedMin !== void 0;
          var setMax = tickOpts.max !== void 0 || tickOpts.suggestedMax !== void 0;
          if (tickOpts.min !== void 0) {
            me.min = tickOpts.min;
          } else if (tickOpts.suggestedMin !== void 0) {
            if (me.min === null) {
              me.min = tickOpts.suggestedMin;
            } else {
              me.min = Math.min(me.min, tickOpts.suggestedMin);
            }
          }
          if (tickOpts.max !== void 0) {
            me.max = tickOpts.max;
          } else if (tickOpts.suggestedMax !== void 0) {
            if (me.max === null) {
              me.max = tickOpts.suggestedMax;
            } else {
              me.max = Math.max(me.max, tickOpts.suggestedMax);
            }
          }
          if (setMin !== setMax) {
            if (me.min >= me.max) {
              if (setMin) {
                me.max = me.min + 1;
              } else {
                me.min = me.max - 1;
              }
            }
          }
          if (me.min === me.max) {
            me.max++;
            if (!tickOpts.beginAtZero) {
              me.min--;
            }
          }
        },
        getTickLimit: noop,
        handleDirectionalChanges: noop,
        buildTicks: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var maxTicks = me.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          var numericGeneratorOptions = {
            maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            precision: tickOpts.precision,
            stepSize: helpers.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
          };
          var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
          me.handleDirectionalChanges();
          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);
          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function() {
          var me = this;
          me.ticksAsNumbers = me.ticks.slice();
          me.zeroLineIndex = me.ticks.indexOf(0);
          Scale.prototype.convertTicksToLabels.call(me);
        }
      });
    };
  }
});

// node_modules/chart.js/src/scales/scale.category.js
var require_scale_category = __commonJS({
  "node_modules/chart.js/src/scales/scale.category.js"(exports, module2) {
    "use strict";
    var Scale = require_core_scale();
    var scaleService = require_core_scaleService();
    module2.exports = function() {
      var defaultConfig = {
        position: "bottom"
      };
      var DatasetScale = Scale.extend({
        /**
        * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
        * else fall back to data.labels
        * @private
        */
        getLabels: function() {
          var data = this.chart.data;
          return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
        },
        determineDataLimits: function() {
          var me = this;
          var labels = me.getLabels();
          me.minIndex = 0;
          me.maxIndex = labels.length - 1;
          var findIndex;
          if (me.options.ticks.min !== void 0) {
            findIndex = labels.indexOf(me.options.ticks.min);
            me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
          }
          if (me.options.ticks.max !== void 0) {
            findIndex = labels.indexOf(me.options.ticks.max);
            me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
          }
          me.min = labels[me.minIndex];
          me.max = labels[me.maxIndex];
        },
        buildTicks: function() {
          var me = this;
          var labels = me.getLabels();
          me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var data = me.chart.data;
          var isHorizontal = me.isHorizontal();
          if (data.yLabels && !isHorizontal) {
            return me.getRightValue(data.datasets[datasetIndex].data[index]);
          }
          return me.ticks[index - me.minIndex];
        },
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: function(value, index) {
          var me = this;
          var offset2 = me.options.offset;
          var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset2 ? 0 : 1), 1);
          var valueCategory;
          if (value !== void 0 && value !== null) {
            valueCategory = me.isHorizontal() ? value.x : value.y;
          }
          if (valueCategory !== void 0 || value !== void 0 && isNaN(index)) {
            var labels = me.getLabels();
            value = valueCategory || value;
            var idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
          }
          if (me.isHorizontal()) {
            var valueWidth = me.width / offsetAmt;
            var widthOffset = valueWidth * (index - me.minIndex);
            if (offset2) {
              widthOffset += valueWidth / 2;
            }
            return me.left + Math.round(widthOffset);
          }
          var valueHeight = me.height / offsetAmt;
          var heightOffset = valueHeight * (index - me.minIndex);
          if (offset2) {
            heightOffset += valueHeight / 2;
          }
          return me.top + Math.round(heightOffset);
        },
        getPixelForTick: function(index) {
          return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var offset2 = me.options.offset;
          var value;
          var offsetAmt = Math.max(me._ticks.length - (offset2 ? 0 : 1), 1);
          var horz = me.isHorizontal();
          var valueDimension = (horz ? me.width : me.height) / offsetAmt;
          pixel -= horz ? me.left : me.top;
          if (offset2) {
            pixel -= valueDimension / 2;
          }
          if (pixel <= 0) {
            value = 0;
          } else {
            value = Math.round(pixel / valueDimension);
          }
          return value + me.minIndex;
        },
        getBasePixel: function() {
          return this.bottom;
        }
      });
      scaleService.registerScaleType("category", DatasetScale, defaultConfig);
    };
  }
});

// node_modules/chart.js/src/scales/scale.linear.js
var require_scale_linear = __commonJS({
  "node_modules/chart.js/src/scales/scale.linear.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var scaleService = require_core_scaleService();
    var Ticks = require_core_ticks();
    module2.exports = function(Chart) {
      var defaultConfig = {
        position: "left",
        ticks: {
          callback: Ticks.formatters.linear
        }
      };
      var LinearScale = Chart.LinearScaleBase.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var isHorizontal = me.isHorizontal();
          var DEFAULT_MIN = 0;
          var DEFAULT_MAX = 1;
          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          }
          me.min = null;
          me.max = null;
          var hasStacks = opts.stacked;
          if (hasStacks === void 0) {
            helpers.each(datasets, function(dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }
              var meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== void 0) {
                hasStacks = true;
              }
            });
          }
          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function(dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [
                meta.type,
                // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                opts.stacked === void 0 && meta.stack === void 0 ? datasetIndex : "",
                meta.stack
              ].join(".");
              if (valuesPerStack[key] === void 0) {
                valuesPerStack[key] = {
                  positiveValues: [],
                  negativeValues: []
                };
              }
              var positiveValues = valuesPerStack[key].positiveValues;
              var negativeValues = valuesPerStack[key].negativeValues;
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function(rawValue, index) {
                  var value = +me.getRightValue(rawValue);
                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }
                  positiveValues[index] = positiveValues[index] || 0;
                  negativeValues[index] = negativeValues[index] || 0;
                  if (opts.relativePoints) {
                    positiveValues[index] = 100;
                  } else if (value < 0) {
                    negativeValues[index] += value;
                  } else {
                    positiveValues[index] += value;
                  }
                });
              }
            });
            helpers.each(valuesPerStack, function(valuesForType) {
              var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
              var minVal = helpers.min(values);
              var maxVal = helpers.max(values);
              me.min = me.min === null ? minVal : Math.min(me.min, minVal);
              me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
          } else {
            helpers.each(datasets, function(dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function(rawValue, index) {
                  var value = +me.getRightValue(rawValue);
                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }
                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }
                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }
                });
              }
            });
          }
          me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
          me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
          this.handleTickRangeOptions();
        },
        getTickLimit: function() {
          var maxTicks;
          var me = this;
          var tickOpts = me.options.ticks;
          if (me.isHorizontal()) {
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
          } else {
            var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, defaults2.global.defaultFontSize);
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
          }
          return maxTicks;
        },
        // Called after the ticks are built. We need
        handleDirectionalChanges: function() {
          if (!this.isHorizontal()) {
            this.ticks.reverse();
          }
        },
        getLabelForIndex: function(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        // Utils
        getPixelForValue: function(value) {
          var me = this;
          var start = me.start;
          var rightValue = +me.getRightValue(value);
          var pixel;
          var range = me.end - start;
          if (me.isHorizontal()) {
            pixel = me.left + me.width / range * (rightValue - start);
          } else {
            pixel = me.bottom - me.height / range * (rightValue - start);
          }
          return pixel;
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var isHorizontal = me.isHorizontal();
          var innerDimension = isHorizontal ? me.width : me.height;
          var offset2 = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
          return me.start + (me.end - me.start) * offset2;
        },
        getPixelForTick: function(index) {
          return this.getPixelForValue(this.ticksAsNumbers[index]);
        }
      });
      scaleService.registerScaleType("linear", LinearScale, defaultConfig);
    };
  }
});

// node_modules/chart.js/src/scales/scale.logarithmic.js
var require_scale_logarithmic = __commonJS({
  "node_modules/chart.js/src/scales/scale.logarithmic.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    var Scale = require_core_scale();
    var scaleService = require_core_scaleService();
    var Ticks = require_core_ticks();
    function generateTicks(generationOptions, dataRange) {
      var ticks = [];
      var valueOrDefault = helpers.valueOrDefault;
      var tickVal = valueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
      var endExp = Math.floor(helpers.log10(dataRange.max));
      var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
      var exp, significand;
      if (tickVal === 0) {
        exp = Math.floor(helpers.log10(dataRange.minNotZero));
        significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
        ticks.push(tickVal);
        tickVal = significand * Math.pow(10, exp);
      } else {
        exp = Math.floor(helpers.log10(tickVal));
        significand = Math.floor(tickVal / Math.pow(10, exp));
      }
      var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
      do {
        ticks.push(tickVal);
        ++significand;
        if (significand === 10) {
          significand = 1;
          ++exp;
          precision = exp >= 0 ? 1 : precision;
        }
        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
      } while (exp < endExp || exp === endExp && significand < endSignificand);
      var lastTick = valueOrDefault(generationOptions.max, tickVal);
      ticks.push(lastTick);
      return ticks;
    }
    module2.exports = function(Chart) {
      var defaultConfig = {
        position: "left",
        // label settings
        ticks: {
          callback: Ticks.formatters.logarithmic
        }
      };
      var LogarithmicScale = Scale.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var isHorizontal = me.isHorizontal();
          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          }
          me.min = null;
          me.max = null;
          me.minNotZero = null;
          var hasStacks = opts.stacked;
          if (hasStacks === void 0) {
            helpers.each(datasets, function(dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }
              var meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== void 0) {
                hasStacks = true;
              }
            });
          }
          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function(dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [
                meta.type,
                // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                opts.stacked === void 0 && meta.stack === void 0 ? datasetIndex : "",
                meta.stack
              ].join(".");
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                if (valuesPerStack[key] === void 0) {
                  valuesPerStack[key] = [];
                }
                helpers.each(dataset.data, function(rawValue, index) {
                  var values = valuesPerStack[key];
                  var value = +me.getRightValue(rawValue);
                  if (isNaN(value) || meta.data[index].hidden || value < 0) {
                    return;
                  }
                  values[index] = values[index] || 0;
                  values[index] += value;
                });
              }
            });
            helpers.each(valuesPerStack, function(valuesForType) {
              if (valuesForType.length > 0) {
                var minVal = helpers.min(valuesForType);
                var maxVal = helpers.max(valuesForType);
                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
              }
            });
          } else {
            helpers.each(datasets, function(dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function(rawValue, index) {
                  var value = +me.getRightValue(rawValue);
                  if (isNaN(value) || meta.data[index].hidden || value < 0) {
                    return;
                  }
                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }
                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }
                  if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                    me.minNotZero = value;
                  }
                });
              }
            });
          }
          this.handleTickRangeOptions();
        },
        handleTickRangeOptions: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var valueOrDefault = helpers.valueOrDefault;
          var DEFAULT_MIN = 1;
          var DEFAULT_MAX = 10;
          me.min = valueOrDefault(tickOpts.min, me.min);
          me.max = valueOrDefault(tickOpts.max, me.max);
          if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
              me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
              me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
            } else {
              me.min = DEFAULT_MIN;
              me.max = DEFAULT_MAX;
            }
          }
          if (me.min === null) {
            me.min = Math.pow(10, Math.floor(helpers.log10(me.max)) - 1);
          }
          if (me.max === null) {
            me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers.log10(me.min)) + 1) : DEFAULT_MAX;
          }
          if (me.minNotZero === null) {
            if (me.min > 0) {
              me.minNotZero = me.min;
            } else if (me.max < 1) {
              me.minNotZero = Math.pow(10, Math.floor(helpers.log10(me.max)));
            } else {
              me.minNotZero = DEFAULT_MIN;
            }
          }
        },
        buildTicks: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var reverse = !me.isHorizontal();
          var generationOptions = {
            min: tickOpts.min,
            max: tickOpts.max
          };
          var ticks = me.ticks = generateTicks(generationOptions, me);
          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);
          if (tickOpts.reverse) {
            reverse = !reverse;
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
          if (reverse) {
            ticks.reverse();
          }
        },
        convertTicksToLabels: function() {
          this.tickValues = this.ticks.slice();
          Scale.prototype.convertTicksToLabels.call(this);
        },
        // Get the correct tooltip label
        getLabelForIndex: function(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function(index) {
          return this.getPixelForValue(this.tickValues[index]);
        },
        /**
         * Returns the value of the first tick.
         * @param {Number} value - The minimum not zero value.
         * @return {Number} The first tick value.
         * @private
         */
        _getFirstTickValue: function(value) {
          var exp = Math.floor(helpers.log10(value));
          var significand = Math.floor(value / Math.pow(10, exp));
          return significand * Math.pow(10, exp);
        },
        getPixelForValue: function(value) {
          var me = this;
          var reverse = me.options.ticks.reverse;
          var log10 = helpers.log10;
          var firstTickValue = me._getFirstTickValue(me.minNotZero);
          var offset2 = 0;
          var innerDimension, pixel, start, end, sign2;
          value = +me.getRightValue(value);
          if (reverse) {
            start = me.end;
            end = me.start;
            sign2 = -1;
          } else {
            start = me.start;
            end = me.end;
            sign2 = 1;
          }
          if (me.isHorizontal()) {
            innerDimension = me.width;
            pixel = reverse ? me.right : me.left;
          } else {
            innerDimension = me.height;
            sign2 *= -1;
            pixel = reverse ? me.top : me.bottom;
          }
          if (value !== start) {
            if (start === 0) {
              offset2 = helpers.getValueOrDefault(
                me.options.ticks.fontSize,
                Chart.defaults.global.defaultFontSize
              );
              innerDimension -= offset2;
              start = firstTickValue;
            }
            if (value !== 0) {
              offset2 += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));
            }
            pixel += sign2 * offset2;
          }
          return pixel;
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var reverse = me.options.ticks.reverse;
          var log10 = helpers.log10;
          var firstTickValue = me._getFirstTickValue(me.minNotZero);
          var innerDimension, start, end, value;
          if (reverse) {
            start = me.end;
            end = me.start;
          } else {
            start = me.start;
            end = me.end;
          }
          if (me.isHorizontal()) {
            innerDimension = me.width;
            value = reverse ? me.right - pixel : pixel - me.left;
          } else {
            innerDimension = me.height;
            value = reverse ? pixel - me.top : me.bottom - pixel;
          }
          if (value !== start) {
            if (start === 0) {
              var offset2 = helpers.getValueOrDefault(
                me.options.ticks.fontSize,
                Chart.defaults.global.defaultFontSize
              );
              value -= offset2;
              innerDimension -= offset2;
              start = firstTickValue;
            }
            value *= log10(end) - log10(start);
            value /= innerDimension;
            value = Math.pow(10, log10(start) + value);
          }
          return value;
        }
      });
      scaleService.registerScaleType("logarithmic", LogarithmicScale, defaultConfig);
    };
  }
});

// node_modules/chart.js/src/scales/scale.radialLinear.js
var require_scale_radialLinear = __commonJS({
  "node_modules/chart.js/src/scales/scale.radialLinear.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var scaleService = require_core_scaleService();
    var Ticks = require_core_ticks();
    module2.exports = function(Chart) {
      var globalDefaults = defaults2.global;
      var defaultConfig = {
        display: true,
        // Boolean - Whether to animate scaling the chart from the centre
        animate: true,
        position: "chartArea",
        angleLines: {
          display: true,
          color: "rgba(0, 0, 0, 0.1)",
          lineWidth: 1
        },
        gridLines: {
          circular: false
        },
        // label settings
        ticks: {
          // Boolean - Show a backdrop to the scale label
          showLabelBackdrop: true,
          // String - The colour of the label backdrop
          backdropColor: "rgba(255,255,255,0.75)",
          // Number - The backdrop padding above & below the label in pixels
          backdropPaddingY: 2,
          // Number - The backdrop padding to the side of the label in pixels
          backdropPaddingX: 2,
          callback: Ticks.formatters.linear
        },
        pointLabels: {
          // Boolean - if true, show point labels
          display: true,
          // Number - Point label font size in pixels
          fontSize: 10,
          // Function - Used to convert point labels
          callback: function(label) {
            return label;
          }
        }
      };
      function getValueCount(scale) {
        var opts = scale.options;
        return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;
      }
      function getPointLabelFontOptions(scale) {
        var pointLabelOptions = scale.options.pointLabels;
        var fontSize = helpers.valueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
        var fontStyle = helpers.valueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
        var fontFamily = helpers.valueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
        var font = helpers.fontString(fontSize, fontStyle, fontFamily);
        return {
          size: fontSize,
          style: fontStyle,
          family: fontFamily,
          font
        };
      }
      function measureLabelSize(ctx, fontSize, label) {
        if (helpers.isArray(label)) {
          return {
            w: helpers.longestText(ctx, ctx.font, label),
            h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
          };
        }
        return {
          w: ctx.measureText(label).width,
          h: fontSize
        };
      }
      function determineLimits(angle, pos, size, min2, max2) {
        if (angle === min2 || angle === max2) {
          return {
            start: pos - size / 2,
            end: pos + size / 2
          };
        } else if (angle < min2 || angle > max2) {
          return {
            start: pos - size - 5,
            end: pos
          };
        }
        return {
          start: pos,
          end: pos + size + 5
        };
      }
      function fitWithPointLabels(scale) {
        var plFont = getPointLabelFontOptions(scale);
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        var furthestLimits = {
          r: scale.width,
          l: 0,
          t: scale.height,
          b: 0
        };
        var furthestAngles = {};
        var i, textSize, pointPosition;
        scale.ctx.font = plFont.font;
        scale._pointLabelSizes = [];
        var valueCount = getValueCount(scale);
        for (i = 0; i < valueCount; i++) {
          pointPosition = scale.getPointPosition(i, largestPossibleRadius);
          textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || "");
          scale._pointLabelSizes[i] = textSize;
          var angleRadians = scale.getIndexAngle(i);
          var angle = helpers.toDegrees(angleRadians) % 360;
          var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
          if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
          }
          if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
          }
          if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
          }
          if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
          }
        }
        scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
      }
      function fit(scale) {
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        scale.drawingArea = Math.round(largestPossibleRadius);
        scale.setCenterPoint(0, 0, 0, 0);
      }
      function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
          return "center";
        } else if (angle < 180) {
          return "left";
        }
        return "right";
      }
      function fillText(ctx, text, position, fontSize) {
        if (helpers.isArray(text)) {
          var y = position.y;
          var spacing = 1.5 * fontSize;
          for (var i = 0; i < text.length; ++i) {
            ctx.fillText(text[i], position.x, y);
            y += spacing;
          }
        } else {
          ctx.fillText(text, position.x, position.y);
        }
      }
      function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
          position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
          position.y -= textSize.h;
        }
      }
      function drawPointLabels(scale) {
        var ctx = scale.ctx;
        var opts = scale.options;
        var angleLineOpts = opts.angleLines;
        var pointLabelOpts = opts.pointLabels;
        ctx.lineWidth = angleLineOpts.lineWidth;
        ctx.strokeStyle = angleLineOpts.color;
        var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
        var plFont = getPointLabelFontOptions(scale);
        ctx.textBaseline = "top";
        for (var i = getValueCount(scale) - 1; i >= 0; i--) {
          if (angleLineOpts.display) {
            var outerPosition = scale.getPointPosition(i, outerDistance);
            ctx.beginPath();
            ctx.moveTo(scale.xCenter, scale.yCenter);
            ctx.lineTo(outerPosition.x, outerPosition.y);
            ctx.stroke();
            ctx.closePath();
          }
          if (pointLabelOpts.display) {
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
            var pointLabelFontColor = helpers.valueAtIndexOrDefault(pointLabelOpts.fontColor, i, globalDefaults.defaultFontColor);
            ctx.font = plFont.font;
            ctx.fillStyle = pointLabelFontColor;
            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers.toDegrees(angleRadians);
            ctx.textAlign = getTextAlignForAngle(angle);
            adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
            fillText(ctx, scale.pointLabels[i] || "", pointLabelPosition, plFont.size);
          }
        }
      }
      function drawRadiusLine(scale, gridLineOpts, radius, index) {
        var ctx = scale.ctx;
        ctx.strokeStyle = helpers.valueAtIndexOrDefault(gridLineOpts.color, index - 1);
        ctx.lineWidth = helpers.valueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
        if (scale.options.gridLines.circular) {
          ctx.beginPath();
          ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
          ctx.closePath();
          ctx.stroke();
        } else {
          var valueCount = getValueCount(scale);
          if (valueCount === 0) {
            return;
          }
          ctx.beginPath();
          var pointPosition = scale.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);
          for (var i = 1; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
          }
          ctx.closePath();
          ctx.stroke();
        }
      }
      function numberOrZero(param) {
        return helpers.isNumber(param) ? param : 0;
      }
      var LinearRadialScale = Chart.LinearScaleBase.extend({
        setDimensions: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          me.width = me.maxWidth;
          me.height = me.maxHeight;
          me.xCenter = Math.round(me.width / 2);
          me.yCenter = Math.round(me.height / 2);
          var minSize = helpers.min([me.height, me.width]);
          var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var min2 = Number.POSITIVE_INFINITY;
          var max2 = Number.NEGATIVE_INFINITY;
          helpers.each(chart.data.datasets, function(dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
              var meta = chart.getDatasetMeta(datasetIndex);
              helpers.each(dataset.data, function(rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                  return;
                }
                min2 = Math.min(value, min2);
                max2 = Math.max(value, max2);
              });
            }
          });
          me.min = min2 === Number.POSITIVE_INFINITY ? 0 : min2;
          me.max = max2 === Number.NEGATIVE_INFINITY ? 0 : max2;
          me.handleTickRangeOptions();
        },
        getTickLimit: function() {
          var tickOpts = this.options.ticks;
          var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
        },
        convertTicksToLabels: function() {
          var me = this;
          Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
          me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
        },
        getLabelForIndex: function(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function() {
          if (this.options.pointLabels.display) {
            fitWithPointLabels(this);
          } else {
            fit(this);
          }
        },
        /**
         * Set radius reductions and determine new radius and center point
         * @private
         */
        setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
          var me = this;
          var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
          var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
          var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
          var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
          radiusReductionLeft = numberOrZero(radiusReductionLeft);
          radiusReductionRight = numberOrZero(radiusReductionRight);
          radiusReductionTop = numberOrZero(radiusReductionTop);
          radiusReductionBottom = numberOrZero(radiusReductionBottom);
          me.drawingArea = Math.min(
            Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
            Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)
          );
          me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
          var me = this;
          var maxRight = me.width - rightMovement - me.drawingArea;
          var maxLeft = leftMovement + me.drawingArea;
          var maxTop = topMovement + me.drawingArea;
          var maxBottom = me.height - bottomMovement - me.drawingArea;
          me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
          me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
        },
        getIndexAngle: function(index) {
          var angleMultiplier = Math.PI * 2 / getValueCount(this);
          var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
          var startAngleRadians = startAngle * Math.PI * 2 / 360;
          return index * angleMultiplier + startAngleRadians;
        },
        getDistanceFromCenterForValue: function(value) {
          var me = this;
          if (value === null) {
            return 0;
          }
          var scalingFactor = me.drawingArea / (me.max - me.min);
          if (me.options.ticks.reverse) {
            return (me.max - value) * scalingFactor;
          }
          return (value - me.min) * scalingFactor;
        },
        getPointPosition: function(index, distanceFromCenter) {
          var me = this;
          var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
          return {
            x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
            y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
          };
        },
        getPointPositionForValue: function(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function() {
          var me = this;
          var min2 = me.min;
          var max2 = me.max;
          return me.getPointPositionForValue(
            0,
            me.beginAtZero ? 0 : min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0
          );
        },
        draw: function() {
          var me = this;
          var opts = me.options;
          var gridLineOpts = opts.gridLines;
          var tickOpts = opts.ticks;
          var valueOrDefault = helpers.valueOrDefault;
          if (opts.display) {
            var ctx = me.ctx;
            var startAngle = this.getIndexAngle(0);
            var tickFontSize = valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            var tickFontStyle = valueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
            var tickFontFamily = valueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
            helpers.each(me.ticks, function(label, index) {
              if (index > 0 || tickOpts.reverse) {
                var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                if (gridLineOpts.display && index !== 0) {
                  drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                }
                if (tickOpts.display) {
                  var tickFontColor = valueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                  ctx.font = tickLabelFont;
                  ctx.save();
                  ctx.translate(me.xCenter, me.yCenter);
                  ctx.rotate(startAngle);
                  if (tickOpts.showLabelBackdrop) {
                    var labelWidth = ctx.measureText(label).width;
                    ctx.fillStyle = tickOpts.backdropColor;
                    ctx.fillRect(
                      -labelWidth / 2 - tickOpts.backdropPaddingX,
                      -yCenterOffset - tickFontSize / 2 - tickOpts.backdropPaddingY,
                      labelWidth + tickOpts.backdropPaddingX * 2,
                      tickFontSize + tickOpts.backdropPaddingY * 2
                    );
                  }
                  ctx.textAlign = "center";
                  ctx.textBaseline = "middle";
                  ctx.fillStyle = tickFontColor;
                  ctx.fillText(label, 0, -yCenterOffset);
                  ctx.restore();
                }
              }
            });
            if (opts.angleLines.display || opts.pointLabels.display) {
              drawPointLabels(me);
            }
          }
        }
      });
      scaleService.registerScaleType("radialLinear", LinearRadialScale, defaultConfig);
    };
  }
});

// node_modules/moment/dist/moment.js
var moment_exports = {};
__export(moment_exports, {
  default: () => moment_default
});
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = /* @__PURE__ */ new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i, length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
function invalidDate() {
  return this._invalidDate;
}
function ordinal(number) {
  return this._ordinal.replace("%d", number);
}
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
        value,
        mom.month(),
        daysInMonth(value, mom.month())
      );
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
function mod(n, x) {
  return (n % x + x) % x;
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i = 0; i < 12; i++) {
    shortPieces[i] = regexEscape(shortPieces[i]);
    longPieces[i] = regexEscape(longPieces[i]);
  }
  for (i = 0; i < 24; i++) {
    mixedPieces[i] = regexEscape(mixedPieces[i]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split("-");
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return name.match("^[^/\\\\]*$") != null;
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = __require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
function configFromISO(config) {
  var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
    return h * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = /* @__PURE__ */ new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(
        string.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
  minutes2 * 6e4 + // 1000 * 60
  hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
function offsetFromString(matcher, string) {
  var matches = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
function createDuration(input, key) {
  var duration = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
      // the millisecond decimal point is included in the match
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(
      createLocal(duration.from),
      createLocal(duration.to)
    );
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name,
        "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
function localeData() {
  return this._locale;
}
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
function localeEras(m, format2) {
  var i, l, date, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date = hooks(eras[i].since).startOf("day");
        eras[i].since = date.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    namePieces.push(regexEscape(eras[i].name));
    abbrPieces.push(regexEscape(eras[i].abbr));
    narrowPieces.push(regexEscape(eras[i].narrow));
    mixedPieces.push(regexEscape(eras[i].name));
    mixedPieces.push(regexEscape(eras[i].abbr));
    mixedPieces.push(regexEscape(eras[i].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
function getSetDayOfYear(input) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
function get$1(format2, index, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index, field) {
  if (isNumber(format2)) {
    index = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index != null) {
    return get$1(format2, index, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index != null) {
    return get$1(format2, (index + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index) {
  return listMonthsImpl(format2, index, "months");
}
function listMonthsShort(format2, index) {
  return listMonthsImpl(format2, index, "monthsShort");
}
function listWeekdays(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
}
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
function weeks() {
  return absFloor(this.days() / 7);
}
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var hookCallback, some, momentProperties, updateInProgress, deprecations, keys, defaultCalendar, formattingTokens, localFormattingTokens, formatFunctions, formatTokenFunctions, defaultLongDateFormat, defaultInvalidDate, defaultOrdinal, defaultDayOfMonthOrdinalParse, defaultRelativeTime, aliases, priorities, match1, match2, match3, match4, match6, match1to2, match3to4, match5to6, match1to3, match1to4, match1to6, matchUnsigned, matchSigned, matchOffset, matchShortOffset, matchTimestamp, matchWord, regexes, tokens, YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND, WEEK, WEEKDAY, indexOf, defaultLocaleMonths, defaultLocaleMonthsShort, MONTHS_IN_FORMAT, defaultMonthsShortRegex, defaultMonthsRegex, getSetYear, defaultLocaleWeek, defaultLocaleWeekdays, defaultLocaleWeekdaysShort, defaultLocaleWeekdaysMin, defaultWeekdaysRegex, defaultWeekdaysShortRegex, defaultWeekdaysMinRegex, defaultLocaleMeridiemParse, getSetHour, baseConfig, locales, localeFamilies, globalLocale, extendedIsoRegex, basicIsoRegex, tzRegex, isoDates, isoTimes, aspNetJsonRegex, rfc2822, obsOffsets, prototypeMin, prototypeMax, now, ordering, chunkOffset, aspNetRegex, isoRegex, add, subtract, lang, MS_PER_SECOND, MS_PER_MINUTE, MS_PER_HOUR, MS_PER_400_YEARS, getSetDayOfMonth, getSetMinute, getSetSecond, token, getSetMillisecond, proto, proto$1, mathAbs, asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asQuarters, asYears, milliseconds, seconds, minutes, hours, days, months, years, round, thresholds, abs$1, proto$2, moment_default;
var init_moment = __esm({
  "node_modules/moment/dist/moment.js"() {
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    momentProperties = hooks.momentProperties = [];
    updateInProgress = false;
    deprecations = {};
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    formatFunctions = {};
    formatTokenFunctions = {};
    defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    defaultInvalidDate = "Invalid date";
    defaultOrdinal = "%d";
    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    aliases = {};
    priorities = {};
    match1 = /\d/;
    match2 = /\d\d/;
    match3 = /\d{3}/;
    match4 = /\d{4}/;
    match6 = /[+-]?\d{6}/;
    match1to2 = /\d\d?/;
    match3to4 = /\d\d\d\d?/;
    match5to6 = /\d\d\d\d\d\d?/;
    match1to3 = /\d{1,3}/;
    match1to4 = /\d{1,4}/;
    match1to6 = /[+-]?\d{1,6}/;
    matchUnsigned = /\d+/;
    matchSigned = /[+-]?\d+/;
    matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    regexes = {};
    tokens = {};
    YEAR = 0;
    MONTH = 1;
    DATE = 2;
    HOUR = 3;
    MINUTE = 4;
    SECOND = 5;
    MILLISECOND = 6;
    WEEK = 7;
    WEEKDAY = 8;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
      var month = config._locale.monthsParse(input, token2, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    );
    defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    defaultMonthsShortRegex = matchWord;
    defaultMonthsRegex = matchWord;
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    getSetYear = makeGetSet("FullYear", true);
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
      var weekday = config._locale.weekdaysParse(input, token2, config._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
      week[token2] = toInt(input);
    });
    defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
    defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
    defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
    defaultWeekdaysRegex = matchWord;
    defaultWeekdaysShortRegex = matchWord;
    defaultWeekdaysMinRegex = matchWord;
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    getSetHour = makeGetSet("Hours", true);
    baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    locales = {};
    localeFamilies = {};
    extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ];
    isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ];
    aspNetJsonRegex = /^\/?Date\((-?\d+)/i;
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config) {
        config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
      }
    );
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });
    chunkOffset = /([\+\-]|\d\d)/gi;
    hooks.updateOffset = function() {
    };
    aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    add = createAdder(1, "add");
    subtract = createAdder(-1, "subtract");
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    MS_PER_SECOND = 1e3;
    MS_PER_MINUTE = 60 * MS_PER_SECOND;
    MS_PER_HOUR = 60 * MS_PER_MINUTE;
    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config, token2) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    mathAbs = Math.abs;
    asMilliseconds = makeAs("ms");
    asSeconds = makeAs("s");
    asMinutes = makeAs("m");
    asHours = makeAs("h");
    asDays = makeAs("d");
    asWeeks = makeAs("w");
    asMonths = makeAs("M");
    asQuarters = makeAs("Q");
    asYears = makeAs("y");
    milliseconds = makeGetter("milliseconds");
    seconds = makeGetter("seconds");
    minutes = makeGetter("minutes");
    hours = makeGetter("hours");
    days = makeGetter("days");
    months = makeGetter("months");
    years = makeGetter("years");
    round = Math.round;
    thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    abs$1 = Math.abs;
    proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
      config._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    moment_default = hooks;
  }
});

// node_modules/chart.js/src/scales/scale.time.js
var require_scale_time = __commonJS({
  "node_modules/chart.js/src/scales/scale.time.js"(exports, module2) {
    "use strict";
    var moment = (init_moment(), __toCommonJS(moment_exports));
    moment = typeof moment === "function" ? moment : window.moment;
    var defaults2 = require_core_defaults();
    var helpers = require_helpers();
    var Scale = require_core_scale();
    var scaleService = require_core_scaleService();
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var INTERVALS = {
      millisecond: {
        common: true,
        size: 1,
        steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
      },
      second: {
        common: true,
        size: 1e3,
        steps: [1, 2, 5, 10, 15, 30]
      },
      minute: {
        common: true,
        size: 6e4,
        steps: [1, 2, 5, 10, 15, 30]
      },
      hour: {
        common: true,
        size: 36e5,
        steps: [1, 2, 3, 6, 12]
      },
      day: {
        common: true,
        size: 864e5,
        steps: [1, 2, 5]
      },
      week: {
        common: false,
        size: 6048e5,
        steps: [1, 2, 3, 4]
      },
      month: {
        common: true,
        size: 2628e6,
        steps: [1, 2, 3]
      },
      quarter: {
        common: false,
        size: 7884e6,
        steps: [1, 2, 3, 4]
      },
      year: {
        common: true,
        size: 3154e7
      }
    };
    var UNITS = Object.keys(INTERVALS);
    function sorter(a, b) {
      return a - b;
    }
    function arrayUnique(items) {
      var hash = {};
      var out = [];
      var i, ilen, item;
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        item = items[i];
        if (!hash[item]) {
          hash[item] = true;
          out.push(item);
        }
      }
      return out;
    }
    function buildLookupTable(timestamps, min2, max2, distribution) {
      if (distribution === "linear" || !timestamps.length) {
        return [
          { time: min2, pos: 0 },
          { time: max2, pos: 1 }
        ];
      }
      var table = [];
      var items = [min2];
      var i, ilen, prev, curr, next;
      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
        curr = timestamps[i];
        if (curr > min2 && curr < max2) {
          items.push(curr);
        }
      }
      items.push(max2);
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        next = items[i + 1];
        prev = items[i - 1];
        curr = items[i];
        if (prev === void 0 || next === void 0 || Math.round((next + prev) / 2) !== curr) {
          table.push({ time: curr, pos: i / (ilen - 1) });
        }
      }
      return table;
    }
    function lookup(table, key, value) {
      var lo = 0;
      var hi = table.length - 1;
      var mid, i0, i1;
      while (lo >= 0 && lo <= hi) {
        mid = lo + hi >> 1;
        i0 = table[mid - 1] || null;
        i1 = table[mid];
        if (!i0) {
          return { lo: null, hi: i1 };
        } else if (i1[key] < value) {
          lo = mid + 1;
        } else if (i0[key] > value) {
          hi = mid - 1;
        } else {
          return { lo: i0, hi: i1 };
        }
      }
      return { lo: i1, hi: null };
    }
    function interpolate(table, skey, sval, tkey) {
      var range = lookup(table, skey, sval);
      var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
      var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
      var span = next[skey] - prev[skey];
      var ratio = span ? (sval - prev[skey]) / span : 0;
      var offset2 = (next[tkey] - prev[tkey]) * ratio;
      return prev[tkey] + offset2;
    }
    function momentify(value, options) {
      var parser = options.parser;
      var format2 = options.parser || options.format;
      if (typeof parser === "function") {
        return parser(value);
      }
      if (typeof value === "string" && typeof format2 === "string") {
        return moment(value, format2);
      }
      if (!(value instanceof moment)) {
        value = moment(value);
      }
      if (value.isValid()) {
        return value;
      }
      if (typeof format2 === "function") {
        return format2(value);
      }
      return value;
    }
    function parse(input, scale) {
      if (helpers.isNullOrUndef(input)) {
        return null;
      }
      var options = scale.options.time;
      var value = momentify(scale.getRightValue(input), options);
      if (!value.isValid()) {
        return null;
      }
      if (options.round) {
        value.startOf(options.round);
      }
      return value.valueOf();
    }
    function determineStepSize(min2, max2, unit, capacity) {
      var range = max2 - min2;
      var interval = INTERVALS[unit];
      var milliseconds2 = interval.size;
      var steps = interval.steps;
      var i, ilen, factor;
      if (!steps) {
        return Math.ceil(range / (capacity * milliseconds2));
      }
      for (i = 0, ilen = steps.length; i < ilen; ++i) {
        factor = steps[i];
        if (Math.ceil(range / (milliseconds2 * factor)) <= capacity) {
          break;
        }
      }
      return factor;
    }
    function determineUnitForAutoTicks(minUnit, min2, max2, capacity) {
      var ilen = UNITS.length;
      var i, interval, factor;
      for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
        interval = INTERVALS[UNITS[i]];
        factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;
        if (interval.common && Math.ceil((max2 - min2) / (factor * interval.size)) <= capacity) {
          return UNITS[i];
        }
      }
      return UNITS[ilen - 1];
    }
    function determineUnitForFormatting(ticks, minUnit, min2, max2) {
      var duration = moment.duration(moment(max2).diff(moment(min2)));
      var ilen = UNITS.length;
      var i, unit;
      for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {
        unit = UNITS[i];
        if (INTERVALS[unit].common && duration.as(unit) >= ticks.length) {
          return unit;
        }
      }
      return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }
    function determineMajorUnit(unit) {
      for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
        if (INTERVALS[UNITS[i]].common) {
          return UNITS[i];
        }
      }
    }
    function generate(min2, max2, capacity, options) {
      var timeOpts = options.time;
      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min2, max2, capacity);
      var major = determineMajorUnit(minor);
      var stepSize = helpers.valueOrDefault(timeOpts.stepSize, timeOpts.unitStepSize);
      var weekday = minor === "week" ? timeOpts.isoWeekday : false;
      var majorTicksEnabled = options.ticks.major.enabled;
      var interval = INTERVALS[minor];
      var first = moment(min2);
      var last = moment(max2);
      var ticks = [];
      var time;
      if (!stepSize) {
        stepSize = determineStepSize(min2, max2, minor, capacity);
      }
      if (weekday) {
        first = first.isoWeekday(weekday);
        last = last.isoWeekday(weekday);
      }
      first = first.startOf(weekday ? "day" : minor);
      last = last.startOf(weekday ? "day" : minor);
      if (last < max2) {
        last.add(1, minor);
      }
      time = moment(first);
      if (majorTicksEnabled && major && !weekday && !timeOpts.round) {
        time.startOf(major);
        time.add(~~((first - time) / (interval.size * stepSize)) * stepSize, minor);
      }
      for (; time < last; time.add(stepSize, minor)) {
        ticks.push(+time);
      }
      ticks.push(+time);
      return ticks;
    }
    function computeOffsets(table, ticks, min2, max2, options) {
      var left = 0;
      var right = 0;
      var upper, lower;
      if (options.offset && ticks.length) {
        if (!options.time.min) {
          upper = ticks.length > 1 ? ticks[1] : max2;
          lower = ticks[0];
          left = (interpolate(table, "time", upper, "pos") - interpolate(table, "time", lower, "pos")) / 2;
        }
        if (!options.time.max) {
          upper = ticks[ticks.length - 1];
          lower = ticks.length > 1 ? ticks[ticks.length - 2] : min2;
          right = (interpolate(table, "time", upper, "pos") - interpolate(table, "time", lower, "pos")) / 2;
        }
      }
      return { left, right };
    }
    function ticksFromTimestamps(values, majorUnit) {
      var ticks = [];
      var i, ilen, value, major;
      for (i = 0, ilen = values.length; i < ilen; ++i) {
        value = values[i];
        major = majorUnit ? value === +moment(value).startOf(majorUnit) : false;
        ticks.push({
          value,
          major
        });
      }
      return ticks;
    }
    function determineLabelFormat(data, timeOpts) {
      var i, momentDate, hasTime;
      var ilen = data.length;
      for (i = 0; i < ilen; i++) {
        momentDate = momentify(data[i], timeOpts);
        if (momentDate.millisecond() !== 0) {
          return "MMM D, YYYY h:mm:ss.SSS a";
        }
        if (momentDate.second() !== 0 || momentDate.minute() !== 0 || momentDate.hour() !== 0) {
          hasTime = true;
        }
      }
      if (hasTime) {
        return "MMM D, YYYY h:mm:ss a";
      }
      return "MMM D, YYYY";
    }
    module2.exports = function() {
      var defaultConfig = {
        position: "bottom",
        /**
         * Data distribution along the scale:
         * - 'linear': data are spread according to their time (distances can vary),
         * - 'series': data are spread at the same distance from each other.
         * @see https://github.com/chartjs/Chart.js/pull/4507
         * @since 2.7.0
         */
        distribution: "linear",
        /**
         * Scale boundary strategy (bypassed by min/max time options)
         * - `data`: make sure data are fully visible, ticks outside are removed
         * - `ticks`: make sure ticks are fully visible, data outside are truncated
         * @see https://github.com/chartjs/Chart.js/pull/4556
         * @since 2.7.0
         */
        bounds: "data",
        time: {
          parser: false,
          // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
          format: false,
          // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
          unit: false,
          // false == automatic or override with week, month, year, etc.
          round: false,
          // none, or override with week, month, year, etc.
          displayFormat: false,
          // DEPRECATED
          isoWeekday: false,
          // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
          minUnit: "millisecond",
          // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
          displayFormats: {
            millisecond: "h:mm:ss.SSS a",
            // 11:20:01.123 AM,
            second: "h:mm:ss a",
            // 11:20:01 AM
            minute: "h:mm a",
            // 11:20 AM
            hour: "hA",
            // 5PM
            day: "MMM D",
            // Sep 4
            week: "ll",
            // Week 46, or maybe "[W]WW - YYYY" ?
            month: "MMM YYYY",
            // Sept 2015
            quarter: "[Q]Q - YYYY",
            // Q3
            year: "YYYY"
            // 2015
          }
        },
        ticks: {
          autoSkip: false,
          /**
           * Ticks generation input values:
           * - 'auto': generates "optimal" ticks based on scale size and time options.
           * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
           * - 'labels': generates ticks from user given `data.labels` values ONLY.
           * @see https://github.com/chartjs/Chart.js/pull/4507
           * @since 2.7.0
           */
          source: "auto",
          major: {
            enabled: false
          }
        }
      };
      var TimeScale = Scale.extend({
        initialize: function() {
          if (!moment) {
            throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");
          }
          this.mergeTicksOptions();
          Scale.prototype.initialize.call(this);
        },
        update: function() {
          var me = this;
          var options = me.options;
          if (options.time && options.time.format) {
            console.warn("options.time.format is deprecated and replaced by options.time.parser.");
          }
          return Scale.prototype.update.apply(me, arguments);
        },
        /**
         * Allows data to be referenced via 't' attribute
         */
        getRightValue: function(rawValue) {
          if (rawValue && rawValue.t !== void 0) {
            rawValue = rawValue.t;
          }
          return Scale.prototype.getRightValue.call(this, rawValue);
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var timeOpts = me.options.time;
          var unit = timeOpts.unit || "day";
          var min2 = MAX_INTEGER;
          var max2 = MIN_INTEGER;
          var timestamps = [];
          var datasets = [];
          var labels = [];
          var i, j, ilen, jlen, data, timestamp;
          for (i = 0, ilen = chart.data.labels.length; i < ilen; ++i) {
            labels.push(parse(chart.data.labels[i], me));
          }
          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              data = chart.data.datasets[i].data;
              if (helpers.isObject(data[0])) {
                datasets[i] = [];
                for (j = 0, jlen = data.length; j < jlen; ++j) {
                  timestamp = parse(data[j], me);
                  timestamps.push(timestamp);
                  datasets[i][j] = timestamp;
                }
              } else {
                timestamps.push.apply(timestamps, labels);
                datasets[i] = labels.slice(0);
              }
            } else {
              datasets[i] = [];
            }
          }
          if (labels.length) {
            labels = arrayUnique(labels).sort(sorter);
            min2 = Math.min(min2, labels[0]);
            max2 = Math.max(max2, labels[labels.length - 1]);
          }
          if (timestamps.length) {
            timestamps = arrayUnique(timestamps).sort(sorter);
            min2 = Math.min(min2, timestamps[0]);
            max2 = Math.max(max2, timestamps[timestamps.length - 1]);
          }
          min2 = parse(timeOpts.min, me) || min2;
          max2 = parse(timeOpts.max, me) || max2;
          min2 = min2 === MAX_INTEGER ? +moment().startOf(unit) : min2;
          max2 = max2 === MIN_INTEGER ? +moment().endOf(unit) + 1 : max2;
          me.min = Math.min(min2, max2);
          me.max = Math.max(min2 + 1, max2);
          me._horizontal = me.isHorizontal();
          me._table = [];
          me._timestamps = {
            data: timestamps,
            datasets,
            labels
          };
        },
        buildTicks: function() {
          var me = this;
          var min2 = me.min;
          var max2 = me.max;
          var options = me.options;
          var timeOpts = options.time;
          var timestamps = [];
          var ticks = [];
          var i, ilen, timestamp;
          switch (options.ticks.source) {
            case "data":
              timestamps = me._timestamps.data;
              break;
            case "labels":
              timestamps = me._timestamps.labels;
              break;
            case "auto":
            default:
              timestamps = generate(min2, max2, me.getLabelCapacity(min2), options);
          }
          if (options.bounds === "ticks" && timestamps.length) {
            min2 = timestamps[0];
            max2 = timestamps[timestamps.length - 1];
          }
          min2 = parse(timeOpts.min, me) || min2;
          max2 = parse(timeOpts.max, me) || max2;
          for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
            timestamp = timestamps[i];
            if (timestamp >= min2 && timestamp <= max2) {
              ticks.push(timestamp);
            }
          }
          me.min = min2;
          me.max = max2;
          me._unit = timeOpts.unit || determineUnitForFormatting(ticks, timeOpts.minUnit, me.min, me.max);
          me._majorUnit = determineMajorUnit(me._unit);
          me._table = buildLookupTable(me._timestamps.data, min2, max2, options.distribution);
          me._offsets = computeOffsets(me._table, ticks, min2, max2, options);
          me._labelFormat = determineLabelFormat(me._timestamps.data, timeOpts);
          return ticksFromTimestamps(ticks, me._majorUnit);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var data = me.chart.data;
          var timeOpts = me.options.time;
          var label = data.labels && index < data.labels.length ? data.labels[index] : "";
          var value = data.datasets[datasetIndex].data[index];
          if (helpers.isObject(value)) {
            label = me.getRightValue(value);
          }
          if (timeOpts.tooltipFormat) {
            return momentify(label, timeOpts).format(timeOpts.tooltipFormat);
          }
          if (typeof label === "string") {
            return label;
          }
          return momentify(label, timeOpts).format(me._labelFormat);
        },
        /**
         * Function to format an individual tick mark
         * @private
         */
        tickFormatFunction: function(tick, index, ticks, formatOverride) {
          var me = this;
          var options = me.options;
          var time = tick.valueOf();
          var formats = options.time.displayFormats;
          var minorFormat = formats[me._unit];
          var majorUnit = me._majorUnit;
          var majorFormat = formats[majorUnit];
          var majorTime = tick.clone().startOf(majorUnit).valueOf();
          var majorTickOpts = options.ticks.major;
          var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;
          var label = tick.format(formatOverride ? formatOverride : major ? majorFormat : minorFormat);
          var tickOpts = major ? majorTickOpts : options.ticks.minor;
          var formatter = helpers.valueOrDefault(tickOpts.callback, tickOpts.userCallback);
          return formatter ? formatter(label, index, ticks) : label;
        },
        convertTicksToLabels: function(ticks) {
          var labels = [];
          var i, ilen;
          for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            labels.push(this.tickFormatFunction(moment(ticks[i].value), i, ticks));
          }
          return labels;
        },
        /**
         * @private
         */
        getPixelForOffset: function(time) {
          var me = this;
          var size = me._horizontal ? me.width : me.height;
          var start = me._horizontal ? me.left : me.top;
          var pos = interpolate(me._table, "time", time, "pos");
          return start + size * (me._offsets.left + pos) / (me._offsets.left + 1 + me._offsets.right);
        },
        getPixelForValue: function(value, index, datasetIndex) {
          var me = this;
          var time = null;
          if (index !== void 0 && datasetIndex !== void 0) {
            time = me._timestamps.datasets[datasetIndex][index];
          }
          if (time === null) {
            time = parse(value, me);
          }
          if (time !== null) {
            return me.getPixelForOffset(time);
          }
        },
        getPixelForTick: function(index) {
          var ticks = this.getTicks();
          return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var size = me._horizontal ? me.width : me.height;
          var start = me._horizontal ? me.left : me.top;
          var pos = (size ? (pixel - start) / size : 0) * (me._offsets.left + 1 + me._offsets.left) - me._offsets.right;
          var time = interpolate(me._table, "pos", pos, "time");
          return moment(time);
        },
        /**
         * Crude approximation of what the label width might be
         * @private
         */
        getLabelWidth: function(label) {
          var me = this;
          var ticksOpts = me.options.ticks;
          var tickLabelWidth = me.ctx.measureText(label).width;
          var angle = helpers.toRadians(ticksOpts.maxRotation);
          var cosRotation = Math.cos(angle);
          var sinRotation = Math.sin(angle);
          var tickFontSize = helpers.valueOrDefault(ticksOpts.fontSize, defaults2.global.defaultFontSize);
          return tickLabelWidth * cosRotation + tickFontSize * sinRotation;
        },
        /**
         * @private
         */
        getLabelCapacity: function(exampleTime) {
          var me = this;
          var formatOverride = me.options.time.displayFormats.millisecond;
          var exampleLabel = me.tickFormatFunction(moment(exampleTime), 0, [], formatOverride);
          var tickLabelWidth = me.getLabelWidth(exampleLabel);
          var innerWidth = me.isHorizontal() ? me.width : me.height;
          var capacity = Math.floor(innerWidth / tickLabelWidth);
          return capacity > 0 ? capacity : 1;
        }
      });
      scaleService.registerScaleType("time", TimeScale, defaultConfig);
    };
  }
});

// node_modules/chart.js/src/controllers/controller.bar.js
var require_controller_bar = __commonJS({
  "node_modules/chart.js/src/controllers/controller.bar.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("bar", {
      hover: {
        mode: "label"
      },
      scales: {
        xAxes: [{
          type: "category",
          // Specific to Bar Controller
          categoryPercentage: 0.8,
          barPercentage: 0.9,
          // offset settings
          offset: true,
          // grid line settings
          gridLines: {
            offsetGridLines: true
          }
        }],
        yAxes: [{
          type: "linear"
        }]
      }
    });
    defaults2._set("horizontalBar", {
      hover: {
        mode: "index",
        axis: "y"
      },
      scales: {
        xAxes: [{
          type: "linear",
          position: "bottom"
        }],
        yAxes: [{
          position: "left",
          type: "category",
          // Specific to Horizontal Bar Controller
          categoryPercentage: 0.8,
          barPercentage: 0.9,
          // offset settings
          offset: true,
          // grid line settings
          gridLines: {
            offsetGridLines: true
          }
        }]
      },
      elements: {
        rectangle: {
          borderSkipped: "left"
        }
      },
      tooltips: {
        callbacks: {
          title: function(item, data) {
            var title = "";
            if (item.length > 0) {
              if (item[0].yLabel) {
                title = item[0].yLabel;
              } else if (data.labels.length > 0 && item[0].index < data.labels.length) {
                title = data.labels[item[0].index];
              }
            }
            return title;
          },
          label: function(item, data) {
            var datasetLabel = data.datasets[item.datasetIndex].label || "";
            return datasetLabel + ": " + item.xLabel;
          }
        },
        mode: "index",
        axis: "y"
      }
    });
    function computeMinSampleSize(scale, pixels) {
      var min2 = scale.isHorizontal() ? scale.width : scale.height;
      var ticks = scale.getTicks();
      var prev, curr, i, ilen;
      for (i = 1, ilen = pixels.length; i < ilen; ++i) {
        min2 = Math.min(min2, pixels[i] - pixels[i - 1]);
      }
      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        curr = scale.getPixelForTick(i);
        min2 = i > 0 ? Math.min(min2, curr - prev) : min2;
        prev = curr;
      }
      return min2;
    }
    function computeFitCategoryTraits(index, ruler, options) {
      var thickness = options.barThickness;
      var count = ruler.stackCount;
      var curr = ruler.pixels[index];
      var size, ratio;
      if (helpers.isNullOrUndef(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
      } else {
        size = thickness * count;
        ratio = 1;
      }
      return {
        chunk: size / count,
        ratio,
        start: curr - size / 2
      };
    }
    function computeFlexCategoryTraits(index, ruler, options) {
      var pixels = ruler.pixels;
      var curr = pixels[index];
      var prev = index > 0 ? pixels[index - 1] : null;
      var next = index < pixels.length - 1 ? pixels[index + 1] : null;
      var percent = options.categoryPercentage;
      var start, size;
      if (prev === null) {
        prev = curr - (next === null ? ruler.end - curr : next - curr);
      }
      if (next === null) {
        next = curr + curr - prev;
      }
      start = curr - (curr - prev) / 2 * percent;
      size = (next - prev) / 2 * percent;
      return {
        chunk: size / ruler.stackCount,
        ratio: options.barPercentage,
        start
      };
    }
    module2.exports = function(Chart) {
      Chart.controllers.bar = Chart.DatasetController.extend({
        dataElementType: elements.Rectangle,
        initialize: function() {
          var me = this;
          var meta;
          Chart.DatasetController.prototype.initialize.apply(me, arguments);
          meta = me.getMeta();
          meta.stack = me.getDataset().stack;
          meta.bar = true;
        },
        update: function(reset) {
          var me = this;
          var rects = me.getMeta().data;
          var i, ilen;
          me._ruler = me.getRuler();
          for (i = 0, ilen = rects.length; i < ilen; ++i) {
            me.updateElement(rects[i], i, reset);
          }
        },
        updateElement: function(rectangle, index, reset) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          var custom = rectangle.custom || {};
          var rectangleOptions = chart.options.elements.rectangle;
          rectangle._xScale = me.getScaleForId(meta.xAxisID);
          rectangle._yScale = me.getScaleForId(meta.yAxisID);
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          rectangle._model = {
            datasetLabel: dataset.label,
            label: chart.data.labels[index],
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),
            borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)
          };
          me.updateElementGeometry(rectangle, index, reset);
          rectangle.pivot();
        },
        /**
         * @private
         */
        updateElementGeometry: function(rectangle, index, reset) {
          var me = this;
          var model = rectangle._model;
          var vscale = me.getValueScale();
          var base = vscale.getBasePixel();
          var horizontal = vscale.isHorizontal();
          var ruler = me._ruler || me.getRuler();
          var vpixels = me.calculateBarValuePixels(me.index, index);
          var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);
          model.horizontal = horizontal;
          model.base = reset ? base : vpixels.base;
          model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
          model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
          model.height = horizontal ? ipixels.size : void 0;
          model.width = horizontal ? void 0 : ipixels.size;
        },
        /**
         * @private
         */
        getValueScaleId: function() {
          return this.getMeta().yAxisID;
        },
        /**
         * @private
         */
        getIndexScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        getValueScale: function() {
          return this.getScaleForId(this.getValueScaleId());
        },
        /**
         * @private
         */
        getIndexScale: function() {
          return this.getScaleForId(this.getIndexScaleId());
        },
        /**
         * Returns the stacks based on groups and bar visibility.
         * @param {Number} [last] - The dataset index
         * @returns {Array} The stack list
         * @private
         */
        _getStacks: function(last) {
          var me = this;
          var chart = me.chart;
          var scale = me.getIndexScale();
          var stacked = scale.options.stacked;
          var ilen = last === void 0 ? chart.data.datasets.length : last + 1;
          var stacks = [];
          var i, meta;
          for (i = 0; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i);
            if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === void 0 && (meta.stack === void 0 || stacks.indexOf(meta.stack) === -1))) {
              stacks.push(meta.stack);
            }
          }
          return stacks;
        },
        /**
         * Returns the effective number of stacks based on groups and bar visibility.
         * @private
         */
        getStackCount: function() {
          return this._getStacks().length;
        },
        /**
         * Returns the stack index for the given dataset based on groups and bar visibility.
         * @param {Number} [datasetIndex] - The dataset index
         * @param {String} [name] - The stack name to find
         * @returns {Number} The stack index
         * @private
         */
        getStackIndex: function(datasetIndex, name) {
          var stacks = this._getStacks(datasetIndex);
          var index = name !== void 0 ? stacks.indexOf(name) : -1;
          return index === -1 ? stacks.length - 1 : index;
        },
        /**
         * @private
         */
        getRuler: function() {
          var me = this;
          var scale = me.getIndexScale();
          var stackCount = me.getStackCount();
          var datasetIndex = me.index;
          var isHorizontal = scale.isHorizontal();
          var start = isHorizontal ? scale.left : scale.top;
          var end = start + (isHorizontal ? scale.width : scale.height);
          var pixels = [];
          var i, ilen, min2;
          for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
            pixels.push(scale.getPixelForValue(null, i, datasetIndex));
          }
          min2 = helpers.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;
          return {
            min: min2,
            pixels,
            start,
            end,
            stackCount,
            scale
          };
        },
        /**
         * Note: pixel values are not clamped to the scale area.
         * @private
         */
        calculateBarValuePixels: function(datasetIndex, index) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var scale = me.getValueScale();
          var datasets = chart.data.datasets;
          var value = scale.getRightValue(datasets[datasetIndex].data[index]);
          var stacked = scale.options.stacked;
          var stack = meta.stack;
          var start = 0;
          var i, imeta, ivalue, base, head, size;
          if (stacked || stacked === void 0 && stack !== void 0) {
            for (i = 0; i < datasetIndex; ++i) {
              imeta = chart.getDatasetMeta(i);
              if (imeta.bar && imeta.stack === stack && imeta.controller.getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {
                ivalue = scale.getRightValue(datasets[i].data[index]);
                if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {
                  start += ivalue;
                }
              }
            }
          }
          base = scale.getPixelForValue(start);
          head = scale.getPixelForValue(start + value);
          size = (head - base) / 2;
          return {
            size,
            base,
            head,
            center: head + size / 2
          };
        },
        /**
         * @private
         */
        calculateBarIndexPixels: function(datasetIndex, index, ruler) {
          var me = this;
          var options = ruler.scale.options;
          var range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);
          var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
          var center = range.start + range.chunk * stackIndex + range.chunk / 2;
          var size = Math.min(
            helpers.valueOrDefault(options.maxBarThickness, Infinity),
            range.chunk * range.ratio
          );
          return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
          };
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var scale = me.getValueScale();
          var rects = me.getMeta().data;
          var dataset = me.getDataset();
          var ilen = rects.length;
          var i = 0;
          helpers.canvas.clipArea(chart.ctx, chart.chartArea);
          for (; i < ilen; ++i) {
            if (!isNaN(scale.getRightValue(dataset.data[i]))) {
              rects[i].draw();
            }
          }
          helpers.canvas.unclipArea(chart.ctx);
        }
      });
      Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
        /**
         * @private
         */
        getValueScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        getIndexScaleId: function() {
          return this.getMeta().yAxisID;
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.bubble.js
var require_controller_bubble = __commonJS({
  "node_modules/chart.js/src/controllers/controller.bubble.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("bubble", {
      hover: {
        mode: "single"
      },
      scales: {
        xAxes: [{
          type: "linear",
          // bubble should probably use a linear scale by default
          position: "bottom",
          id: "x-axis-0"
          // need an ID so datasets can reference the scale
        }],
        yAxes: [{
          type: "linear",
          position: "left",
          id: "y-axis-0"
        }]
      },
      tooltips: {
        callbacks: {
          title: function() {
            return "";
          },
          label: function(item, data) {
            var datasetLabel = data.datasets[item.datasetIndex].label || "";
            var dataPoint = data.datasets[item.datasetIndex].data[item.index];
            return datasetLabel + ": (" + item.xLabel + ", " + item.yLabel + ", " + dataPoint.r + ")";
          }
        }
      }
    });
    module2.exports = function(Chart) {
      Chart.controllers.bubble = Chart.DatasetController.extend({
        /**
         * @protected
         */
        dataElementType: elements.Point,
        /**
         * @protected
         */
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data;
          helpers.each(points, function(point, index) {
            me.updateElement(point, index, reset);
          });
        },
        /**
         * @protected
         */
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var options = me._resolveElementOptions(point, index);
          var data = me.getDataset().data[index];
          var dsIndex = me.index;
          var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === "object" ? data : NaN, index, dsIndex);
          var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options;
          point._datasetIndex = dsIndex;
          point._index = index;
          point._model = {
            backgroundColor: options.backgroundColor,
            borderColor: options.borderColor,
            borderWidth: options.borderWidth,
            hitRadius: options.hitRadius,
            pointStyle: options.pointStyle,
            rotation: options.rotation,
            radius: reset ? 0 : options.radius,
            skip: custom.skip || isNaN(x) || isNaN(y),
            x,
            y
          };
          point.pivot();
        },
        /**
         * @protected
         */
        setHoverStyle: function(point) {
          var model = point._model;
          var options = point._options;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = helpers.valueOrDefault(options.hoverBackgroundColor, helpers.getHoverColor(options.backgroundColor));
          model.borderColor = helpers.valueOrDefault(options.hoverBorderColor, helpers.getHoverColor(options.borderColor));
          model.borderWidth = helpers.valueOrDefault(options.hoverBorderWidth, options.borderWidth);
          model.radius = options.radius + options.hoverRadius;
        },
        /**
         * @private
         */
        _resolveElementOptions: function(point, index) {
          var me = this;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var dataset = datasets[me.index];
          var custom = point.custom || {};
          var options = chart.options.elements.point;
          var resolve = helpers.options.resolve;
          var data = dataset.data[index];
          var values = {};
          var i, ilen, key;
          var context = {
            chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          var keys2 = [
            "backgroundColor",
            "borderColor",
            "borderWidth",
            "hoverBackgroundColor",
            "hoverBorderColor",
            "hoverBorderWidth",
            "hoverRadius",
            "hitRadius",
            "pointStyle",
            "rotation"
          ];
          for (i = 0, ilen = keys2.length; i < ilen; ++i) {
            key = keys2[i];
            values[key] = resolve([
              custom[key],
              dataset[key],
              options[key]
            ], context, index);
          }
          values.radius = resolve([
            custom.radius,
            data ? data.r : void 0,
            dataset.radius,
            options.radius
          ], context, index);
          return values;
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.doughnut.js
var require_controller_doughnut = __commonJS({
  "node_modules/chart.js/src/controllers/controller.doughnut.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("doughnut", {
      animation: {
        // Boolean - Whether we animate the rotation of the Doughnut
        animateRotate: true,
        // Boolean - Whether we animate scaling the Doughnut from the centre
        animateScale: false
      },
      hover: {
        mode: "single"
      },
      legendCallback: function(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;
        if (datasets.length) {
          for (var i = 0; i < datasets[0].data.length; ++i) {
            text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
            if (labels[i]) {
              text.push(labels[i]);
            }
            text.push("</li>");
          }
        }
        text.push("</ul>");
        return text.join("");
      },
      legend: {
        labels: {
          generateLabels: function(chart) {
            var data = chart.data;
            if (data.labels.length && data.datasets.length) {
              return data.labels.map(function(label, i) {
                var meta = chart.getDatasetMeta(0);
                var ds = data.datasets[0];
                var arc = meta.data[i];
                var custom = arc && arc.custom || {};
                var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                var arcOpts = chart.options.elements.arc;
                var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                return {
                  text: label,
                  fillStyle: fill,
                  strokeStyle: stroke,
                  lineWidth: bw,
                  hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                  // Extra data used for toggling the correct item
                  index: i
                };
              });
            }
            return [];
          }
        },
        onClick: function(e, legendItem) {
          var index = legendItem.index;
          var chart = this.chart;
          var i, ilen, meta;
          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i);
            if (meta.data[index]) {
              meta.data[index].hidden = !meta.data[index].hidden;
            }
          }
          chart.update();
        }
      },
      // The percentage of the chart that we cut out of the middle.
      cutoutPercentage: 50,
      // The rotation of the chart, where the first data arc begins.
      rotation: Math.PI * -0.5,
      // The total circumference of the chart.
      circumference: Math.PI * 2,
      // Need to override these to give a nice default
      tooltips: {
        callbacks: {
          title: function() {
            return "";
          },
          label: function(tooltipItem, data) {
            var dataLabel = data.labels[tooltipItem.index];
            var value = ": " + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
            if (helpers.isArray(dataLabel)) {
              dataLabel = dataLabel.slice();
              dataLabel[0] += value;
            } else {
              dataLabel += value;
            }
            return dataLabel;
          }
        }
      }
    });
    defaults2._set("pie", helpers.clone(defaults2.doughnut));
    defaults2._set("pie", {
      cutoutPercentage: 0
    });
    module2.exports = function(Chart) {
      Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers.noop,
        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
        getRingIndex: function(datasetIndex) {
          var ringIndex = 0;
          for (var j = 0; j < datasetIndex; ++j) {
            if (this.chart.isDatasetVisible(j)) {
              ++ringIndex;
            }
          }
          return ringIndex;
        },
        update: function(reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var arcOpts = opts.elements.arc;
          var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;
          var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;
          var minSize = Math.min(availableWidth, availableHeight);
          var offset2 = { x: 0, y: 0 };
          var meta = me.getMeta();
          var cutoutPercentage = opts.cutoutPercentage;
          var circumference = opts.circumference;
          if (circumference < Math.PI * 2) {
            var startAngle = opts.rotation % (Math.PI * 2);
            startAngle += Math.PI * 2 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
            var endAngle = startAngle + circumference;
            var start = { x: Math.cos(startAngle), y: Math.sin(startAngle) };
            var end = { x: Math.cos(endAngle), y: Math.sin(endAngle) };
            var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2 && Math.PI * 2 <= endAngle;
            var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
            var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
            var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
            var cutout = cutoutPercentage / 100;
            var min2 = { x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout)) };
            var max2 = { x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout)) };
            var size = { width: (max2.x - min2.x) * 0.5, height: (max2.y - min2.y) * 0.5 };
            minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
            offset2 = { x: (max2.x + min2.x) * -0.5, y: (max2.y + min2.y) * -0.5 };
          }
          chart.borderWidth = me.getMaxBorderWidth(meta.data);
          chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
          chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          chart.offsetX = offset2.x * chart.outerRadius;
          chart.offsetY = offset2.y * chart.outerRadius;
          meta.total = me.calculateTotal();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
          me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
          helpers.each(meta.data, function(arc, index) {
            me.updateElement(arc, index, reset);
          });
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var animationOpts = opts.animation;
          var centerX = (chartArea.left + chartArea.right) / 2;
          var centerY = (chartArea.top + chartArea.bottom) / 2;
          var startAngle = opts.rotation;
          var endAngle = opts.rotation;
          var dataset = me.getDataset();
          var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2 * Math.PI));
          var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
          var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
          var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            // Desired view properties
            _model: {
              x: centerX + chart.offsetX,
              y: centerY + chart.offsetY,
              startAngle,
              endAngle,
              circumference,
              outerRadius,
              innerRadius,
              label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
          });
          var model = arc._model;
          var custom = arc.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var elementOpts = this.chart.options.elements.arc;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
          if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
              model.startAngle = opts.rotation;
            } else {
              model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }
            model.endAngle = model.startAngle + model.circumference;
          }
          arc.pivot();
        },
        calculateTotal: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var total = 0;
          var value;
          helpers.each(meta.data, function(element, index) {
            value = dataset.data[index];
            if (!isNaN(value) && !element.hidden) {
              total += Math.abs(value);
            }
          });
          return total;
        },
        calculateCircumference: function(value) {
          var total = this.getMeta().total;
          if (total > 0 && !isNaN(value)) {
            return Math.PI * 2 * (Math.abs(value) / total);
          }
          return 0;
        },
        // gets the max border or hover width to properly scale pie charts
        getMaxBorderWidth: function(arcs) {
          var max2 = 0;
          var index = this.index;
          var length = arcs.length;
          var borderWidth;
          var hoverWidth;
          for (var i = 0; i < length; i++) {
            borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;
            hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
            max2 = borderWidth > max2 ? borderWidth : max2;
            max2 = hoverWidth > max2 ? hoverWidth : max2;
          }
          return max2;
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.line.js
var require_controller_line = __commonJS({
  "node_modules/chart.js/src/controllers/controller.line.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("line", {
      showLines: true,
      spanGaps: false,
      hover: {
        mode: "label"
      },
      scales: {
        xAxes: [{
          type: "category",
          id: "x-axis-0"
        }],
        yAxes: [{
          type: "linear",
          id: "y-axis-0"
        }]
      }
    });
    module2.exports = function(Chart) {
      function lineEnabled(dataset, options) {
        return helpers.valueOrDefault(dataset.showLine, options.showLines);
      }
      Chart.controllers.line = Chart.DatasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var options = me.chart.options;
          var lineElementOptions = options.elements.line;
          var scale = me.getScaleForId(meta.yAxisID);
          var i, ilen, custom;
          var dataset = me.getDataset();
          var showLine = lineEnabled(dataset, options);
          if (showLine) {
            custom = line.custom || {};
            if (dataset.tension !== void 0 && dataset.lineTension === void 0) {
              dataset.lineTension = dataset.tension;
            }
            line._scale = scale;
            line._datasetIndex = me.index;
            line._children = points;
            line._model = {
              // Appearance
              // The default behavior of lines is to break at null values, according
              // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
              // This option gives lines the ability to span gaps
              spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
              fill: custom.fill ? custom.fill : dataset.fill !== void 0 ? dataset.fill : lineElementOptions.fill,
              steppedLine: custom.steppedLine ? custom.steppedLine : helpers.valueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
              cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.valueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode)
            };
            line.pivot();
          }
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
          }
          if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
          }
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
          }
        },
        getPointBackgroundColor: function(point, index) {
          var backgroundColor = this.chart.options.elements.point.backgroundColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};
          if (custom.backgroundColor) {
            backgroundColor = custom.backgroundColor;
          } else if (dataset.pointBackgroundColor) {
            backgroundColor = helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
          } else if (dataset.backgroundColor) {
            backgroundColor = dataset.backgroundColor;
          }
          return backgroundColor;
        },
        getPointBorderColor: function(point, index) {
          var borderColor = this.chart.options.elements.point.borderColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};
          if (custom.borderColor) {
            borderColor = custom.borderColor;
          } else if (dataset.pointBorderColor) {
            borderColor = helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
          } else if (dataset.borderColor) {
            borderColor = dataset.borderColor;
          }
          return borderColor;
        },
        getPointBorderWidth: function(point, index) {
          var borderWidth = this.chart.options.elements.point.borderWidth;
          var dataset = this.getDataset();
          var custom = point.custom || {};
          if (!isNaN(custom.borderWidth)) {
            borderWidth = custom.borderWidth;
          } else if (!isNaN(dataset.pointBorderWidth) || helpers.isArray(dataset.pointBorderWidth)) {
            borderWidth = helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
          } else if (!isNaN(dataset.borderWidth)) {
            borderWidth = dataset.borderWidth;
          }
          return borderWidth;
        },
        getPointRotation: function(point, index) {
          var pointRotation = this.chart.options.elements.point.rotation;
          var dataset = this.getDataset();
          var custom = point.custom || {};
          if (!isNaN(custom.rotation)) {
            pointRotation = custom.rotation;
          } else if (!isNaN(dataset.pointRotation) || helpers.isArray(dataset.pointRotation)) {
            pointRotation = helpers.valueAtIndexOrDefault(dataset.pointRotation, index, pointRotation);
          }
          return pointRotation;
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var datasetIndex = me.index;
          var value = dataset.data[index];
          var yScale = me.getScaleForId(meta.yAxisID);
          var xScale = me.getScaleForId(meta.xAxisID);
          var pointOptions = me.chart.options.elements.point;
          var x, y;
          if (dataset.radius !== void 0 && dataset.pointRadius === void 0) {
            dataset.pointRadius = dataset.radius;
          }
          if (dataset.hitRadius !== void 0 && dataset.pointHitRadius === void 0) {
            dataset.pointHitRadius = dataset.hitRadius;
          }
          x = xScale.getPixelForValue(typeof value === "object" ? value : NaN, index, datasetIndex);
          y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._datasetIndex = datasetIndex;
          point._index = index;
          point._model = {
            x,
            y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            // Appearance
            radius: custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
            pointStyle: custom.pointStyle || helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
            rotation: me.getPointRotation(point, index),
            backgroundColor: me.getPointBackgroundColor(point, index),
            borderColor: me.getPointBorderColor(point, index),
            borderWidth: me.getPointBorderWidth(point, index),
            tension: meta.dataset._model ? meta.dataset._model.tension : 0,
            steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
            // Tooltip
            hitRadius: custom.hitRadius || helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
          };
        },
        calculatePointY: function(value, index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var sumPos = 0;
          var sumNeg = 0;
          var i, ds, dsMeta;
          if (yScale.options.stacked) {
            for (i = 0; i < datasetIndex; i++) {
              ds = chart.data.datasets[i];
              dsMeta = chart.getDatasetMeta(i);
              if (dsMeta.type === "line" && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                if (stackedRightValue < 0) {
                  sumNeg += stackedRightValue || 0;
                } else {
                  sumPos += stackedRightValue || 0;
                }
              }
            }
            var rightValue = Number(yScale.getRightValue(value));
            if (rightValue < 0) {
              return yScale.getPixelForValue(sumNeg + rightValue);
            }
            return yScale.getPixelForValue(sumPos + rightValue);
          }
          return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function() {
          var me = this;
          var meta = me.getMeta();
          var area = me.chart.chartArea;
          var points = meta.data || [];
          var i, ilen, point, model, controlPoints;
          if (meta.dataset._model.spanGaps) {
            points = points.filter(function(pt) {
              return !pt._model.skip;
            });
          }
          function capControlPoint(pt, min2, max2) {
            return Math.max(Math.min(pt, max2), min2);
          }
          if (meta.dataset._model.cubicInterpolationMode === "monotone") {
            helpers.splineCurveMonotone(points);
          } else {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              point = points[i];
              model = point._model;
              controlPoints = helpers.splineCurve(
                helpers.previousItem(points, i)._model,
                model,
                helpers.nextItem(points, i)._model,
                meta.dataset._model.tension
              );
              model.controlPointPreviousX = controlPoints.previous.x;
              model.controlPointPreviousY = controlPoints.previous.y;
              model.controlPointNextX = controlPoints.next.x;
              model.controlPointNextY = controlPoints.next.y;
            }
          }
          if (me.chart.options.elements.line.capBezierPoints) {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
            }
          }
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var points = meta.data || [];
          var area = chart.chartArea;
          var ilen = points.length;
          var halfBorderWidth;
          var i = 0;
          if (lineEnabled(me.getDataset(), chart.options)) {
            halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;
            helpers.canvas.clipArea(chart.ctx, {
              left: area.left,
              right: area.right,
              top: area.top - halfBorderWidth,
              bottom: area.bottom + halfBorderWidth
            });
            meta.dataset.draw();
            helpers.canvas.unclipArea(chart.ctx);
          }
          for (; i < ilen; ++i) {
            points[i].draw(area);
          }
        },
        setHoverStyle: function(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var model = element._model;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = custom.hoverBackgroundColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
          model.radius = custom.hoverRadius || helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.polarArea.js
var require_controller_polarArea = __commonJS({
  "node_modules/chart.js/src/controllers/controller.polarArea.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("polarArea", {
      scale: {
        type: "radialLinear",
        angleLines: {
          display: false
        },
        gridLines: {
          circular: true
        },
        pointLabels: {
          display: false
        },
        ticks: {
          beginAtZero: true
        }
      },
      // Boolean - Whether to animate the rotation of the chart
      animation: {
        animateRotate: true,
        animateScale: true
      },
      startAngle: -0.5 * Math.PI,
      legendCallback: function(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;
        if (datasets.length) {
          for (var i = 0; i < datasets[0].data.length; ++i) {
            text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
            if (labels[i]) {
              text.push(labels[i]);
            }
            text.push("</li>");
          }
        }
        text.push("</ul>");
        return text.join("");
      },
      legend: {
        labels: {
          generateLabels: function(chart) {
            var data = chart.data;
            if (data.labels.length && data.datasets.length) {
              return data.labels.map(function(label, i) {
                var meta = chart.getDatasetMeta(0);
                var ds = data.datasets[0];
                var arc = meta.data[i];
                var custom = arc.custom || {};
                var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                var arcOpts = chart.options.elements.arc;
                var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                return {
                  text: label,
                  fillStyle: fill,
                  strokeStyle: stroke,
                  lineWidth: bw,
                  hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                  // Extra data used for toggling the correct item
                  index: i
                };
              });
            }
            return [];
          }
        },
        onClick: function(e, legendItem) {
          var index = legendItem.index;
          var chart = this.chart;
          var i, ilen, meta;
          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i);
            meta.data[index].hidden = !meta.data[index].hidden;
          }
          chart.update();
        }
      },
      // Need to override these to give a nice default
      tooltips: {
        callbacks: {
          title: function() {
            return "";
          },
          label: function(item, data) {
            return data.labels[item.index] + ": " + item.yLabel;
          }
        }
      }
    });
    module2.exports = function(Chart) {
      Chart.controllers.polarArea = Chart.DatasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers.noop,
        update: function(reset) {
          var me = this;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          var start = me.chart.options.startAngle || 0;
          var starts = me._starts = [];
          var angles = me._angles = [];
          var i, ilen, angle;
          me._updateRadius();
          meta.count = me.countVisibleElements();
          for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
            starts[i] = start;
            angle = me._computeAngle(i);
            angles[i] = angle;
            start += angle;
          }
          helpers.each(meta.data, function(arc, index) {
            me.updateElement(arc, index, reset);
          });
        },
        /**
         * @private
         */
        _updateRadius: function() {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var arcOpts = opts.elements.arc;
          var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
          chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
          me.innerRadius = me.outerRadius - chart.radiusLength;
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var opts = chart.options;
          var animationOpts = opts.animation;
          var scale = chart.scale;
          var labels = chart.data.labels;
          var centerX = scale.xCenter;
          var centerY = scale.yCenter;
          var datasetStartAngle = opts.startAngle;
          var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          var startAngle = me._starts[index];
          var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
          var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: centerX,
              y: centerY,
              innerRadius: 0,
              outerRadius: reset ? resetRadius : distance,
              startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
              endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
              label: helpers.valueAtIndexOrDefault(labels, index, labels[index])
            }
          });
          var elementOpts = this.chart.options.elements.arc;
          var custom = arc.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var model = arc._model;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
          arc.pivot();
        },
        countVisibleElements: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var count = 0;
          helpers.each(meta.data, function(element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
              count++;
            }
          });
          return count;
        },
        /**
         * @private
         */
        _computeAngle: function(index) {
          var me = this;
          var count = this.getMeta().count;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
            return 0;
          }
          var context = {
            chart: me.chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          return helpers.options.resolve([
            me.chart.options.elements.arc.angle,
            2 * Math.PI / count
          ], context, index);
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.radar.js
var require_controller_radar = __commonJS({
  "node_modules/chart.js/src/controllers/controller.radar.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("radar", {
      scale: {
        type: "radialLinear"
      },
      elements: {
        line: {
          tension: 0
          // no bezier in radar
        }
      }
    });
    module2.exports = function(Chart) {
      Chart.controllers.radar = Chart.DatasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        linkScales: helpers.noop,
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data;
          var custom = line.custom || {};
          var dataset = me.getDataset();
          var lineElementOptions = me.chart.options.elements.line;
          var scale = me.chart.scale;
          if (dataset.tension !== void 0 && dataset.lineTension === void 0) {
            dataset.lineTension = dataset.tension;
          }
          helpers.extend(meta.dataset, {
            // Utility
            _datasetIndex: me.index,
            _scale: scale,
            // Data
            _children: points,
            _loop: true,
            // Model
            _model: {
              // Appearance
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              fill: custom.fill ? custom.fill : dataset.fill !== void 0 ? dataset.fill : lineElementOptions.fill,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle
            }
          });
          meta.dataset.pivot();
          helpers.each(points, function(point, index) {
            me.updateElement(point, index, reset);
          }, me);
          me.updateBezierControlPoints();
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var scale = me.chart.scale;
          var pointElementOptions = me.chart.options.elements.point;
          var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
          if (dataset.radius !== void 0 && dataset.pointRadius === void 0) {
            dataset.pointRadius = dataset.radius;
          }
          if (dataset.hitRadius !== void 0 && dataset.pointHitRadius === void 0) {
            dataset.pointHitRadius = dataset.hitRadius;
          }
          helpers.extend(point, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: reset ? scale.xCenter : pointPosition.x,
              // value not used in dataset scale, but we want a consistent API between scales
              y: reset ? scale.yCenter : pointPosition.y,
              // Appearance
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
              radius: custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
              borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
              borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
              pointStyle: custom.pointStyle ? custom.pointStyle : helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
              rotation: custom.rotation ? custom.rotation : helpers.valueAtIndexOrDefault(dataset.pointRotation, index, pointElementOptions.rotation),
              // Tooltip
              hitRadius: custom.hitRadius ? custom.hitRadius : helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointElementOptions.hitRadius)
            }
          });
          point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
        },
        updateBezierControlPoints: function() {
          var chartArea = this.chart.chartArea;
          var meta = this.getMeta();
          helpers.each(meta.data, function(point, index) {
            var model = point._model;
            var controlPoints = helpers.splineCurve(
              helpers.previousItem(meta.data, index, true)._model,
              model,
              helpers.nextItem(meta.data, index, true)._model,
              model.tension
            );
            model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
            model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
            model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
            model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
            point.pivot();
          });
        },
        setHoverStyle: function(point) {
          var dataset = this.chart.data.datasets[point._datasetIndex];
          var custom = point.custom || {};
          var index = point._index;
          var model = point._model;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        }
      });
    };
  }
});

// node_modules/chart.js/src/controllers/controller.scatter.js
var require_controller_scatter = __commonJS({
  "node_modules/chart.js/src/controllers/controller.scatter.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    defaults2._set("scatter", {
      hover: {
        mode: "single"
      },
      scales: {
        xAxes: [{
          id: "x-axis-1",
          // need an ID so datasets can reference the scale
          type: "linear",
          // scatter should not use a category axis
          position: "bottom"
        }],
        yAxes: [{
          id: "y-axis-1",
          type: "linear",
          position: "left"
        }]
      },
      showLines: false,
      tooltips: {
        callbacks: {
          title: function() {
            return "";
          },
          label: function(item) {
            return "(" + item.xLabel + ", " + item.yLabel + ")";
          }
        }
      }
    });
    module2.exports = function(Chart) {
      Chart.controllers.scatter = Chart.controllers.line;
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Bar.js
var require_Chart_Bar = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Bar.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Bar = function(context, config) {
        config.type = "bar";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Bubble.js
var require_Chart_Bubble = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Bubble.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Bubble = function(context, config) {
        config.type = "bubble";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Doughnut.js
var require_Chart_Doughnut = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Doughnut.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Doughnut = function(context, config) {
        config.type = "doughnut";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Line.js
var require_Chart_Line = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Line.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Line = function(context, config) {
        config.type = "line";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.PolarArea.js
var require_Chart_PolarArea = __commonJS({
  "node_modules/chart.js/src/charts/Chart.PolarArea.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.PolarArea = function(context, config) {
        config.type = "polarArea";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Radar.js
var require_Chart_Radar = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Radar.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Radar = function(context, config) {
        config.type = "radar";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/charts/Chart.Scatter.js
var require_Chart_Scatter = __commonJS({
  "node_modules/chart.js/src/charts/Chart.Scatter.js"(exports, module2) {
    "use strict";
    module2.exports = function(Chart) {
      Chart.Scatter = function(context, config) {
        config.type = "scatter";
        return new Chart(context, config);
      };
    };
  }
});

// node_modules/chart.js/src/plugins/plugin.filler.js
var require_plugin_filler = __commonJS({
  "node_modules/chart.js/src/plugins/plugin.filler.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var elements = require_elements();
    var helpers = require_helpers();
    defaults2._set("global", {
      plugins: {
        filler: {
          propagate: true
        }
      }
    });
    var mappers = {
      dataset: function(source) {
        var index = source.fill;
        var chart = source.chart;
        var meta = chart.getDatasetMeta(index);
        var visible = meta && chart.isDatasetVisible(index);
        var points = visible && meta.dataset._children || [];
        var length = points.length || 0;
        return !length ? null : function(point, i) {
          return i < length && points[i]._view || null;
        };
      },
      boundary: function(source) {
        var boundary = source.boundary;
        var x = boundary ? boundary.x : null;
        var y = boundary ? boundary.y : null;
        return function(point) {
          return {
            x: x === null ? point.x : x,
            y: y === null ? point.y : y
          };
        };
      }
    };
    function decodeFill(el, index, count) {
      var model = el._model || {};
      var fill = model.fill;
      var target;
      if (fill === void 0) {
        fill = !!model.backgroundColor;
      }
      if (fill === false || fill === null) {
        return false;
      }
      if (fill === true) {
        return "origin";
      }
      target = parseFloat(fill, 10);
      if (isFinite(target) && Math.floor(target) === target) {
        if (fill[0] === "-" || fill[0] === "+") {
          target = index + target;
        }
        if (target === index || target < 0 || target >= count) {
          return false;
        }
        return target;
      }
      switch (fill) {
        case "bottom":
          return "start";
        case "top":
          return "end";
        case "zero":
          return "origin";
        case "origin":
        case "start":
        case "end":
          return fill;
        default:
          return false;
      }
    }
    function computeBoundary(source) {
      var model = source.el._model || {};
      var scale = source.el._scale || {};
      var fill = source.fill;
      var target = null;
      var horizontal;
      if (isFinite(fill)) {
        return null;
      }
      if (fill === "start") {
        target = model.scaleBottom === void 0 ? scale.bottom : model.scaleBottom;
      } else if (fill === "end") {
        target = model.scaleTop === void 0 ? scale.top : model.scaleTop;
      } else if (model.scaleZero !== void 0) {
        target = model.scaleZero;
      } else if (scale.getBasePosition) {
        target = scale.getBasePosition();
      } else if (scale.getBasePixel) {
        target = scale.getBasePixel();
      }
      if (target !== void 0 && target !== null) {
        if (target.x !== void 0 && target.y !== void 0) {
          return target;
        }
        if (typeof target === "number" && isFinite(target)) {
          horizontal = scale.isHorizontal();
          return {
            x: horizontal ? target : null,
            y: horizontal ? null : target
          };
        }
      }
      return null;
    }
    function resolveTarget(sources, index, propagate) {
      var source = sources[index];
      var fill = source.fill;
      var visited = [index];
      var target;
      if (!propagate) {
        return fill;
      }
      while (fill !== false && visited.indexOf(fill) === -1) {
        if (!isFinite(fill)) {
          return fill;
        }
        target = sources[fill];
        if (!target) {
          return false;
        }
        if (target.visible) {
          return fill;
        }
        visited.push(fill);
        fill = target.fill;
      }
      return false;
    }
    function createMapper(source) {
      var fill = source.fill;
      var type = "dataset";
      if (fill === false) {
        return null;
      }
      if (!isFinite(fill)) {
        type = "boundary";
      }
      return mappers[type](source);
    }
    function isDrawable(point) {
      return point && !point.skip;
    }
    function drawArea(ctx, curve0, curve1, len0, len1) {
      var i;
      if (!len0 || !len1) {
        return;
      }
      ctx.moveTo(curve0[0].x, curve0[0].y);
      for (i = 1; i < len0; ++i) {
        helpers.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
      }
      ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
      for (i = len1 - 1; i > 0; --i) {
        helpers.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
      }
    }
    function doFill(ctx, points, mapper, view, color, loop) {
      var count = points.length;
      var span = view.spanGaps;
      var curve0 = [];
      var curve1 = [];
      var len0 = 0;
      var len1 = 0;
      var i, ilen, index, p0, p1, d0, d1;
      ctx.beginPath();
      for (i = 0, ilen = count + !!loop; i < ilen; ++i) {
        index = i % count;
        p0 = points[index]._view;
        p1 = mapper(p0, index, view);
        d0 = isDrawable(p0);
        d1 = isDrawable(p1);
        if (d0 && d1) {
          len0 = curve0.push(p0);
          len1 = curve1.push(p1);
        } else if (len0 && len1) {
          if (!span) {
            drawArea(ctx, curve0, curve1, len0, len1);
            len0 = len1 = 0;
            curve0 = [];
            curve1 = [];
          } else {
            if (d0) {
              curve0.push(p0);
            }
            if (d1) {
              curve1.push(p1);
            }
          }
        }
      }
      drawArea(ctx, curve0, curve1, len0, len1);
      ctx.closePath();
      ctx.fillStyle = color;
      ctx.fill();
    }
    module2.exports = {
      id: "filler",
      afterDatasetsUpdate: function(chart, options) {
        var count = (chart.data.datasets || []).length;
        var propagate = options.propagate;
        var sources = [];
        var meta, i, el, source;
        for (i = 0; i < count; ++i) {
          meta = chart.getDatasetMeta(i);
          el = meta.dataset;
          source = null;
          if (el && el._model && el instanceof elements.Line) {
            source = {
              visible: chart.isDatasetVisible(i),
              fill: decodeFill(el, i, count),
              chart,
              el
            };
          }
          meta.$filler = source;
          sources.push(source);
        }
        for (i = 0; i < count; ++i) {
          source = sources[i];
          if (!source) {
            continue;
          }
          source.fill = resolveTarget(sources, i, propagate);
          source.boundary = computeBoundary(source);
          source.mapper = createMapper(source);
        }
      },
      beforeDatasetDraw: function(chart, args) {
        var meta = args.meta.$filler;
        if (!meta) {
          return;
        }
        var ctx = chart.ctx;
        var el = meta.el;
        var view = el._view;
        var points = el._children || [];
        var mapper = meta.mapper;
        var color = view.backgroundColor || defaults2.global.defaultColor;
        if (mapper && color && points.length) {
          helpers.canvas.clipArea(ctx, chart.chartArea);
          doFill(ctx, points, mapper, view, color, el._loop);
          helpers.canvas.unclipArea(ctx);
        }
      }
    };
  }
});

// node_modules/chart.js/src/plugins/plugin.legend.js
var require_plugin_legend = __commonJS({
  "node_modules/chart.js/src/plugins/plugin.legend.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    var layouts = require_core_layouts();
    var noop = helpers.noop;
    defaults2._set("global", {
      legend: {
        display: true,
        position: "top",
        fullWidth: true,
        reverse: false,
        weight: 1e3,
        // a callback that will handle
        onClick: function(e, legendItem) {
          var index = legendItem.datasetIndex;
          var ci = this.chart;
          var meta = ci.getDatasetMeta(index);
          meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
          ci.update();
        },
        onHover: null,
        labels: {
          boxWidth: 40,
          padding: 10,
          // Generates labels shown in the legend
          // Valid properties to return:
          // text : text to display
          // fillStyle : fill of coloured box
          // strokeStyle: stroke of coloured box
          // hidden : if this legend item refers to a hidden item
          // lineCap : cap style for line
          // lineDash
          // lineDashOffset :
          // lineJoin :
          // lineWidth :
          generateLabels: function(chart) {
            var data = chart.data;
            return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
              return {
                text: dataset.label,
                fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                hidden: !chart.isDatasetVisible(i),
                lineCap: dataset.borderCapStyle,
                lineDash: dataset.borderDash,
                lineDashOffset: dataset.borderDashOffset,
                lineJoin: dataset.borderJoinStyle,
                lineWidth: dataset.borderWidth,
                strokeStyle: dataset.borderColor,
                pointStyle: dataset.pointStyle,
                // Below is extra data used for toggling the datasets
                datasetIndex: i
              };
            }, this) : [];
          }
        }
      },
      legendCallback: function(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        for (var i = 0; i < chart.data.datasets.length; i++) {
          text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
          if (chart.data.datasets[i].label) {
            text.push(chart.data.datasets[i].label);
          }
          text.push("</li>");
        }
        text.push("</ul>");
        return text.join("");
      }
    });
    function getBoxWidth(labelOpts, fontSize) {
      return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
    }
    var Legend = Element.extend({
      initialize: function(config) {
        helpers.extend(this, config);
        this.legendHitBoxes = [];
        this.doughnutMode = false;
      },
      // These methods are ordered by lifecycle. Utilities then follow.
      // Any function defined here is inherited by all legend types.
      // Any function can be extended by the legend type
      beforeUpdate: noop,
      update: function(maxWidth, maxHeight, margins) {
        var me = this;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins;
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: noop,
      //
      beforeSetDimensions: noop,
      setDimensions: function() {
        var me = this;
        if (me.isHorizontal()) {
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight;
          me.top = 0;
          me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
        me.minSize = {
          width: 0,
          height: 0
        };
      },
      afterSetDimensions: noop,
      //
      beforeBuildLabels: noop,
      buildLabels: function() {
        var me = this;
        var labelOpts = me.options.labels || {};
        var legendItems = helpers.callback(labelOpts.generateLabels, [me.chart], me) || [];
        if (labelOpts.filter) {
          legendItems = legendItems.filter(function(item) {
            return labelOpts.filter(item, me.chart.data);
          });
        }
        if (me.options.reverse) {
          legendItems.reverse();
        }
        me.legendItems = legendItems;
      },
      afterBuildLabels: noop,
      //
      beforeFit: noop,
      fit: function() {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var display = opts.display;
        var ctx = me.ctx;
        var globalDefault = defaults2.global;
        var valueOrDefault = helpers.valueOrDefault;
        var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
        var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
        var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
        var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
        var hitboxes = me.legendHitBoxes = [];
        var minSize = me.minSize;
        var isHorizontal = me.isHorizontal();
        if (isHorizontal) {
          minSize.width = me.maxWidth;
          minSize.height = display ? 10 : 0;
        } else {
          minSize.width = display ? 10 : 0;
          minSize.height = me.maxHeight;
        }
        if (display) {
          ctx.font = labelFont;
          if (isHorizontal) {
            var lineWidths = me.lineWidths = [0];
            var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
            ctx.textAlign = "left";
            ctx.textBaseline = "top";
            helpers.each(me.legendItems, function(legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                totalHeight += fontSize + labelOpts.padding;
                lineWidths[lineWidths.length] = me.left;
              }
              hitboxes[i] = {
                left: 0,
                top: 0,
                width,
                height: fontSize
              };
              lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
            });
            minSize.height += totalHeight;
          } else {
            var vPadding = labelOpts.padding;
            var columnWidths = me.columnWidths = [];
            var totalWidth = labelOpts.padding;
            var currentColWidth = 0;
            var currentColHeight = 0;
            var itemHeight = fontSize + vPadding;
            helpers.each(me.legendItems, function(legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (currentColHeight + itemHeight > minSize.height) {
                totalWidth += currentColWidth + labelOpts.padding;
                columnWidths.push(currentColWidth);
                currentColWidth = 0;
                currentColHeight = 0;
              }
              currentColWidth = Math.max(currentColWidth, itemWidth);
              currentColHeight += itemHeight;
              hitboxes[i] = {
                left: 0,
                top: 0,
                width: itemWidth,
                height: fontSize
              };
            });
            totalWidth += currentColWidth;
            columnWidths.push(currentColWidth);
            minSize.width += totalWidth;
          }
        }
        me.width = minSize.width;
        me.height = minSize.height;
      },
      afterFit: noop,
      // Shared Methods
      isHorizontal: function() {
        return this.options.position === "top" || this.options.position === "bottom";
      },
      // Actually draw the legend on the canvas
      draw: function() {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var globalDefault = defaults2.global;
        var lineDefault = globalDefault.elements.line;
        var legendWidth = me.width;
        var lineWidths = me.lineWidths;
        if (opts.display) {
          var ctx = me.ctx;
          var valueOrDefault = helpers.valueOrDefault;
          var fontColor = valueOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor);
          var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
          var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
          var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
          var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
          var cursor;
          ctx.textAlign = "left";
          ctx.textBaseline = "middle";
          ctx.lineWidth = 0.5;
          ctx.strokeStyle = fontColor;
          ctx.fillStyle = fontColor;
          ctx.font = labelFont;
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var hitboxes = me.legendHitBoxes;
          var drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0) {
              return;
            }
            ctx.save();
            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
            ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx.lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
            var isLineWidthZero = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;
            if (ctx.setLineDash) {
              ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
            }
            if (opts.labels && opts.labels.usePointStyle) {
              var radius = fontSize * Math.SQRT2 / 2;
              var offSet = radius / Math.SQRT2;
              var centerX = x + offSet;
              var centerY = y + offSet;
              helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
            } else {
              if (!isLineWidthZero) {
                ctx.strokeRect(x, y, boxWidth, fontSize);
              }
              ctx.fillRect(x, y, boxWidth, fontSize);
            }
            ctx.restore();
          };
          var fillText = function(x, y, legendItem, textWidth) {
            var halfFontSize = fontSize / 2;
            var xLeft = boxWidth + halfFontSize + x;
            var yMiddle = y + halfFontSize;
            ctx.fillText(legendItem.text, xLeft, yMiddle);
            if (legendItem.hidden) {
              ctx.beginPath();
              ctx.lineWidth = 2;
              ctx.moveTo(xLeft, yMiddle);
              ctx.lineTo(xLeft + textWidth, yMiddle);
              ctx.stroke();
            }
          };
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            cursor = {
              x: me.left + (legendWidth - lineWidths[0]) / 2,
              y: me.top + labelOpts.padding,
              line: 0
            };
          } else {
            cursor = {
              x: me.left + labelOpts.padding,
              y: me.top + labelOpts.padding,
              line: 0
            };
          }
          var itemHeight = fontSize + labelOpts.padding;
          helpers.each(me.legendItems, function(legendItem, i) {
            var textWidth = ctx.measureText(legendItem.text).width;
            var width = boxWidth + fontSize / 2 + textWidth;
            var x = cursor.x;
            var y = cursor.y;
            if (isHorizontal) {
              if (x + width >= legendWidth) {
                y = cursor.y += itemHeight;
                cursor.line++;
                x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
              }
            } else if (y + itemHeight > me.bottom) {
              x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
              y = cursor.y = me.top + labelOpts.padding;
              cursor.line++;
            }
            drawLegendBox(x, y, legendItem);
            hitboxes[i].left = x;
            hitboxes[i].top = y;
            fillText(x, y, legendItem, textWidth);
            if (isHorizontal) {
              cursor.x += width + labelOpts.padding;
            } else {
              cursor.y += itemHeight;
            }
          });
        }
      },
      /**
       * Handle an event
       * @private
       * @param {IEvent} event - The event to handle
       * @return {Boolean} true if a change occured
       */
      handleEvent: function(e) {
        var me = this;
        var opts = me.options;
        var type = e.type === "mouseup" ? "click" : e.type;
        var changed = false;
        if (type === "mousemove") {
          if (!opts.onHover) {
            return;
          }
        } else if (type === "click") {
          if (!opts.onClick) {
            return;
          }
        } else {
          return;
        }
        var x = e.x;
        var y = e.y;
        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
          var lh = me.legendHitBoxes;
          for (var i = 0; i < lh.length; ++i) {
            var hitBox = lh[i];
            if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
              if (type === "click") {
                opts.onClick.call(me, e.native, me.legendItems[i]);
                changed = true;
                break;
              } else if (type === "mousemove") {
                opts.onHover.call(me, e.native, me.legendItems[i]);
                changed = true;
                break;
              }
            }
          }
        }
        return changed;
      }
    });
    function createNewLegendAndAttach(chart, legendOpts) {
      var legend = new Legend({
        ctx: chart.ctx,
        options: legendOpts,
        chart
      });
      layouts.configure(chart, legend, legendOpts);
      layouts.addBox(chart, legend);
      chart.legend = legend;
    }
    module2.exports = {
      id: "legend",
      /**
       * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
       * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
       * the plugin, which one will be re-exposed in the chart.js file.
       * https://github.com/chartjs/Chart.js/pull/2640
       * @private
       */
      _element: Legend,
      beforeInit: function(chart) {
        var legendOpts = chart.options.legend;
        if (legendOpts) {
          createNewLegendAndAttach(chart, legendOpts);
        }
      },
      beforeUpdate: function(chart) {
        var legendOpts = chart.options.legend;
        var legend = chart.legend;
        if (legendOpts) {
          helpers.mergeIf(legendOpts, defaults2.global.legend);
          if (legend) {
            layouts.configure(chart, legend, legendOpts);
            legend.options = legendOpts;
          } else {
            createNewLegendAndAttach(chart, legendOpts);
          }
        } else if (legend) {
          layouts.removeBox(chart, legend);
          delete chart.legend;
        }
      },
      afterEvent: function(chart, e) {
        var legend = chart.legend;
        if (legend) {
          legend.handleEvent(e);
        }
      }
    };
  }
});

// node_modules/chart.js/src/plugins/plugin.title.js
var require_plugin_title = __commonJS({
  "node_modules/chart.js/src/plugins/plugin.title.js"(exports, module2) {
    "use strict";
    var defaults2 = require_core_defaults();
    var Element = require_core_element();
    var helpers = require_helpers();
    var layouts = require_core_layouts();
    var noop = helpers.noop;
    defaults2._set("global", {
      title: {
        display: false,
        fontStyle: "bold",
        fullWidth: true,
        lineHeight: 1.2,
        padding: 10,
        position: "top",
        text: "",
        weight: 2e3
        // by default greater than legend (1000) to be above
      }
    });
    var Title = Element.extend({
      initialize: function(config) {
        var me = this;
        helpers.extend(me, config);
        me.legendHitBoxes = [];
      },
      // These methods are ordered by lifecycle. Utilities then follow.
      beforeUpdate: noop,
      update: function(maxWidth, maxHeight, margins) {
        var me = this;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins;
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: noop,
      //
      beforeSetDimensions: noop,
      setDimensions: function() {
        var me = this;
        if (me.isHorizontal()) {
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight;
          me.top = 0;
          me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
        me.minSize = {
          width: 0,
          height: 0
        };
      },
      afterSetDimensions: noop,
      //
      beforeBuildLabels: noop,
      buildLabels: noop,
      afterBuildLabels: noop,
      //
      beforeFit: noop,
      fit: function() {
        var me = this;
        var valueOrDefault = helpers.valueOrDefault;
        var opts = me.options;
        var display = opts.display;
        var fontSize = valueOrDefault(opts.fontSize, defaults2.global.defaultFontSize);
        var minSize = me.minSize;
        var lineCount = helpers.isArray(opts.text) ? opts.text.length : 1;
        var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
        var textSize = display ? lineCount * lineHeight + opts.padding * 2 : 0;
        if (me.isHorizontal()) {
          minSize.width = me.maxWidth;
          minSize.height = textSize;
        } else {
          minSize.width = textSize;
          minSize.height = me.maxHeight;
        }
        me.width = minSize.width;
        me.height = minSize.height;
      },
      afterFit: noop,
      // Shared Methods
      isHorizontal: function() {
        var pos = this.options.position;
        return pos === "top" || pos === "bottom";
      },
      // Actually draw the title block on the canvas
      draw: function() {
        var me = this;
        var ctx = me.ctx;
        var valueOrDefault = helpers.valueOrDefault;
        var opts = me.options;
        var globalDefaults = defaults2.global;
        if (opts.display) {
          var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
          var fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle);
          var fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily);
          var titleFont = helpers.fontString(fontSize, fontStyle, fontFamily);
          var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
          var offset2 = lineHeight / 2 + opts.padding;
          var rotation = 0;
          var top = me.top;
          var left = me.left;
          var bottom = me.bottom;
          var right = me.right;
          var maxWidth, titleX, titleY;
          ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor);
          ctx.font = titleFont;
          if (me.isHorizontal()) {
            titleX = left + (right - left) / 2;
            titleY = top + offset2;
            maxWidth = right - left;
          } else {
            titleX = opts.position === "left" ? left + offset2 : right - offset2;
            titleY = top + (bottom - top) / 2;
            maxWidth = bottom - top;
            rotation = Math.PI * (opts.position === "left" ? -0.5 : 0.5);
          }
          ctx.save();
          ctx.translate(titleX, titleY);
          ctx.rotate(rotation);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          var text = opts.text;
          if (helpers.isArray(text)) {
            var y = 0;
            for (var i = 0; i < text.length; ++i) {
              ctx.fillText(text[i], 0, y, maxWidth);
              y += lineHeight;
            }
          } else {
            ctx.fillText(text, 0, 0, maxWidth);
          }
          ctx.restore();
        }
      }
    });
    function createNewTitleBlockAndAttach(chart, titleOpts) {
      var title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
      });
      layouts.configure(chart, title, titleOpts);
      layouts.addBox(chart, title);
      chart.titleBlock = title;
    }
    module2.exports = {
      id: "title",
      /**
       * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
       * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
       * the plugin, which one will be re-exposed in the chart.js file.
       * https://github.com/chartjs/Chart.js/pull/2640
       * @private
       */
      _element: Title,
      beforeInit: function(chart) {
        var titleOpts = chart.options.title;
        if (titleOpts) {
          createNewTitleBlockAndAttach(chart, titleOpts);
        }
      },
      beforeUpdate: function(chart) {
        var titleOpts = chart.options.title;
        var titleBlock = chart.titleBlock;
        if (titleOpts) {
          helpers.mergeIf(titleOpts, defaults2.global.title);
          if (titleBlock) {
            layouts.configure(chart, titleBlock, titleOpts);
            titleBlock.options = titleOpts;
          } else {
            createNewTitleBlockAndAttach(chart, titleOpts);
          }
        } else if (titleBlock) {
          layouts.removeBox(chart, titleBlock);
          delete chart.titleBlock;
        }
      }
    };
  }
});

// node_modules/chart.js/src/plugins/index.js
var require_plugins = __commonJS({
  "node_modules/chart.js/src/plugins/index.js"(exports, module2) {
    "use strict";
    module2.exports = {};
    module2.exports.filler = require_plugin_filler();
    module2.exports.legend = require_plugin_legend();
    module2.exports.title = require_plugin_title();
  }
});

// node_modules/chart.js/src/chart.js
var require_chart = __commonJS({
  "node_modules/chart.js/src/chart.js"(exports, module2) {
    var Chart = require_core()();
    Chart.helpers = require_helpers();
    require_core_helpers()(Chart);
    Chart.Animation = require_core_animation();
    Chart.animationService = require_core_animations();
    Chart.defaults = require_core_defaults();
    Chart.Element = require_core_element();
    Chart.elements = require_elements();
    Chart.Interaction = require_core_interaction();
    Chart.layouts = require_core_layouts();
    Chart.platform = require_platform();
    Chart.plugins = require_core_plugins();
    Chart.Scale = require_core_scale();
    Chart.scaleService = require_core_scaleService();
    Chart.Ticks = require_core_ticks();
    Chart.Tooltip = require_core_tooltip();
    require_core_controller()(Chart);
    require_core_datasetController()(Chart);
    require_scale_linearbase()(Chart);
    require_scale_category()(Chart);
    require_scale_linear()(Chart);
    require_scale_logarithmic()(Chart);
    require_scale_radialLinear()(Chart);
    require_scale_time()(Chart);
    require_controller_bar()(Chart);
    require_controller_bubble()(Chart);
    require_controller_doughnut()(Chart);
    require_controller_line()(Chart);
    require_controller_polarArea()(Chart);
    require_controller_radar()(Chart);
    require_controller_scatter()(Chart);
    require_Chart_Bar()(Chart);
    require_Chart_Bubble()(Chart);
    require_Chart_Doughnut()(Chart);
    require_Chart_Line()(Chart);
    require_Chart_PolarArea()(Chart);
    require_Chart_Radar()(Chart);
    require_Chart_Scatter()(Chart);
    var plugins = require_plugins();
    for (k in plugins) {
      if (plugins.hasOwnProperty(k)) {
        Chart.plugins.register(plugins[k]);
      }
    }
    var k;
    Chart.platform.initialize();
    module2.exports = Chart;
    if (typeof window !== "undefined") {
      window.Chart = Chart;
    }
    Chart.Legend = plugins.legend._element;
    Chart.Title = plugins.title._element;
    Chart.pluginService = Chart.plugins;
    Chart.PluginBase = Chart.Element.extend({});
    Chart.canvasHelpers = Chart.helpers.canvas;
    Chart.layoutService = Chart.layouts;
  }
});

export {
  require_chart
};
/*! Bundled license information:

moment/dist/moment.js:
  (*! moment.js *)
  (*! version : 2.29.4 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/
//# sourceMappingURL=chunk-KRXOF3SJ.js.map
